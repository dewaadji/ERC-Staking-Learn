{
	"id": "a0fecc2510ec84a4c8f69a21e87f093c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.24",
	"solcLongVersion": "0.8.24+commit.e11b9ed9",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/StakeTokenStaking.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\n\r\ncontract Staking is IERC721Receiver, ERC721Holder {\r\n\r\n    IERC721 immutable nft;\r\n    ERC20 immutable token;\r\n\r\n    //mapping to save stakes\r\n    mapping (address => mapping(uint256 => uint256)) public stakes;\r\n\r\n    constructor(address _nft, address _token) {\r\n        nft = IERC721(_nft);\r\n        token = ERC20(_token);\r\n    }\r\n\r\n    function calculateRate(uint256 time) private pure returns(uint256) {\r\n        if(time < 1 minutes) {\r\n            return 0;\r\n        } else if(time < 3 minutes) {\r\n            return 3;\r\n        } else if(time < 5 minutes) {\r\n            return 5;\r\n        } else{\r\n            return 10;\r\n        }\r\n    }\r\n\r\n    function staking(uint256 _tokenId) public {\r\n        require(nft.ownerOf(_tokenId) == msg.sender, \"You're not own this NFT\");\r\n        //stake NFT\r\n        stakes[msg.sender][_tokenId] = block.timestamp;\r\n        nft.safeTransferFrom(msg.sender, address(this), _tokenId, \"\");\r\n    }\r\n\r\n    function calculateReward(uint256 _tokenId) public view returns(uint256) {\r\n        require(stakes[msg.sender][_tokenId] > 0, \"You never stake this NFT\");\r\n        uint256 time = block.timestamp - stakes[msg.sender][_tokenId];\r\n        uint256 rewardAmount = calculateRate(time) * time * (10 ** 18) / 1 minutes;\r\n        return rewardAmount;\r\n    }\r\n\r\n    function unstake(uint256 _tokenId) public {\r\n        //calculate reward\r\n        uint256 rewardAmount = calculateReward(_tokenId);\r\n        delete stakes[msg.sender][_tokenId];\r\n        nft.safeTransferFrom(address(this), msg.sender, _tokenId, \"\");\r\n\r\n        token.transfer(msg.sender, rewardAmount);\r\n\r\n        //transfer nft back to original owner\r\n        //send reward\r\n    }\r\n\r\n}"
			},
			"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Receiver} from \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\n * {IERC721-setApprovalForAll}.\n */\nabstract contract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts@5.0.1/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 159,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 165,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 167,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 169,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 171,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
				"ERC721Holder": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC721Receiver} interface. Accepts all token transfers. Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC721Receiver} interface. Accepts all token transfers. Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":\"ERC721Holder\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"keccak256\":\"0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5396e8dbb000c2fada59b7d2093b9c7c870fd09413ab0fdaba45d882959c6244\",\"dweb:/ipfs/QmXQn5XckSiUsUBpMYuiFeqnojRX4rKa9jmgjCPeTuPmhh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts@5.0.1/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.1/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.1/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.1/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/StakeTokenStaking.sol": {
				"Staking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_nft",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "calculateReward",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "stakes",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "staking",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "unstake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/StakeTokenStaking.sol\":327:2009  contract Staking is IERC721Receiver, ERC721Holder {... */\n  mstore(0x40, 0xc0)\n    /* \"contracts/StakeTokenStaking.sol\":545:657  constructor(address _nft, address _token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/StakeTokenStaking.sol\":612:616  _nft */\n  dup2\n    /* \"contracts/StakeTokenStaking.sol\":598:617  nft = IERC721(_nft) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x80\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/StakeTokenStaking.sol\":642:648  _token */\n  dup1\n    /* \"contracts/StakeTokenStaking.sol\":628:649  token = ERC20(_token) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xa0\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/StakeTokenStaking.sol\":545:657  constructor(address _nft, address _token) {... */\n  pop\n  pop\n    /* \"contracts/StakeTokenStaking.sol\":327:2009  contract Staking is IERC721Receiver, ERC721Holder {... */\n  jump(tag_6)\n    /* \"#utility.yul\":88:205   */\ntag_8:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_10:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_11:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_20\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_10\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_12:\n    /* \"#utility.yul\":641:665   */\n  tag_22\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_11\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_23\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_23:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_13:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_25\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_12\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1352   */\ntag_3:\n    /* \"#utility.yul\":924:930   */\n  0x00\n    /* \"#utility.yul\":932:938   */\n  dup1\n    /* \"#utility.yul\":981:983   */\n  0x40\n    /* \"#utility.yul\":969:978   */\n  dup4\n    /* \"#utility.yul\":960:967   */\n  dup6\n    /* \"#utility.yul\":956:979   */\n  sub\n    /* \"#utility.yul\":952:984   */\n  slt\n    /* \"#utility.yul\":949:1068   */\n  iszero\n  tag_27\n  jumpi\n    /* \"#utility.yul\":987:1066   */\n  tag_28\n  tag_8\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":949:1068   */\ntag_27:\n    /* \"#utility.yul\":1107:1108   */\n  0x00\n    /* \"#utility.yul\":1132:1196   */\n  tag_29\n    /* \"#utility.yul\":1188:1195   */\n  dup6\n    /* \"#utility.yul\":1179:1185   */\n  dup3\n    /* \"#utility.yul\":1168:1177   */\n  dup7\n    /* \"#utility.yul\":1164:1186   */\n  add\n    /* \"#utility.yul\":1132:1196   */\n  tag_13\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":1122:1196   */\n  swap3\n  pop\n    /* \"#utility.yul\":1078:1206   */\n  pop\n    /* \"#utility.yul\":1245:1247   */\n  0x20\n    /* \"#utility.yul\":1271:1335   */\n  tag_30\n    /* \"#utility.yul\":1327:1334   */\n  dup6\n    /* \"#utility.yul\":1318:1324   */\n  dup3\n    /* \"#utility.yul\":1307:1316   */\n  dup7\n    /* \"#utility.yul\":1303:1325   */\n  add\n    /* \"#utility.yul\":1271:1335   */\n  tag_13\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":1261:1335   */\n  swap2\n  pop\n    /* \"#utility.yul\":1216:1345   */\n  pop\n    /* \"#utility.yul\":845:1352   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"contracts/StakeTokenStaking.sol\":327:2009  contract Staking is IERC721Receiver, ERC721Holder {... */\ntag_6:\n  mload(0x80)\n  mload(0xa0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x78a9014aa316c0d81e8cac1983f47ca946aa7db198b97933cfa2b1daf2bdc940\")\n  0x00\n  assignImmutable(\"0xb2b512b441304a14c78813be0575a2b1be8296b169485190a954ec0635e46369\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/StakeTokenStaking.sol\":327:2009  contract Staking is IERC721Receiver, ERC721Holder {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x150b7a02\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x1dbb2a22\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2e17de78\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x584b62a1\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xd2d7231f\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":639:792  function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {... */\n    tag_3:\n      tag_8\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_9\n      swap2\n      swap1\n      tag_10\n      jump\t// in\n    tag_9:\n      tag_11\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      tag_12\n      swap2\n      swap1\n      tag_13\n      jump\t// in\n    tag_12:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakeTokenStaking.sol\":979:1261  function staking(uint256 _tokenId) public {... */\n    tag_4:\n      tag_14\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      tag_17\n      jump\t// in\n    tag_14:\n      stop\n        /* \"contracts/StakeTokenStaking.sol\":1624:2004  function unstake(uint256 _tokenId) public {... */\n    tag_5:\n      tag_18\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_19\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_19:\n      tag_20\n      jump\t// in\n    tag_18:\n      stop\n        /* \"contracts/StakeTokenStaking.sol\":474:536  mapping (address => mapping(uint256 => uint256)) public stakes */\n    tag_6:\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      tag_24\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/StakeTokenStaking.sol\":1269:1616  function calculateReward(uint256 _tokenId) public view returns(uint256) {... */\n    tag_7:\n      tag_27\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_28\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_28:\n      tag_29\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":639:792  function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {... */\n    tag_11:\n        /* \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":730:736  bytes4 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":755:785  this.onERC721Received.selector */\n      shl(0xe0, 0x150b7a02)\n        /* \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":748:785  return this.onERC721Received.selector */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":639:792  function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/StakeTokenStaking.sol\":979:1261  function staking(uint256 _tokenId) public {... */\n    tag_17:\n        /* \"contracts/StakeTokenStaking.sol\":1065:1075  msg.sender */\n      caller\n        /* \"contracts/StakeTokenStaking.sol\":1040:1075  nft.ownerOf(_tokenId) == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/StakeTokenStaking.sol\":1040:1043  nft */\n      immutable(\"0xb2b512b441304a14c78813be0575a2b1be8296b169485190a954ec0635e46369\")\n        /* \"contracts/StakeTokenStaking.sol\":1040:1051  nft.ownerOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x6352211e\n        /* \"contracts/StakeTokenStaking.sol\":1052:1060  _tokenId */\n      dup4\n        /* \"contracts/StakeTokenStaking.sol\":1040:1061  nft.ownerOf(_tokenId) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_33\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_33:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_35\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_35:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n        /* \"contracts/StakeTokenStaking.sol\":1040:1075  nft.ownerOf(_tokenId) == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/StakeTokenStaking.sol\":1032:1103  require(nft.ownerOf(_tokenId) == msg.sender, \"You're not own this NFT\") */\n      tag_38\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_39\n      swap1\n      tag_40\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_38:\n        /* \"contracts/StakeTokenStaking.sol\":1166:1181  block.timestamp */\n      timestamp\n        /* \"contracts/StakeTokenStaking.sol\":1135:1141  stakes */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1135:1153  stakes[msg.sender] */\n      dup1\n        /* \"contracts/StakeTokenStaking.sol\":1142:1152  msg.sender */\n      caller\n        /* \"contracts/StakeTokenStaking.sol\":1135:1153  stakes[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakeTokenStaking.sol\":1135:1163  stakes[msg.sender][_tokenId] */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1154:1162  _tokenId */\n      dup4\n        /* \"contracts/StakeTokenStaking.sol\":1135:1163  stakes[msg.sender][_tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakeTokenStaking.sol\":1135:1181  stakes[msg.sender][_tokenId] = block.timestamp */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/StakeTokenStaking.sol\":1192:1195  nft */\n      immutable(\"0xb2b512b441304a14c78813be0575a2b1be8296b169485190a954ec0635e46369\")\n        /* \"contracts/StakeTokenStaking.sol\":1192:1212  nft.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xb88d4fde\n        /* \"contracts/StakeTokenStaking.sol\":1213:1223  msg.sender */\n      caller\n        /* \"contracts/StakeTokenStaking.sol\":1233:1237  this */\n      address\n        /* \"contracts/StakeTokenStaking.sol\":1240:1248  _tokenId */\n      dup5\n        /* \"contracts/StakeTokenStaking.sol\":1192:1253  nft.safeTransferFrom(msg.sender, address(this), _tokenId, \"\") */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_41\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_41:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_43\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_43:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_45\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_45:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/StakeTokenStaking.sol\":979:1261  function staking(uint256 _tokenId) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/StakeTokenStaking.sol\":1624:2004  function unstake(uint256 _tokenId) public {... */\n    tag_20:\n        /* \"contracts/StakeTokenStaking.sol\":1705:1725  uint256 rewardAmount */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1728:1753  calculateReward(_tokenId) */\n      tag_47\n        /* \"contracts/StakeTokenStaking.sol\":1744:1752  _tokenId */\n      dup3\n        /* \"contracts/StakeTokenStaking.sol\":1728:1743  calculateReward */\n      tag_29\n        /* \"contracts/StakeTokenStaking.sol\":1728:1753  calculateReward(_tokenId) */\n      jump\t// in\n    tag_47:\n        /* \"contracts/StakeTokenStaking.sol\":1705:1753  uint256 rewardAmount = calculateReward(_tokenId) */\n      swap1\n      pop\n        /* \"contracts/StakeTokenStaking.sol\":1771:1777  stakes */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1771:1789  stakes[msg.sender] */\n      dup1\n        /* \"contracts/StakeTokenStaking.sol\":1778:1788  msg.sender */\n      caller\n        /* \"contracts/StakeTokenStaking.sol\":1771:1789  stakes[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakeTokenStaking.sol\":1771:1799  stakes[msg.sender][_tokenId] */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1790:1798  _tokenId */\n      dup4\n        /* \"contracts/StakeTokenStaking.sol\":1771:1799  stakes[msg.sender][_tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakeTokenStaking.sol\":1764:1799  delete stakes[msg.sender][_tokenId] */\n      0x00\n      swap1\n      sstore\n        /* \"contracts/StakeTokenStaking.sol\":1810:1813  nft */\n      immutable(\"0xb2b512b441304a14c78813be0575a2b1be8296b169485190a954ec0635e46369\")\n        /* \"contracts/StakeTokenStaking.sol\":1810:1830  nft.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xb88d4fde\n        /* \"contracts/StakeTokenStaking.sol\":1839:1843  this */\n      address\n        /* \"contracts/StakeTokenStaking.sol\":1846:1856  msg.sender */\n      caller\n        /* \"contracts/StakeTokenStaking.sol\":1858:1866  _tokenId */\n      dup6\n        /* \"contracts/StakeTokenStaking.sol\":1810:1871  nft.safeTransferFrom(address(this), msg.sender, _tokenId, \"\") */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_48\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_48:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_49\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_51\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_51:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/StakeTokenStaking.sol\":1884:1889  token */\n      immutable(\"0x78a9014aa316c0d81e8cac1983f47ca946aa7db198b97933cfa2b1daf2bdc940\")\n        /* \"contracts/StakeTokenStaking.sol\":1884:1898  token.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"contracts/StakeTokenStaking.sol\":1899:1909  msg.sender */\n      caller\n        /* \"contracts/StakeTokenStaking.sol\":1911:1923  rewardAmount */\n      dup4\n        /* \"contracts/StakeTokenStaking.sol\":1884:1924  token.transfer(msg.sender, rewardAmount) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_52\n      swap3\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n    tag_52:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_55\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_55:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_56\n      swap2\n      swap1\n      tag_57\n      jump\t// in\n    tag_56:\n      pop\n        /* \"contracts/StakeTokenStaking.sol\":1666:2004  {... */\n      pop\n        /* \"contracts/StakeTokenStaking.sol\":1624:2004  function unstake(uint256 _tokenId) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/StakeTokenStaking.sol\":474:536  mapping (address => mapping(uint256 => uint256)) public stakes */\n    tag_24:\n      mstore(0x20, 0x00)\n      dup2\n      0x00\n      mstore\n      mstore(0x20, keccak256(0x00, 0x40))\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/StakeTokenStaking.sol\":1269:1616  function calculateReward(uint256 _tokenId) public view returns(uint256) {... */\n    tag_29:\n        /* \"contracts/StakeTokenStaking.sol\":1332:1339  uint256 */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1391:1392  0 */\n      dup1\n        /* \"contracts/StakeTokenStaking.sol\":1360:1366  stakes */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1360:1378  stakes[msg.sender] */\n      dup1\n        /* \"contracts/StakeTokenStaking.sol\":1367:1377  msg.sender */\n      caller\n        /* \"contracts/StakeTokenStaking.sol\":1360:1378  stakes[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakeTokenStaking.sol\":1360:1388  stakes[msg.sender][_tokenId] */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1379:1387  _tokenId */\n      dup5\n        /* \"contracts/StakeTokenStaking.sol\":1360:1388  stakes[msg.sender][_tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakeTokenStaking.sol\":1360:1392  stakes[msg.sender][_tokenId] > 0 */\n      gt\n        /* \"contracts/StakeTokenStaking.sol\":1352:1421  require(stakes[msg.sender][_tokenId] > 0, \"You never stake this NFT\") */\n      tag_59\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_60\n      swap1\n      tag_61\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_59:\n        /* \"contracts/StakeTokenStaking.sol\":1432:1444  uint256 time */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1465:1471  stakes */\n      dup1\n        /* \"contracts/StakeTokenStaking.sol\":1465:1483  stakes[msg.sender] */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1472:1482  msg.sender */\n      caller\n        /* \"contracts/StakeTokenStaking.sol\":1465:1483  stakes[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/StakeTokenStaking.sol\":1465:1493  stakes[msg.sender][_tokenId] */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1484:1492  _tokenId */\n      dup5\n        /* \"contracts/StakeTokenStaking.sol\":1465:1493  stakes[msg.sender][_tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/StakeTokenStaking.sol\":1447:1462  block.timestamp */\n      timestamp\n        /* \"contracts/StakeTokenStaking.sol\":1447:1493  block.timestamp - stakes[msg.sender][_tokenId] */\n      tag_62\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_62:\n        /* \"contracts/StakeTokenStaking.sol\":1432:1493  uint256 time = block.timestamp - stakes[msg.sender][_tokenId] */\n      swap1\n      pop\n        /* \"contracts/StakeTokenStaking.sol\":1504:1524  uint256 rewardAmount */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":1569:1578  1 minutes */\n      0x3c\n        /* \"contracts/StakeTokenStaking.sol\":1557:1565  10 ** 18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/StakeTokenStaking.sol\":1549:1553  time */\n      dup4\n        /* \"contracts/StakeTokenStaking.sol\":1527:1546  calculateRate(time) */\n      tag_64\n        /* \"contracts/StakeTokenStaking.sol\":1541:1545  time */\n      dup6\n        /* \"contracts/StakeTokenStaking.sol\":1527:1540  calculateRate */\n      tag_65\n        /* \"contracts/StakeTokenStaking.sol\":1527:1546  calculateRate(time) */\n      jump\t// in\n    tag_64:\n        /* \"contracts/StakeTokenStaking.sol\":1527:1553  calculateRate(time) * time */\n      tag_66\n      swap2\n      swap1\n      tag_67\n      jump\t// in\n    tag_66:\n        /* \"contracts/StakeTokenStaking.sol\":1527:1566  calculateRate(time) * time * (10 ** 18) */\n      tag_68\n      swap2\n      swap1\n      tag_67\n      jump\t// in\n    tag_68:\n        /* \"contracts/StakeTokenStaking.sol\":1527:1578  calculateRate(time) * time * (10 ** 18) / 1 minutes */\n      tag_69\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_69:\n        /* \"contracts/StakeTokenStaking.sol\":1504:1578  uint256 rewardAmount = calculateRate(time) * time * (10 ** 18) / 1 minutes */\n      swap1\n      pop\n        /* \"contracts/StakeTokenStaking.sol\":1596:1608  rewardAmount */\n      dup1\n        /* \"contracts/StakeTokenStaking.sol\":1589:1608  return rewardAmount */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/StakeTokenStaking.sol\":1269:1616  function calculateReward(uint256 _tokenId) public view returns(uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/StakeTokenStaking.sol\":665:971  function calculateRate(uint256 time) private pure returns(uint256) {... */\n    tag_65:\n        /* \"contracts/StakeTokenStaking.sol\":723:730  uint256 */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":753:762  1 minutes */\n      0x3c\n        /* \"contracts/StakeTokenStaking.sol\":746:750  time */\n      dup3\n        /* \"contracts/StakeTokenStaking.sol\":746:762  time < 1 minutes */\n      lt\n        /* \"contracts/StakeTokenStaking.sol\":743:964  if(time < 1 minutes) {... */\n      iszero\n      tag_72\n      jumpi\n        /* \"contracts/StakeTokenStaking.sol\":786:787  0 */\n      0x00\n        /* \"contracts/StakeTokenStaking.sol\":779:787  return 0 */\n      swap1\n      pop\n      jump(tag_71)\n        /* \"contracts/StakeTokenStaking.sol\":743:964  if(time < 1 minutes) {... */\n    tag_72:\n        /* \"contracts/StakeTokenStaking.sol\":815:824  3 minutes */\n      0xb4\n        /* \"contracts/StakeTokenStaking.sol\":808:812  time */\n      dup3\n        /* \"contracts/StakeTokenStaking.sol\":808:824  time < 3 minutes */\n      lt\n        /* \"contracts/StakeTokenStaking.sol\":805:964  if(time < 3 minutes) {... */\n      iszero\n      tag_74\n      jumpi\n        /* \"contracts/StakeTokenStaking.sol\":848:849  3 */\n      0x03\n        /* \"contracts/StakeTokenStaking.sol\":841:849  return 3 */\n      swap1\n      pop\n      jump(tag_71)\n        /* \"contracts/StakeTokenStaking.sol\":805:964  if(time < 3 minutes) {... */\n    tag_74:\n        /* \"contracts/StakeTokenStaking.sol\":877:886  5 minutes */\n      0x012c\n        /* \"contracts/StakeTokenStaking.sol\":870:874  time */\n      dup3\n        /* \"contracts/StakeTokenStaking.sol\":870:886  time < 5 minutes */\n      lt\n        /* \"contracts/StakeTokenStaking.sol\":867:964  if(time < 5 minutes) {... */\n      iszero\n      tag_76\n      jumpi\n        /* \"contracts/StakeTokenStaking.sol\":910:911  5 */\n      0x05\n        /* \"contracts/StakeTokenStaking.sol\":903:911  return 5 */\n      swap1\n      pop\n      jump(tag_71)\n        /* \"contracts/StakeTokenStaking.sol\":867:964  if(time < 5 minutes) {... */\n    tag_76:\n        /* \"contracts/StakeTokenStaking.sol\":950:952  10 */\n      0x0a\n        /* \"contracts/StakeTokenStaking.sol\":943:952  return 10 */\n      swap1\n      pop\n        /* \"contracts/StakeTokenStaking.sol\":665:971  function calculateRate(uint256 time) private pure returns(uint256) {... */\n    tag_71:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:82   */\n    tag_78:\n        /* \"#utility.yul\":40:46   */\n      0x00\n        /* \"#utility.yul\":73:75   */\n      0x40\n        /* \"#utility.yul\":67:76   */\n      mload\n        /* \"#utility.yul\":57:76   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:82   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_79:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":211:328   */\n    tag_80:\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_81:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_82:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_122\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_81\n      jump\t// in\n    tag_122:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_83:\n        /* \"#utility.yul\":641:665   */\n      tag_124\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_82\n      jump\t// in\n    tag_124:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_125\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_125:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_84:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_127\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_83\n      jump\t// in\n    tag_127:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:918   */\n    tag_85:\n        /* \"#utility.yul\":878:885   */\n      0x00\n        /* \"#utility.yul\":907:912   */\n      dup2\n        /* \"#utility.yul\":896:912   */\n      swap1\n      pop\n        /* \"#utility.yul\":841:918   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":924:1046   */\n    tag_86:\n        /* \"#utility.yul\":997:1021   */\n      tag_130\n        /* \"#utility.yul\":1015:1020   */\n      dup2\n        /* \"#utility.yul\":997:1021   */\n      tag_85\n      jump\t// in\n    tag_130:\n        /* \"#utility.yul\":990:995   */\n      dup2\n        /* \"#utility.yul\":987:1022   */\n      eq\n        /* \"#utility.yul\":977:1040   */\n      tag_131\n      jumpi\n        /* \"#utility.yul\":1036:1037   */\n      0x00\n        /* \"#utility.yul\":1033:1034   */\n      dup1\n        /* \"#utility.yul\":1026:1038   */\n      revert\n        /* \"#utility.yul\":977:1040   */\n    tag_131:\n        /* \"#utility.yul\":924:1046   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1052:1191   */\n    tag_87:\n        /* \"#utility.yul\":1098:1103   */\n      0x00\n        /* \"#utility.yul\":1136:1142   */\n      dup2\n        /* \"#utility.yul\":1123:1143   */\n      calldataload\n        /* \"#utility.yul\":1114:1143   */\n      swap1\n      pop\n        /* \"#utility.yul\":1152:1185   */\n      tag_133\n        /* \"#utility.yul\":1179:1184   */\n      dup2\n        /* \"#utility.yul\":1152:1185   */\n      tag_86\n      jump\t// in\n    tag_133:\n        /* \"#utility.yul\":1052:1191   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1197:1314   */\n    tag_88:\n        /* \"#utility.yul\":1306:1307   */\n      0x00\n        /* \"#utility.yul\":1303:1304   */\n      dup1\n        /* \"#utility.yul\":1296:1308   */\n      revert\n        /* \"#utility.yul\":1320:1437   */\n    tag_89:\n        /* \"#utility.yul\":1429:1430   */\n      0x00\n        /* \"#utility.yul\":1426:1427   */\n      dup1\n        /* \"#utility.yul\":1419:1431   */\n      revert\n        /* \"#utility.yul\":1443:1545   */\n    tag_90:\n        /* \"#utility.yul\":1484:1490   */\n      0x00\n        /* \"#utility.yul\":1535:1537   */\n      0x1f\n        /* \"#utility.yul\":1531:1538   */\n      not\n        /* \"#utility.yul\":1526:1528   */\n      0x1f\n        /* \"#utility.yul\":1519:1524   */\n      dup4\n        /* \"#utility.yul\":1515:1529   */\n      add\n        /* \"#utility.yul\":1511:1539   */\n      and\n        /* \"#utility.yul\":1501:1539   */\n      swap1\n      pop\n        /* \"#utility.yul\":1443:1545   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1551:1731   */\n    tag_91:\n        /* \"#utility.yul\":1599:1676   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":1596:1597   */\n      0x00\n        /* \"#utility.yul\":1589:1677   */\n      mstore\n        /* \"#utility.yul\":1696:1700   */\n      0x41\n        /* \"#utility.yul\":1693:1694   */\n      0x04\n        /* \"#utility.yul\":1686:1701   */\n      mstore\n        /* \"#utility.yul\":1720:1724   */\n      0x24\n        /* \"#utility.yul\":1717:1718   */\n      0x00\n        /* \"#utility.yul\":1710:1725   */\n      revert\n        /* \"#utility.yul\":1737:2018   */\n    tag_92:\n        /* \"#utility.yul\":1820:1847   */\n      tag_139\n        /* \"#utility.yul\":1842:1846   */\n      dup3\n        /* \"#utility.yul\":1820:1847   */\n      tag_90\n      jump\t// in\n    tag_139:\n        /* \"#utility.yul\":1812:1818   */\n      dup2\n        /* \"#utility.yul\":1808:1848   */\n      add\n        /* \"#utility.yul\":1950:1956   */\n      dup2\n        /* \"#utility.yul\":1938:1948   */\n      dup2\n        /* \"#utility.yul\":1935:1957   */\n      lt\n        /* \"#utility.yul\":1914:1932   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1902:1912   */\n      dup3\n        /* \"#utility.yul\":1899:1933   */\n      gt\n        /* \"#utility.yul\":1896:1958   */\n      or\n        /* \"#utility.yul\":1893:1981   */\n      iszero\n      tag_140\n      jumpi\n        /* \"#utility.yul\":1961:1979   */\n      tag_141\n      tag_91\n      jump\t// in\n    tag_141:\n        /* \"#utility.yul\":1893:1981   */\n    tag_140:\n        /* \"#utility.yul\":2001:2011   */\n      dup1\n        /* \"#utility.yul\":1997:1999   */\n      0x40\n        /* \"#utility.yul\":1990:2012   */\n      mstore\n        /* \"#utility.yul\":1780:2018   */\n      pop\n        /* \"#utility.yul\":1737:2018   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2024:2153   */\n    tag_93:\n        /* \"#utility.yul\":2058:2064   */\n      0x00\n        /* \"#utility.yul\":2085:2105   */\n      tag_143\n      tag_78\n      jump\t// in\n    tag_143:\n        /* \"#utility.yul\":2075:2105   */\n      swap1\n      pop\n        /* \"#utility.yul\":2114:2147   */\n      tag_144\n        /* \"#utility.yul\":2142:2146   */\n      dup3\n        /* \"#utility.yul\":2134:2140   */\n      dup3\n        /* \"#utility.yul\":2114:2147   */\n      tag_92\n      jump\t// in\n    tag_144:\n        /* \"#utility.yul\":2024:2153   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2159:2466   */\n    tag_94:\n        /* \"#utility.yul\":2220:2224   */\n      0x00\n        /* \"#utility.yul\":2310:2328   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2302:2308   */\n      dup3\n        /* \"#utility.yul\":2299:2329   */\n      gt\n        /* \"#utility.yul\":2296:2352   */\n      iszero\n      tag_146\n      jumpi\n        /* \"#utility.yul\":2332:2350   */\n      tag_147\n      tag_91\n      jump\t// in\n    tag_147:\n        /* \"#utility.yul\":2296:2352   */\n    tag_146:\n        /* \"#utility.yul\":2370:2399   */\n      tag_148\n        /* \"#utility.yul\":2392:2398   */\n      dup3\n        /* \"#utility.yul\":2370:2399   */\n      tag_90\n      jump\t// in\n    tag_148:\n        /* \"#utility.yul\":2362:2399   */\n      swap1\n      pop\n        /* \"#utility.yul\":2454:2458   */\n      0x20\n        /* \"#utility.yul\":2448:2452   */\n      dup2\n        /* \"#utility.yul\":2444:2459   */\n      add\n        /* \"#utility.yul\":2436:2459   */\n      swap1\n      pop\n        /* \"#utility.yul\":2159:2466   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2472:2618   */\n    tag_95:\n        /* \"#utility.yul\":2569:2575   */\n      dup3\n        /* \"#utility.yul\":2564:2567   */\n      dup2\n        /* \"#utility.yul\":2559:2562   */\n      dup4\n        /* \"#utility.yul\":2546:2576   */\n      calldatacopy\n        /* \"#utility.yul\":2610:2611   */\n      0x00\n        /* \"#utility.yul\":2601:2607   */\n      dup4\n        /* \"#utility.yul\":2596:2599   */\n      dup4\n        /* \"#utility.yul\":2592:2608   */\n      add\n        /* \"#utility.yul\":2585:2612   */\n      mstore\n        /* \"#utility.yul\":2472:2618   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2624:3047   */\n    tag_96:\n        /* \"#utility.yul\":2701:2706   */\n      0x00\n        /* \"#utility.yul\":2726:2791   */\n      tag_151\n        /* \"#utility.yul\":2742:2790   */\n      tag_152\n        /* \"#utility.yul\":2783:2789   */\n      dup5\n        /* \"#utility.yul\":2742:2790   */\n      tag_94\n      jump\t// in\n    tag_152:\n        /* \"#utility.yul\":2726:2791   */\n      tag_93\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":2717:2791   */\n      swap1\n      pop\n        /* \"#utility.yul\":2814:2820   */\n      dup3\n        /* \"#utility.yul\":2807:2812   */\n      dup2\n        /* \"#utility.yul\":2800:2821   */\n      mstore\n        /* \"#utility.yul\":2852:2856   */\n      0x20\n        /* \"#utility.yul\":2845:2850   */\n      dup2\n        /* \"#utility.yul\":2841:2857   */\n      add\n        /* \"#utility.yul\":2890:2893   */\n      dup5\n        /* \"#utility.yul\":2881:2887   */\n      dup5\n        /* \"#utility.yul\":2876:2879   */\n      dup5\n        /* \"#utility.yul\":2872:2888   */\n      add\n        /* \"#utility.yul\":2869:2894   */\n      gt\n        /* \"#utility.yul\":2866:2978   */\n      iszero\n      tag_153\n      jumpi\n        /* \"#utility.yul\":2897:2976   */\n      tag_154\n      tag_89\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":2866:2978   */\n    tag_153:\n        /* \"#utility.yul\":2987:3041   */\n      tag_155\n        /* \"#utility.yul\":3034:3040   */\n      dup5\n        /* \"#utility.yul\":3029:3032   */\n      dup3\n        /* \"#utility.yul\":3024:3027   */\n      dup6\n        /* \"#utility.yul\":2987:3041   */\n      tag_95\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":2707:3047   */\n      pop\n        /* \"#utility.yul\":2624:3047   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3066:3404   */\n    tag_97:\n        /* \"#utility.yul\":3121:3126   */\n      0x00\n        /* \"#utility.yul\":3170:3173   */\n      dup3\n        /* \"#utility.yul\":3163:3167   */\n      0x1f\n        /* \"#utility.yul\":3155:3161   */\n      dup4\n        /* \"#utility.yul\":3151:3168   */\n      add\n        /* \"#utility.yul\":3147:3174   */\n      slt\n        /* \"#utility.yul\":3137:3259   */\n      tag_157\n      jumpi\n        /* \"#utility.yul\":3178:3257   */\n      tag_158\n      tag_88\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":3137:3259   */\n    tag_157:\n        /* \"#utility.yul\":3295:3301   */\n      dup2\n        /* \"#utility.yul\":3282:3302   */\n      calldataload\n        /* \"#utility.yul\":3320:3398   */\n      tag_159\n        /* \"#utility.yul\":3394:3397   */\n      dup5\n        /* \"#utility.yul\":3386:3392   */\n      dup3\n        /* \"#utility.yul\":3379:3383   */\n      0x20\n        /* \"#utility.yul\":3371:3377   */\n      dup7\n        /* \"#utility.yul\":3367:3384   */\n      add\n        /* \"#utility.yul\":3320:3398   */\n      tag_96\n      jump\t// in\n    tag_159:\n        /* \"#utility.yul\":3311:3398   */\n      swap2\n      pop\n        /* \"#utility.yul\":3127:3404   */\n      pop\n        /* \"#utility.yul\":3066:3404   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3410:4353   */\n    tag_10:\n        /* \"#utility.yul\":3505:3511   */\n      0x00\n        /* \"#utility.yul\":3513:3519   */\n      dup1\n        /* \"#utility.yul\":3521:3527   */\n      0x00\n        /* \"#utility.yul\":3529:3535   */\n      dup1\n        /* \"#utility.yul\":3578:3581   */\n      0x80\n        /* \"#utility.yul\":3566:3575   */\n      dup6\n        /* \"#utility.yul\":3557:3564   */\n      dup8\n        /* \"#utility.yul\":3553:3576   */\n      sub\n        /* \"#utility.yul\":3549:3582   */\n      slt\n        /* \"#utility.yul\":3546:3666   */\n      iszero\n      tag_161\n      jumpi\n        /* \"#utility.yul\":3585:3664   */\n      tag_162\n      tag_79\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":3546:3666   */\n    tag_161:\n        /* \"#utility.yul\":3705:3706   */\n      0x00\n        /* \"#utility.yul\":3730:3783   */\n      tag_163\n        /* \"#utility.yul\":3775:3782   */\n      dup8\n        /* \"#utility.yul\":3766:3772   */\n      dup3\n        /* \"#utility.yul\":3755:3764   */\n      dup9\n        /* \"#utility.yul\":3751:3773   */\n      add\n        /* \"#utility.yul\":3730:3783   */\n      tag_84\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":3720:3783   */\n      swap5\n      pop\n        /* \"#utility.yul\":3676:3793   */\n      pop\n        /* \"#utility.yul\":3832:3834   */\n      0x20\n        /* \"#utility.yul\":3858:3911   */\n      tag_164\n        /* \"#utility.yul\":3903:3910   */\n      dup8\n        /* \"#utility.yul\":3894:3900   */\n      dup3\n        /* \"#utility.yul\":3883:3892   */\n      dup9\n        /* \"#utility.yul\":3879:3901   */\n      add\n        /* \"#utility.yul\":3858:3911   */\n      tag_84\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":3848:3911   */\n      swap4\n      pop\n        /* \"#utility.yul\":3803:3921   */\n      pop\n        /* \"#utility.yul\":3960:3962   */\n      0x40\n        /* \"#utility.yul\":3986:4039   */\n      tag_165\n        /* \"#utility.yul\":4031:4038   */\n      dup8\n        /* \"#utility.yul\":4022:4028   */\n      dup3\n        /* \"#utility.yul\":4011:4020   */\n      dup9\n        /* \"#utility.yul\":4007:4029   */\n      add\n        /* \"#utility.yul\":3986:4039   */\n      tag_87\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":3976:4039   */\n      swap3\n      pop\n        /* \"#utility.yul\":3931:4049   */\n      pop\n        /* \"#utility.yul\":4116:4118   */\n      0x60\n        /* \"#utility.yul\":4105:4114   */\n      dup6\n        /* \"#utility.yul\":4101:4119   */\n      add\n        /* \"#utility.yul\":4088:4120   */\n      calldataload\n        /* \"#utility.yul\":4147:4165   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4139:4145   */\n      dup2\n        /* \"#utility.yul\":4136:4166   */\n      gt\n        /* \"#utility.yul\":4133:4250   */\n      iszero\n      tag_166\n      jumpi\n        /* \"#utility.yul\":4169:4248   */\n      tag_167\n      tag_80\n      jump\t// in\n    tag_167:\n        /* \"#utility.yul\":4133:4250   */\n    tag_166:\n        /* \"#utility.yul\":4274:4336   */\n      tag_168\n        /* \"#utility.yul\":4328:4335   */\n      dup8\n        /* \"#utility.yul\":4319:4325   */\n      dup3\n        /* \"#utility.yul\":4308:4317   */\n      dup9\n        /* \"#utility.yul\":4304:4326   */\n      add\n        /* \"#utility.yul\":4274:4336   */\n      tag_97\n      jump\t// in\n    tag_168:\n        /* \"#utility.yul\":4264:4336   */\n      swap2\n      pop\n        /* \"#utility.yul\":4059:4346   */\n      pop\n        /* \"#utility.yul\":3410:4353   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4359:4508   */\n    tag_98:\n        /* \"#utility.yul\":4395:4402   */\n      0x00\n        /* \"#utility.yul\":4435:4501   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4428:4433   */\n      dup3\n        /* \"#utility.yul\":4424:4502   */\n      and\n        /* \"#utility.yul\":4413:4502   */\n      swap1\n      pop\n        /* \"#utility.yul\":4359:4508   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4514:4629   */\n    tag_99:\n        /* \"#utility.yul\":4599:4622   */\n      tag_171\n        /* \"#utility.yul\":4616:4621   */\n      dup2\n        /* \"#utility.yul\":4599:4622   */\n      tag_98\n      jump\t// in\n    tag_171:\n        /* \"#utility.yul\":4594:4597   */\n      dup3\n        /* \"#utility.yul\":4587:4623   */\n      mstore\n        /* \"#utility.yul\":4514:4629   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4635:4853   */\n    tag_13:\n        /* \"#utility.yul\":4726:4730   */\n      0x00\n        /* \"#utility.yul\":4764:4766   */\n      0x20\n        /* \"#utility.yul\":4753:4762   */\n      dup3\n        /* \"#utility.yul\":4749:4767   */\n      add\n        /* \"#utility.yul\":4741:4767   */\n      swap1\n      pop\n        /* \"#utility.yul\":4777:4846   */\n      tag_173\n        /* \"#utility.yul\":4843:4844   */\n      0x00\n        /* \"#utility.yul\":4832:4841   */\n      dup4\n        /* \"#utility.yul\":4828:4845   */\n      add\n        /* \"#utility.yul\":4819:4825   */\n      dup5\n        /* \"#utility.yul\":4777:4846   */\n      tag_99\n      jump\t// in\n    tag_173:\n        /* \"#utility.yul\":4635:4853   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4859:5188   */\n    tag_16:\n        /* \"#utility.yul\":4918:4924   */\n      0x00\n        /* \"#utility.yul\":4967:4969   */\n      0x20\n        /* \"#utility.yul\":4955:4964   */\n      dup3\n        /* \"#utility.yul\":4946:4953   */\n      dup5\n        /* \"#utility.yul\":4942:4965   */\n      sub\n        /* \"#utility.yul\":4938:4970   */\n      slt\n        /* \"#utility.yul\":4935:5054   */\n      iszero\n      tag_175\n      jumpi\n        /* \"#utility.yul\":4973:5052   */\n      tag_176\n      tag_79\n      jump\t// in\n    tag_176:\n        /* \"#utility.yul\":4935:5054   */\n    tag_175:\n        /* \"#utility.yul\":5093:5094   */\n      0x00\n        /* \"#utility.yul\":5118:5171   */\n      tag_177\n        /* \"#utility.yul\":5163:5170   */\n      dup5\n        /* \"#utility.yul\":5154:5160   */\n      dup3\n        /* \"#utility.yul\":5143:5152   */\n      dup6\n        /* \"#utility.yul\":5139:5161   */\n      add\n        /* \"#utility.yul\":5118:5171   */\n      tag_87\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":5108:5171   */\n      swap2\n      pop\n        /* \"#utility.yul\":5064:5181   */\n      pop\n        /* \"#utility.yul\":4859:5188   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5194:5668   */\n    tag_23:\n        /* \"#utility.yul\":5262:5268   */\n      0x00\n        /* \"#utility.yul\":5270:5276   */\n      dup1\n        /* \"#utility.yul\":5319:5321   */\n      0x40\n        /* \"#utility.yul\":5307:5316   */\n      dup4\n        /* \"#utility.yul\":5298:5305   */\n      dup6\n        /* \"#utility.yul\":5294:5317   */\n      sub\n        /* \"#utility.yul\":5290:5322   */\n      slt\n        /* \"#utility.yul\":5287:5406   */\n      iszero\n      tag_179\n      jumpi\n        /* \"#utility.yul\":5325:5404   */\n      tag_180\n      tag_79\n      jump\t// in\n    tag_180:\n        /* \"#utility.yul\":5287:5406   */\n    tag_179:\n        /* \"#utility.yul\":5445:5446   */\n      0x00\n        /* \"#utility.yul\":5470:5523   */\n      tag_181\n        /* \"#utility.yul\":5515:5522   */\n      dup6\n        /* \"#utility.yul\":5506:5512   */\n      dup3\n        /* \"#utility.yul\":5495:5504   */\n      dup7\n        /* \"#utility.yul\":5491:5513   */\n      add\n        /* \"#utility.yul\":5470:5523   */\n      tag_84\n      jump\t// in\n    tag_181:\n        /* \"#utility.yul\":5460:5523   */\n      swap3\n      pop\n        /* \"#utility.yul\":5416:5533   */\n      pop\n        /* \"#utility.yul\":5572:5574   */\n      0x20\n        /* \"#utility.yul\":5598:5651   */\n      tag_182\n        /* \"#utility.yul\":5643:5650   */\n      dup6\n        /* \"#utility.yul\":5634:5640   */\n      dup3\n        /* \"#utility.yul\":5623:5632   */\n      dup7\n        /* \"#utility.yul\":5619:5641   */\n      add\n        /* \"#utility.yul\":5598:5651   */\n      tag_87\n      jump\t// in\n    tag_182:\n        /* \"#utility.yul\":5588:5651   */\n      swap2\n      pop\n        /* \"#utility.yul\":5543:5661   */\n      pop\n        /* \"#utility.yul\":5194:5668   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5674:5792   */\n    tag_100:\n        /* \"#utility.yul\":5761:5785   */\n      tag_184\n        /* \"#utility.yul\":5779:5784   */\n      dup2\n        /* \"#utility.yul\":5761:5785   */\n      tag_85\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":5756:5759   */\n      dup3\n        /* \"#utility.yul\":5749:5786   */\n      mstore\n        /* \"#utility.yul\":5674:5792   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5798:6020   */\n    tag_26:\n        /* \"#utility.yul\":5891:5895   */\n      0x00\n        /* \"#utility.yul\":5929:5931   */\n      0x20\n        /* \"#utility.yul\":5918:5927   */\n      dup3\n        /* \"#utility.yul\":5914:5932   */\n      add\n        /* \"#utility.yul\":5906:5932   */\n      swap1\n      pop\n        /* \"#utility.yul\":5942:6013   */\n      tag_186\n        /* \"#utility.yul\":6010:6011   */\n      0x00\n        /* \"#utility.yul\":5999:6008   */\n      dup4\n        /* \"#utility.yul\":5995:6012   */\n      add\n        /* \"#utility.yul\":5986:5992   */\n      dup5\n        /* \"#utility.yul\":5942:6013   */\n      tag_100\n      jump\t// in\n    tag_186:\n        /* \"#utility.yul\":5798:6020   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6026:6169   */\n    tag_101:\n        /* \"#utility.yul\":6083:6088   */\n      0x00\n        /* \"#utility.yul\":6114:6120   */\n      dup2\n        /* \"#utility.yul\":6108:6121   */\n      mload\n        /* \"#utility.yul\":6099:6121   */\n      swap1\n      pop\n        /* \"#utility.yul\":6130:6163   */\n      tag_188\n        /* \"#utility.yul\":6157:6162   */\n      dup2\n        /* \"#utility.yul\":6130:6163   */\n      tag_83\n      jump\t// in\n    tag_188:\n        /* \"#utility.yul\":6026:6169   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6175:6526   */\n    tag_37:\n        /* \"#utility.yul\":6245:6251   */\n      0x00\n        /* \"#utility.yul\":6294:6296   */\n      0x20\n        /* \"#utility.yul\":6282:6291   */\n      dup3\n        /* \"#utility.yul\":6273:6280   */\n      dup5\n        /* \"#utility.yul\":6269:6292   */\n      sub\n        /* \"#utility.yul\":6265:6297   */\n      slt\n        /* \"#utility.yul\":6262:6381   */\n      iszero\n      tag_190\n      jumpi\n        /* \"#utility.yul\":6300:6379   */\n      tag_191\n      tag_79\n      jump\t// in\n    tag_191:\n        /* \"#utility.yul\":6262:6381   */\n    tag_190:\n        /* \"#utility.yul\":6420:6421   */\n      0x00\n        /* \"#utility.yul\":6445:6509   */\n      tag_192\n        /* \"#utility.yul\":6501:6508   */\n      dup5\n        /* \"#utility.yul\":6492:6498   */\n      dup3\n        /* \"#utility.yul\":6481:6490   */\n      dup6\n        /* \"#utility.yul\":6477:6499   */\n      add\n        /* \"#utility.yul\":6445:6509   */\n      tag_101\n      jump\t// in\n    tag_192:\n        /* \"#utility.yul\":6435:6509   */\n      swap2\n      pop\n        /* \"#utility.yul\":6391:6519   */\n      pop\n        /* \"#utility.yul\":6175:6526   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6532:6701   */\n    tag_102:\n        /* \"#utility.yul\":6616:6627   */\n      0x00\n        /* \"#utility.yul\":6650:6656   */\n      dup3\n        /* \"#utility.yul\":6645:6648   */\n      dup3\n        /* \"#utility.yul\":6638:6657   */\n      mstore\n        /* \"#utility.yul\":6690:6694   */\n      0x20\n        /* \"#utility.yul\":6685:6688   */\n      dup3\n        /* \"#utility.yul\":6681:6695   */\n      add\n        /* \"#utility.yul\":6666:6695   */\n      swap1\n      pop\n        /* \"#utility.yul\":6532:6701   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6707:6880   */\n    tag_103:\n        /* \"#utility.yul\":6847:6872   */\n      0x596f75277265206e6f74206f776e2074686973204e4654000000000000000000\n        /* \"#utility.yul\":6843:6844   */\n      0x00\n        /* \"#utility.yul\":6835:6841   */\n      dup3\n        /* \"#utility.yul\":6831:6845   */\n      add\n        /* \"#utility.yul\":6824:6873   */\n      mstore\n        /* \"#utility.yul\":6707:6880   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6886:7252   */\n    tag_104:\n        /* \"#utility.yul\":7028:7031   */\n      0x00\n        /* \"#utility.yul\":7049:7116   */\n      tag_196\n        /* \"#utility.yul\":7113:7115   */\n      0x17\n        /* \"#utility.yul\":7108:7111   */\n      dup4\n        /* \"#utility.yul\":7049:7116   */\n      tag_102\n      jump\t// in\n    tag_196:\n        /* \"#utility.yul\":7042:7116   */\n      swap2\n      pop\n        /* \"#utility.yul\":7125:7218   */\n      tag_197\n        /* \"#utility.yul\":7214:7217   */\n      dup3\n        /* \"#utility.yul\":7125:7218   */\n      tag_103\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":7243:7245   */\n      0x20\n        /* \"#utility.yul\":7238:7241   */\n      dup3\n        /* \"#utility.yul\":7234:7246   */\n      add\n        /* \"#utility.yul\":7227:7246   */\n      swap1\n      pop\n        /* \"#utility.yul\":6886:7252   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7258:7677   */\n    tag_40:\n        /* \"#utility.yul\":7424:7428   */\n      0x00\n        /* \"#utility.yul\":7462:7464   */\n      0x20\n        /* \"#utility.yul\":7451:7460   */\n      dup3\n        /* \"#utility.yul\":7447:7465   */\n      add\n        /* \"#utility.yul\":7439:7465   */\n      swap1\n      pop\n        /* \"#utility.yul\":7511:7520   */\n      dup2\n        /* \"#utility.yul\":7505:7509   */\n      dup2\n        /* \"#utility.yul\":7501:7521   */\n      sub\n        /* \"#utility.yul\":7497:7498   */\n      0x00\n        /* \"#utility.yul\":7486:7495   */\n      dup4\n        /* \"#utility.yul\":7482:7499   */\n      add\n        /* \"#utility.yul\":7475:7522   */\n      mstore\n        /* \"#utility.yul\":7539:7670   */\n      tag_199\n        /* \"#utility.yul\":7665:7669   */\n      dup2\n        /* \"#utility.yul\":7539:7670   */\n      tag_104\n      jump\t// in\n    tag_199:\n        /* \"#utility.yul\":7531:7670   */\n      swap1\n      pop\n        /* \"#utility.yul\":7258:7677   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7683:7801   */\n    tag_105:\n        /* \"#utility.yul\":7770:7794   */\n      tag_201\n        /* \"#utility.yul\":7788:7793   */\n      dup2\n        /* \"#utility.yul\":7770:7794   */\n      tag_82\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":7765:7768   */\n      dup3\n        /* \"#utility.yul\":7758:7795   */\n      mstore\n        /* \"#utility.yul\":7683:7801   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7807:7975   */\n    tag_106:\n        /* \"#utility.yul\":7890:7901   */\n      0x00\n        /* \"#utility.yul\":7924:7930   */\n      dup3\n        /* \"#utility.yul\":7919:7922   */\n      dup3\n        /* \"#utility.yul\":7912:7931   */\n      mstore\n        /* \"#utility.yul\":7964:7968   */\n      0x20\n        /* \"#utility.yul\":7959:7962   */\n      dup3\n        /* \"#utility.yul\":7955:7969   */\n      add\n        /* \"#utility.yul\":7940:7969   */\n      swap1\n      pop\n        /* \"#utility.yul\":7807:7975   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7981:8095   */\n    tag_107:\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8101:8463   */\n    tag_108:\n        /* \"#utility.yul\":8242:8245   */\n      0x00\n        /* \"#utility.yul\":8263:8328   */\n      tag_205\n        /* \"#utility.yul\":8326:8327   */\n      0x00\n        /* \"#utility.yul\":8321:8324   */\n      dup4\n        /* \"#utility.yul\":8263:8328   */\n      tag_106\n      jump\t// in\n    tag_205:\n        /* \"#utility.yul\":8256:8328   */\n      swap2\n      pop\n        /* \"#utility.yul\":8337:8430   */\n      tag_206\n        /* \"#utility.yul\":8426:8429   */\n      dup3\n        /* \"#utility.yul\":8337:8430   */\n      tag_107\n      jump\t// in\n    tag_206:\n        /* \"#utility.yul\":8455:8456   */\n      0x00\n        /* \"#utility.yul\":8450:8453   */\n      dup3\n        /* \"#utility.yul\":8446:8457   */\n      add\n        /* \"#utility.yul\":8439:8457   */\n      swap1\n      pop\n        /* \"#utility.yul\":8101:8463   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8469:9217   */\n    tag_42:\n        /* \"#utility.yul\":8718:8722   */\n      0x00\n        /* \"#utility.yul\":8756:8759   */\n      0x80\n        /* \"#utility.yul\":8745:8754   */\n      dup3\n        /* \"#utility.yul\":8741:8760   */\n      add\n        /* \"#utility.yul\":8733:8760   */\n      swap1\n      pop\n        /* \"#utility.yul\":8770:8841   */\n      tag_208\n        /* \"#utility.yul\":8838:8839   */\n      0x00\n        /* \"#utility.yul\":8827:8836   */\n      dup4\n        /* \"#utility.yul\":8823:8840   */\n      add\n        /* \"#utility.yul\":8814:8820   */\n      dup7\n        /* \"#utility.yul\":8770:8841   */\n      tag_105\n      jump\t// in\n    tag_208:\n        /* \"#utility.yul\":8851:8923   */\n      tag_209\n        /* \"#utility.yul\":8919:8921   */\n      0x20\n        /* \"#utility.yul\":8908:8917   */\n      dup4\n        /* \"#utility.yul\":8904:8922   */\n      add\n        /* \"#utility.yul\":8895:8901   */\n      dup6\n        /* \"#utility.yul\":8851:8923   */\n      tag_105\n      jump\t// in\n    tag_209:\n        /* \"#utility.yul\":8933:9005   */\n      tag_210\n        /* \"#utility.yul\":9001:9003   */\n      0x40\n        /* \"#utility.yul\":8990:8999   */\n      dup4\n        /* \"#utility.yul\":8986:9004   */\n      add\n        /* \"#utility.yul\":8977:8983   */\n      dup5\n        /* \"#utility.yul\":8933:9005   */\n      tag_100\n      jump\t// in\n    tag_210:\n        /* \"#utility.yul\":9052:9061   */\n      dup2\n        /* \"#utility.yul\":9046:9050   */\n      dup2\n        /* \"#utility.yul\":9042:9062   */\n      sub\n        /* \"#utility.yul\":9037:9039   */\n      0x60\n        /* \"#utility.yul\":9026:9035   */\n      dup4\n        /* \"#utility.yul\":9022:9040   */\n      add\n        /* \"#utility.yul\":9015:9063   */\n      mstore\n        /* \"#utility.yul\":9080:9210   */\n      tag_211\n        /* \"#utility.yul\":9205:9209   */\n      dup2\n        /* \"#utility.yul\":9080:9210   */\n      tag_108\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":9072:9210   */\n      swap1\n      pop\n        /* \"#utility.yul\":8469:9217   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9223:9555   */\n    tag_53:\n        /* \"#utility.yul\":9344:9348   */\n      0x00\n        /* \"#utility.yul\":9382:9384   */\n      0x40\n        /* \"#utility.yul\":9371:9380   */\n      dup3\n        /* \"#utility.yul\":9367:9385   */\n      add\n        /* \"#utility.yul\":9359:9385   */\n      swap1\n      pop\n        /* \"#utility.yul\":9395:9466   */\n      tag_213\n        /* \"#utility.yul\":9463:9464   */\n      0x00\n        /* \"#utility.yul\":9452:9461   */\n      dup4\n        /* \"#utility.yul\":9448:9465   */\n      add\n        /* \"#utility.yul\":9439:9445   */\n      dup6\n        /* \"#utility.yul\":9395:9466   */\n      tag_105\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":9476:9548   */\n      tag_214\n        /* \"#utility.yul\":9544:9546   */\n      0x20\n        /* \"#utility.yul\":9533:9542   */\n      dup4\n        /* \"#utility.yul\":9529:9547   */\n      add\n        /* \"#utility.yul\":9520:9526   */\n      dup5\n        /* \"#utility.yul\":9476:9548   */\n      tag_100\n      jump\t// in\n    tag_214:\n        /* \"#utility.yul\":9223:9555   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9561:9651   */\n    tag_109:\n        /* \"#utility.yul\":9595:9602   */\n      0x00\n        /* \"#utility.yul\":9638:9643   */\n      dup2\n        /* \"#utility.yul\":9631:9644   */\n      iszero\n        /* \"#utility.yul\":9624:9645   */\n      iszero\n        /* \"#utility.yul\":9613:9645   */\n      swap1\n      pop\n        /* \"#utility.yul\":9561:9651   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9657:9773   */\n    tag_110:\n        /* \"#utility.yul\":9727:9748   */\n      tag_217\n        /* \"#utility.yul\":9742:9747   */\n      dup2\n        /* \"#utility.yul\":9727:9748   */\n      tag_109\n      jump\t// in\n    tag_217:\n        /* \"#utility.yul\":9720:9725   */\n      dup2\n        /* \"#utility.yul\":9717:9749   */\n      eq\n        /* \"#utility.yul\":9707:9767   */\n      tag_218\n      jumpi\n        /* \"#utility.yul\":9763:9764   */\n      0x00\n        /* \"#utility.yul\":9760:9761   */\n      dup1\n        /* \"#utility.yul\":9753:9765   */\n      revert\n        /* \"#utility.yul\":9707:9767   */\n    tag_218:\n        /* \"#utility.yul\":9657:9773   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9779:9916   */\n    tag_111:\n        /* \"#utility.yul\":9833:9838   */\n      0x00\n        /* \"#utility.yul\":9864:9870   */\n      dup2\n        /* \"#utility.yul\":9858:9871   */\n      mload\n        /* \"#utility.yul\":9849:9871   */\n      swap1\n      pop\n        /* \"#utility.yul\":9880:9910   */\n      tag_220\n        /* \"#utility.yul\":9904:9909   */\n      dup2\n        /* \"#utility.yul\":9880:9910   */\n      tag_110\n      jump\t// in\n    tag_220:\n        /* \"#utility.yul\":9779:9916   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9922:10267   */\n    tag_57:\n        /* \"#utility.yul\":9989:9995   */\n      0x00\n        /* \"#utility.yul\":10038:10040   */\n      0x20\n        /* \"#utility.yul\":10026:10035   */\n      dup3\n        /* \"#utility.yul\":10017:10024   */\n      dup5\n        /* \"#utility.yul\":10013:10036   */\n      sub\n        /* \"#utility.yul\":10009:10041   */\n      slt\n        /* \"#utility.yul\":10006:10125   */\n      iszero\n      tag_222\n      jumpi\n        /* \"#utility.yul\":10044:10123   */\n      tag_223\n      tag_79\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":10006:10125   */\n    tag_222:\n        /* \"#utility.yul\":10164:10165   */\n      0x00\n        /* \"#utility.yul\":10189:10250   */\n      tag_224\n        /* \"#utility.yul\":10242:10249   */\n      dup5\n        /* \"#utility.yul\":10233:10239   */\n      dup3\n        /* \"#utility.yul\":10222:10231   */\n      dup6\n        /* \"#utility.yul\":10218:10240   */\n      add\n        /* \"#utility.yul\":10189:10250   */\n      tag_111\n      jump\t// in\n    tag_224:\n        /* \"#utility.yul\":10179:10250   */\n      swap2\n      pop\n        /* \"#utility.yul\":10135:10260   */\n      pop\n        /* \"#utility.yul\":9922:10267   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10273:10447   */\n    tag_112:\n        /* \"#utility.yul\":10413:10439   */\n      0x596f75206e65766572207374616b652074686973204e46540000000000000000\n        /* \"#utility.yul\":10409:10410   */\n      0x00\n        /* \"#utility.yul\":10401:10407   */\n      dup3\n        /* \"#utility.yul\":10397:10411   */\n      add\n        /* \"#utility.yul\":10390:10440   */\n      mstore\n        /* \"#utility.yul\":10273:10447   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10453:10819   */\n    tag_113:\n        /* \"#utility.yul\":10595:10598   */\n      0x00\n        /* \"#utility.yul\":10616:10683   */\n      tag_227\n        /* \"#utility.yul\":10680:10682   */\n      0x18\n        /* \"#utility.yul\":10675:10678   */\n      dup4\n        /* \"#utility.yul\":10616:10683   */\n      tag_102\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":10609:10683   */\n      swap2\n      pop\n        /* \"#utility.yul\":10692:10785   */\n      tag_228\n        /* \"#utility.yul\":10781:10784   */\n      dup3\n        /* \"#utility.yul\":10692:10785   */\n      tag_112\n      jump\t// in\n    tag_228:\n        /* \"#utility.yul\":10810:10812   */\n      0x20\n        /* \"#utility.yul\":10805:10808   */\n      dup3\n        /* \"#utility.yul\":10801:10813   */\n      add\n        /* \"#utility.yul\":10794:10813   */\n      swap1\n      pop\n        /* \"#utility.yul\":10453:10819   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10825:11244   */\n    tag_61:\n        /* \"#utility.yul\":10991:10995   */\n      0x00\n        /* \"#utility.yul\":11029:11031   */\n      0x20\n        /* \"#utility.yul\":11018:11027   */\n      dup3\n        /* \"#utility.yul\":11014:11032   */\n      add\n        /* \"#utility.yul\":11006:11032   */\n      swap1\n      pop\n        /* \"#utility.yul\":11078:11087   */\n      dup2\n        /* \"#utility.yul\":11072:11076   */\n      dup2\n        /* \"#utility.yul\":11068:11088   */\n      sub\n        /* \"#utility.yul\":11064:11065   */\n      0x00\n        /* \"#utility.yul\":11053:11062   */\n      dup4\n        /* \"#utility.yul\":11049:11066   */\n      add\n        /* \"#utility.yul\":11042:11089   */\n      mstore\n        /* \"#utility.yul\":11106:11237   */\n      tag_230\n        /* \"#utility.yul\":11232:11236   */\n      dup2\n        /* \"#utility.yul\":11106:11237   */\n      tag_113\n      jump\t// in\n    tag_230:\n        /* \"#utility.yul\":11098:11237   */\n      swap1\n      pop\n        /* \"#utility.yul\":10825:11244   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11250:11430   */\n    tag_114:\n        /* \"#utility.yul\":11298:11375   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11295:11296   */\n      0x00\n        /* \"#utility.yul\":11288:11376   */\n      mstore\n        /* \"#utility.yul\":11395:11399   */\n      0x11\n        /* \"#utility.yul\":11392:11393   */\n      0x04\n        /* \"#utility.yul\":11385:11400   */\n      mstore\n        /* \"#utility.yul\":11419:11423   */\n      0x24\n        /* \"#utility.yul\":11416:11417   */\n      0x00\n        /* \"#utility.yul\":11409:11424   */\n      revert\n        /* \"#utility.yul\":11436:11630   */\n    tag_63:\n        /* \"#utility.yul\":11476:11480   */\n      0x00\n        /* \"#utility.yul\":11496:11516   */\n      tag_233\n        /* \"#utility.yul\":11514:11515   */\n      dup3\n        /* \"#utility.yul\":11496:11516   */\n      tag_85\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":11491:11516   */\n      swap2\n      pop\n        /* \"#utility.yul\":11530:11550   */\n      tag_234\n        /* \"#utility.yul\":11548:11549   */\n      dup4\n        /* \"#utility.yul\":11530:11550   */\n      tag_85\n      jump\t// in\n    tag_234:\n        /* \"#utility.yul\":11525:11550   */\n      swap3\n      pop\n        /* \"#utility.yul\":11574:11575   */\n      dup3\n        /* \"#utility.yul\":11571:11572   */\n      dup3\n        /* \"#utility.yul\":11567:11576   */\n      sub\n        /* \"#utility.yul\":11559:11576   */\n      swap1\n      pop\n        /* \"#utility.yul\":11598:11599   */\n      dup2\n        /* \"#utility.yul\":11592:11596   */\n      dup2\n        /* \"#utility.yul\":11589:11600   */\n      gt\n        /* \"#utility.yul\":11586:11623   */\n      iszero\n      tag_235\n      jumpi\n        /* \"#utility.yul\":11603:11621   */\n      tag_236\n      tag_114\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":11586:11623   */\n    tag_235:\n        /* \"#utility.yul\":11436:11630   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11636:12046   */\n    tag_67:\n        /* \"#utility.yul\":11676:11683   */\n      0x00\n        /* \"#utility.yul\":11699:11719   */\n      tag_238\n        /* \"#utility.yul\":11717:11718   */\n      dup3\n        /* \"#utility.yul\":11699:11719   */\n      tag_85\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":11694:11719   */\n      swap2\n      pop\n        /* \"#utility.yul\":11733:11753   */\n      tag_239\n        /* \"#utility.yul\":11751:11752   */\n      dup4\n        /* \"#utility.yul\":11733:11753   */\n      tag_85\n      jump\t// in\n    tag_239:\n        /* \"#utility.yul\":11728:11753   */\n      swap3\n      pop\n        /* \"#utility.yul\":11788:11789   */\n      dup3\n        /* \"#utility.yul\":11785:11786   */\n      dup3\n        /* \"#utility.yul\":11781:11790   */\n      mul\n        /* \"#utility.yul\":11810:11840   */\n      tag_240\n        /* \"#utility.yul\":11828:11839   */\n      dup2\n        /* \"#utility.yul\":11810:11840   */\n      tag_85\n      jump\t// in\n    tag_240:\n        /* \"#utility.yul\":11799:11840   */\n      swap2\n      pop\n        /* \"#utility.yul\":11989:11990   */\n      dup3\n        /* \"#utility.yul\":11980:11987   */\n      dup3\n        /* \"#utility.yul\":11976:11991   */\n      div\n        /* \"#utility.yul\":11973:11974   */\n      dup5\n        /* \"#utility.yul\":11970:11992   */\n      eq\n        /* \"#utility.yul\":11950:11951   */\n      dup4\n        /* \"#utility.yul\":11943:11952   */\n      iszero\n        /* \"#utility.yul\":11923:12006   */\n      or\n        /* \"#utility.yul\":11900:12039   */\n      tag_241\n      jumpi\n        /* \"#utility.yul\":12019:12037   */\n      tag_242\n      tag_114\n      jump\t// in\n    tag_242:\n        /* \"#utility.yul\":11900:12039   */\n    tag_241:\n        /* \"#utility.yul\":11684:12046   */\n      pop\n        /* \"#utility.yul\":11636:12046   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12052:12232   */\n    tag_115:\n        /* \"#utility.yul\":12100:12177   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12097:12098   */\n      0x00\n        /* \"#utility.yul\":12090:12178   */\n      mstore\n        /* \"#utility.yul\":12197:12201   */\n      0x12\n        /* \"#utility.yul\":12194:12195   */\n      0x04\n        /* \"#utility.yul\":12187:12202   */\n      mstore\n        /* \"#utility.yul\":12221:12225   */\n      0x24\n        /* \"#utility.yul\":12218:12219   */\n      0x00\n        /* \"#utility.yul\":12211:12226   */\n      revert\n        /* \"#utility.yul\":12238:12423   */\n    tag_70:\n        /* \"#utility.yul\":12278:12279   */\n      0x00\n        /* \"#utility.yul\":12295:12315   */\n      tag_245\n        /* \"#utility.yul\":12313:12314   */\n      dup3\n        /* \"#utility.yul\":12295:12315   */\n      tag_85\n      jump\t// in\n    tag_245:\n        /* \"#utility.yul\":12290:12315   */\n      swap2\n      pop\n        /* \"#utility.yul\":12329:12349   */\n      tag_246\n        /* \"#utility.yul\":12347:12348   */\n      dup4\n        /* \"#utility.yul\":12329:12349   */\n      tag_85\n      jump\t// in\n    tag_246:\n        /* \"#utility.yul\":12324:12349   */\n      swap3\n      pop\n        /* \"#utility.yul\":12368:12369   */\n      dup3\n        /* \"#utility.yul\":12358:12393   */\n      tag_247\n      jumpi\n        /* \"#utility.yul\":12373:12391   */\n      tag_248\n      tag_115\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":12358:12393   */\n    tag_247:\n        /* \"#utility.yul\":12415:12416   */\n      dup3\n        /* \"#utility.yul\":12412:12413   */\n      dup3\n        /* \"#utility.yul\":12408:12417   */\n      div\n        /* \"#utility.yul\":12403:12417   */\n      swap1\n      pop\n        /* \"#utility.yul\":12238:12423   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122070bebd69f9c69019ade06a64bdd8c8261cd31a8239c1e80545c8e02eec4c11a764736f6c63430008180033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1001": {
									"entryPoint": null,
									"id": 1001,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 234,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address_fromMemory": {
									"entryPoint": 254,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 195,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 164,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 160,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 212,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:1355:10",
										"nodeType": "YulBlock",
										"src": "0:1355:10",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:10",
													"nodeType": "YulBlock",
													"src": "47:35:10",
													"statements": [
														{
															"nativeSrc": "57:19:10",
															"nodeType": "YulAssignment",
															"src": "57:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:10",
																		"nodeType": "YulLiteral",
																		"src": "73:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:10"
																},
																"nativeSrc": "67:9:10",
																"nodeType": "YulFunctionCall",
																"src": "67:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:10",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:10",
														"nodeType": "YulTypedName",
														"src": "40:6:10",
														"type": ""
													}
												],
												"src": "7:75:10"
											},
											{
												"body": {
													"nativeSrc": "177:28:10",
													"nodeType": "YulBlock",
													"src": "177:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:10",
																		"nodeType": "YulLiteral",
																		"src": "194:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:10",
																		"nodeType": "YulLiteral",
																		"src": "197:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:10"
																},
																"nativeSrc": "187:12:10",
																"nodeType": "YulFunctionCall",
																"src": "187:12:10"
															},
															"nativeSrc": "187:12:10",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:10",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:10"
											},
											{
												"body": {
													"nativeSrc": "300:28:10",
													"nodeType": "YulBlock",
													"src": "300:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:10",
																		"nodeType": "YulLiteral",
																		"src": "317:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:10",
																		"nodeType": "YulLiteral",
																		"src": "320:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:10"
																},
																"nativeSrc": "310:12:10",
																"nodeType": "YulFunctionCall",
																"src": "310:12:10"
															},
															"nativeSrc": "310:12:10",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:10",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:10"
											},
											{
												"body": {
													"nativeSrc": "379:81:10",
													"nodeType": "YulBlock",
													"src": "379:81:10",
													"statements": [
														{
															"nativeSrc": "389:65:10",
															"nodeType": "YulAssignment",
															"src": "389:65:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "404:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "411:42:10",
																		"nodeType": "YulLiteral",
																		"src": "411:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "400:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:10"
																},
																"nativeSrc": "400:54:10",
																"nodeType": "YulFunctionCall",
																"src": "400:54:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:10",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "334:126:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:10",
														"nodeType": "YulTypedName",
														"src": "361:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:10",
														"nodeType": "YulTypedName",
														"src": "371:7:10",
														"type": ""
													}
												],
												"src": "334:126:10"
											},
											{
												"body": {
													"nativeSrc": "511:51:10",
													"nodeType": "YulBlock",
													"src": "511:51:10",
													"statements": [
														{
															"nativeSrc": "521:35:10",
															"nodeType": "YulAssignment",
															"src": "521:35:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "550:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "532:17:10",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:10"
																},
																"nativeSrc": "532:24:10",
																"nodeType": "YulFunctionCall",
																"src": "532:24:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "521:7:10",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "466:96:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "493:5:10",
														"nodeType": "YulTypedName",
														"src": "493:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "503:7:10",
														"nodeType": "YulTypedName",
														"src": "503:7:10",
														"type": ""
													}
												],
												"src": "466:96:10"
											},
											{
												"body": {
													"nativeSrc": "611:79:10",
													"nodeType": "YulBlock",
													"src": "611:79:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "668:16:10",
																"nodeType": "YulBlock",
																"src": "668:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "677:1:10",
																					"nodeType": "YulLiteral",
																					"src": "677:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "680:1:10",
																					"nodeType": "YulLiteral",
																					"src": "680:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "670:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:10"
																			},
																			"nativeSrc": "670:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:10"
																		},
																		"nativeSrc": "670:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "634:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "659:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "641:17:10",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:10"
																				},
																				"nativeSrc": "641:24:10",
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "631:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:10"
																		},
																		"nativeSrc": "631:35:10",
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "624:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:10"
																},
																"nativeSrc": "624:43:10",
																"nodeType": "YulFunctionCall",
																"src": "624:43:10"
															},
															"nativeSrc": "621:63:10",
															"nodeType": "YulIf",
															"src": "621:63:10"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "568:122:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "604:5:10",
														"nodeType": "YulTypedName",
														"src": "604:5:10",
														"type": ""
													}
												],
												"src": "568:122:10"
											},
											{
												"body": {
													"nativeSrc": "759:80:10",
													"nodeType": "YulBlock",
													"src": "759:80:10",
													"statements": [
														{
															"nativeSrc": "769:22:10",
															"nodeType": "YulAssignment",
															"src": "769:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "784:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "778:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:10"
																},
																"nativeSrc": "778:13:10",
																"nodeType": "YulFunctionCall",
																"src": "778:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "769:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "827:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "800:26:10",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:10"
																},
																"nativeSrc": "800:33:10",
																"nodeType": "YulFunctionCall",
																"src": "800:33:10"
															},
															"nativeSrc": "800:33:10",
															"nodeType": "YulExpressionStatement",
															"src": "800:33:10"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nativeSrc": "696:143:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "737:6:10",
														"nodeType": "YulTypedName",
														"src": "737:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "745:3:10",
														"nodeType": "YulTypedName",
														"src": "745:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "753:5:10",
														"nodeType": "YulTypedName",
														"src": "753:5:10",
														"type": ""
													}
												],
												"src": "696:143:10"
											},
											{
												"body": {
													"nativeSrc": "939:413:10",
													"nodeType": "YulBlock",
													"src": "939:413:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "985:83:10",
																"nodeType": "YulBlock",
																"src": "985:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "987:77:10",
																				"nodeType": "YulIdentifier",
																				"src": "987:77:10"
																			},
																			"nativeSrc": "987:79:10",
																			"nodeType": "YulFunctionCall",
																			"src": "987:79:10"
																		},
																		"nativeSrc": "987:79:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "987:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "960:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "960:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "969:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "969:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "956:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "956:3:10"
																		},
																		"nativeSrc": "956:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "956:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "981:2:10",
																		"nodeType": "YulLiteral",
																		"src": "981:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "952:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "952:3:10"
																},
																"nativeSrc": "952:32:10",
																"nodeType": "YulFunctionCall",
																"src": "952:32:10"
															},
															"nativeSrc": "949:119:10",
															"nodeType": "YulIf",
															"src": "949:119:10"
														},
														{
															"nativeSrc": "1078:128:10",
															"nodeType": "YulBlock",
															"src": "1078:128:10",
															"statements": [
																{
																	"nativeSrc": "1093:15:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1093:15:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1107:1:10",
																		"nodeType": "YulLiteral",
																		"src": "1107:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1097:6:10",
																			"nodeType": "YulTypedName",
																			"src": "1097:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1122:74:10",
																	"nodeType": "YulAssignment",
																	"src": "1122:74:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1168:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "1168:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1179:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "1179:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1164:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "1164:3:10"
																				},
																				"nativeSrc": "1164:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "1164:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1188:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "1188:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nativeSrc": "1132:31:10",
																			"nodeType": "YulIdentifier",
																			"src": "1132:31:10"
																		},
																		"nativeSrc": "1132:64:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1132:64:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "1122:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "1122:6:10"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "1216:129:10",
															"nodeType": "YulBlock",
															"src": "1216:129:10",
															"statements": [
																{
																	"nativeSrc": "1231:16:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1231:16:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1245:2:10",
																		"nodeType": "YulLiteral",
																		"src": "1245:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1235:6:10",
																			"nodeType": "YulTypedName",
																			"src": "1235:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1261:74:10",
																	"nodeType": "YulAssignment",
																	"src": "1261:74:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1307:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "1307:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1318:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "1318:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1303:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "1303:3:10"
																				},
																				"nativeSrc": "1303:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "1303:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1327:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "1327:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nativeSrc": "1271:31:10",
																			"nodeType": "YulIdentifier",
																			"src": "1271:31:10"
																		},
																		"nativeSrc": "1271:64:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1271:64:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "1261:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "1261:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address_fromMemory",
												"nativeSrc": "845:507:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "901:9:10",
														"nodeType": "YulTypedName",
														"src": "901:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "912:7:10",
														"nodeType": "YulTypedName",
														"src": "912:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "924:6:10",
														"nodeType": "YulTypedName",
														"src": "924:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "932:6:10",
														"nodeType": "YulTypedName",
														"src": "932:6:10",
														"type": ""
													}
												],
												"src": "845:507:10"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c060405234801561000f575f80fd5b50604051610e2f380380610e2f833981810160405281019061003191906100fe565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505061013c565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100cd826100a4565b9050919050565b6100dd816100c3565b81146100e7575f80fd5b50565b5f815190506100f8816100d4565b92915050565b5f8060408385031215610114576101136100a0565b5b5f610121858286016100ea565b9250506020610132858286016100ea565b9150509250929050565b60805160a051610cc461016b5f395f6103fc01525f818161014d0152818161028b01526103720152610cc45ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c8063150b7a02146100595780631dbb2a22146100895780632e17de78146100a5578063584b62a1146100c1578063d2d7231f146100f1575b5f80fd5b610073600480360381019061006e91906107fc565b610121565b60405161008091906108b6565b60405180910390f35b6100a3600480360381019061009e91906108cf565b610134565b005b6100bf60048036038101906100ba91906108cf565b610316565b005b6100db60048036038101906100d691906108fa565b61049a565b6040516100e89190610947565b60405180910390f35b61010b600480360381019061010691906108cf565b6104b9565b6040516101189190610947565b60405180910390f35b5f63150b7a0260e01b9050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016101a49190610947565b602060405180830381865afa1580156101bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e39190610974565b73ffffffffffffffffffffffffffffffffffffffff1614610239576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610230906109f9565b60405180910390fd5b425f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f20819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b88d4fde3330846040518463ffffffff1660e01b81526004016102e693929190610a59565b5f604051808303815f87803b1580156102fd575f80fd5b505af115801561030f573d5f803e3d5ffd5b5050505050565b5f610320826104b9565b90505f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f205f90557f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b88d4fde3033856040518463ffffffff1660e01b81526004016103cd93929190610a59565b5f604051808303815f87803b1580156103e4575f80fd5b505af11580156103f6573d5f803e3d5ffd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610455929190610aa1565b6020604051808303815f875af1158015610471573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104959190610afd565b505050565b5f602052815f5260405f20602052805f5260405f205f91509150505481565b5f805f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f205411610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053e90610b72565b60405180910390fd5b5f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f20544261059f9190610bbd565b90505f603c670de0b6b3a7640000836105b7856105e1565b6105c19190610bf0565b6105cb9190610bf0565b6105d59190610c5e565b90508092505050919050565b5f603c8210156105f3575f905061061d565b60b4821015610605576003905061061d565b61012c821015610618576005905061061d565b600a90505b919050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61065c82610633565b9050919050565b61066c81610652565b8114610676575f80fd5b50565b5f8135905061068781610663565b92915050565b5f819050919050565b61069f8161068d565b81146106a9575f80fd5b50565b5f813590506106ba81610696565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61070e826106c8565b810181811067ffffffffffffffff8211171561072d5761072c6106d8565b5b80604052505050565b5f61073f610622565b905061074b8282610705565b919050565b5f67ffffffffffffffff82111561076a576107696106d8565b5b610773826106c8565b9050602081019050919050565b828183375f83830152505050565b5f6107a061079b84610750565b610736565b9050828152602081018484840111156107bc576107bb6106c4565b5b6107c7848285610780565b509392505050565b5f82601f8301126107e3576107e26106c0565b5b81356107f384826020860161078e565b91505092915050565b5f805f80608085870312156108145761081361062b565b5b5f61082187828801610679565b945050602061083287828801610679565b9350506040610843878288016106ac565b925050606085013567ffffffffffffffff8111156108645761086361062f565b5b610870878288016107cf565b91505092959194509250565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6108b08161087c565b82525050565b5f6020820190506108c95f8301846108a7565b92915050565b5f602082840312156108e4576108e361062b565b5b5f6108f1848285016106ac565b91505092915050565b5f80604083850312156109105761090f61062b565b5b5f61091d85828601610679565b925050602061092e858286016106ac565b9150509250929050565b6109418161068d565b82525050565b5f60208201905061095a5f830184610938565b92915050565b5f8151905061096e81610663565b92915050565b5f602082840312156109895761098861062b565b5b5f61099684828501610960565b91505092915050565b5f82825260208201905092915050565b7f596f75277265206e6f74206f776e2074686973204e46540000000000000000005f82015250565b5f6109e360178361099f565b91506109ee826109af565b602082019050919050565b5f6020820190508181035f830152610a10816109d7565b9050919050565b610a2081610652565b82525050565b5f82825260208201905092915050565b50565b5f610a445f83610a26565b9150610a4f82610a36565b5f82019050919050565b5f608082019050610a6c5f830186610a17565b610a796020830185610a17565b610a866040830184610938565b8181036060830152610a9781610a39565b9050949350505050565b5f604082019050610ab45f830185610a17565b610ac16020830184610938565b9392505050565b5f8115159050919050565b610adc81610ac8565b8114610ae6575f80fd5b50565b5f81519050610af781610ad3565b92915050565b5f60208284031215610b1257610b1161062b565b5b5f610b1f84828501610ae9565b91505092915050565b7f596f75206e65766572207374616b652074686973204e465400000000000000005f82015250565b5f610b5c60188361099f565b9150610b6782610b28565b602082019050919050565b5f6020820190508181035f830152610b8981610b50565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610bc78261068d565b9150610bd28361068d565b9250828203905081811115610bea57610be9610b90565b5b92915050565b5f610bfa8261068d565b9150610c058361068d565b9250828202610c138161068d565b91508282048414831517610c2a57610c29610b90565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610c688261068d565b9150610c738361068d565b925082610c8357610c82610c31565b5b82820490509291505056fea264697066735822122070bebd69f9c69019ade06a64bdd8c8261cd31a8239c1e80545c8e02eec4c11a764736f6c63430008180033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xE2F CODESIZE SUB DUP1 PUSH2 0xE2F DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x31 SWAP2 SWAP1 PUSH2 0xFE JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP PUSH2 0x13C JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xCD DUP3 PUSH2 0xA4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDD DUP2 PUSH2 0xC3 JUMP JUMPDEST DUP2 EQ PUSH2 0xE7 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0xF8 DUP2 PUSH2 0xD4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x114 JUMPI PUSH2 0x113 PUSH2 0xA0 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x121 DUP6 DUP3 DUP7 ADD PUSH2 0xEA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x132 DUP6 DUP3 DUP7 ADD PUSH2 0xEA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0xCC4 PUSH2 0x16B PUSH0 CODECOPY PUSH0 PUSH2 0x3FC ADD MSTORE PUSH0 DUP2 DUP2 PUSH2 0x14D ADD MSTORE DUP2 DUP2 PUSH2 0x28B ADD MSTORE PUSH2 0x372 ADD MSTORE PUSH2 0xCC4 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x59 JUMPI DUP1 PUSH4 0x1DBB2A22 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x2E17DE78 EQ PUSH2 0xA5 JUMPI DUP1 PUSH4 0x584B62A1 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0xD2D7231F EQ PUSH2 0xF1 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x73 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6E SWAP2 SWAP1 PUSH2 0x7FC JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x80 SWAP2 SWAP1 PUSH2 0x8B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x9E SWAP2 SWAP1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x134 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xBA SWAP2 SWAP1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x316 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD6 SWAP2 SWAP1 PUSH2 0x8FA JUMP JUMPDEST PUSH2 0x49A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0x947 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x106 SWAP2 SWAP1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0x947 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP2 SWAP1 PUSH2 0x947 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BF JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E3 SWAP2 SWAP1 PUSH2 0x974 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x239 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x230 SWAP1 PUSH2 0x9F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB88D4FDE CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA59 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FD JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30F JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x320 DUP3 PUSH2 0x4B9 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB88D4FDE ADDRESS CALLER DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3CD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA59 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F6 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x455 SWAP3 SWAP2 SWAP1 PUSH2 0xAA1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x471 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x495 SWAP2 SWAP1 PUSH2 0xAFD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 MSTORE DUP2 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD GT PUSH2 0x547 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x53E SWAP1 PUSH2 0xB72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD TIMESTAMP PUSH2 0x59F SWAP2 SWAP1 PUSH2 0xBBD JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x3C PUSH8 0xDE0B6B3A7640000 DUP4 PUSH2 0x5B7 DUP6 PUSH2 0x5E1 JUMP JUMPDEST PUSH2 0x5C1 SWAP2 SWAP1 PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0x5CB SWAP2 SWAP1 PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0x5D5 SWAP2 SWAP1 PUSH2 0xC5E JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x3C DUP3 LT ISZERO PUSH2 0x5F3 JUMPI PUSH0 SWAP1 POP PUSH2 0x61D JUMP JUMPDEST PUSH1 0xB4 DUP3 LT ISZERO PUSH2 0x605 JUMPI PUSH1 0x3 SWAP1 POP PUSH2 0x61D JUMP JUMPDEST PUSH2 0x12C DUP3 LT ISZERO PUSH2 0x618 JUMPI PUSH1 0x5 SWAP1 POP PUSH2 0x61D JUMP JUMPDEST PUSH1 0xA SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x65C DUP3 PUSH2 0x633 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x66C DUP2 PUSH2 0x652 JUMP JUMPDEST DUP2 EQ PUSH2 0x676 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x687 DUP2 PUSH2 0x663 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x69F DUP2 PUSH2 0x68D JUMP JUMPDEST DUP2 EQ PUSH2 0x6A9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x6BA DUP2 PUSH2 0x696 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x70E DUP3 PUSH2 0x6C8 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x72D JUMPI PUSH2 0x72C PUSH2 0x6D8 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x73F PUSH2 0x622 JUMP JUMPDEST SWAP1 POP PUSH2 0x74B DUP3 DUP3 PUSH2 0x705 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x76A JUMPI PUSH2 0x769 PUSH2 0x6D8 JUMP JUMPDEST JUMPDEST PUSH2 0x773 DUP3 PUSH2 0x6C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x7A0 PUSH2 0x79B DUP5 PUSH2 0x750 JUMP JUMPDEST PUSH2 0x736 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x7BC JUMPI PUSH2 0x7BB PUSH2 0x6C4 JUMP JUMPDEST JUMPDEST PUSH2 0x7C7 DUP5 DUP3 DUP6 PUSH2 0x780 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7E3 JUMPI PUSH2 0x7E2 PUSH2 0x6C0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7F3 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x78E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x814 JUMPI PUSH2 0x813 PUSH2 0x62B JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x821 DUP8 DUP3 DUP9 ADD PUSH2 0x679 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x832 DUP8 DUP3 DUP9 ADD PUSH2 0x679 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x843 DUP8 DUP3 DUP9 ADD PUSH2 0x6AC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x864 JUMPI PUSH2 0x863 PUSH2 0x62F JUMP JUMPDEST JUMPDEST PUSH2 0x870 DUP8 DUP3 DUP9 ADD PUSH2 0x7CF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8B0 DUP2 PUSH2 0x87C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8C9 PUSH0 DUP4 ADD DUP5 PUSH2 0x8A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8E4 JUMPI PUSH2 0x8E3 PUSH2 0x62B JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x8F1 DUP5 DUP3 DUP6 ADD PUSH2 0x6AC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x910 JUMPI PUSH2 0x90F PUSH2 0x62B JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x91D DUP6 DUP3 DUP7 ADD PUSH2 0x679 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x92E DUP6 DUP3 DUP7 ADD PUSH2 0x6AC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x941 DUP2 PUSH2 0x68D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x95A PUSH0 DUP4 ADD DUP5 PUSH2 0x938 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x96E DUP2 PUSH2 0x663 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x989 JUMPI PUSH2 0x988 PUSH2 0x62B JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x996 DUP5 DUP3 DUP6 ADD PUSH2 0x960 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F75277265206E6F74206F776E2074686973204E4654000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x9E3 PUSH1 0x17 DUP4 PUSH2 0x99F JUMP JUMPDEST SWAP2 POP PUSH2 0x9EE DUP3 PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xA10 DUP2 PUSH2 0x9D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA20 DUP2 PUSH2 0x652 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH2 0xA44 PUSH0 DUP4 PUSH2 0xA26 JUMP JUMPDEST SWAP2 POP PUSH2 0xA4F DUP3 PUSH2 0xA36 JUMP JUMPDEST PUSH0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0xA6C PUSH0 DUP4 ADD DUP7 PUSH2 0xA17 JUMP JUMPDEST PUSH2 0xA79 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xA17 JUMP JUMPDEST PUSH2 0xA86 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x938 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0xA97 DUP2 PUSH2 0xA39 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xAB4 PUSH0 DUP4 ADD DUP6 PUSH2 0xA17 JUMP JUMPDEST PUSH2 0xAC1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x938 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xADC DUP2 PUSH2 0xAC8 JUMP JUMPDEST DUP2 EQ PUSH2 0xAE6 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0xAF7 DUP2 PUSH2 0xAD3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB12 JUMPI PUSH2 0xB11 PUSH2 0x62B JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xB1F DUP5 DUP3 DUP6 ADD PUSH2 0xAE9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F75206E65766572207374616B652074686973204E46540000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xB5C PUSH1 0x18 DUP4 PUSH2 0x99F JUMP JUMPDEST SWAP2 POP PUSH2 0xB67 DUP3 PUSH2 0xB28 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xB89 DUP2 PUSH2 0xB50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xBC7 DUP3 PUSH2 0x68D JUMP JUMPDEST SWAP2 POP PUSH2 0xBD2 DUP4 PUSH2 0x68D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xBEA JUMPI PUSH2 0xBE9 PUSH2 0xB90 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xBFA DUP3 PUSH2 0x68D JUMP JUMPDEST SWAP2 POP PUSH2 0xC05 DUP4 PUSH2 0x68D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xC13 DUP2 PUSH2 0x68D JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xC2A JUMPI PUSH2 0xC29 PUSH2 0xB90 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xC68 DUP3 PUSH2 0x68D JUMP JUMPDEST SWAP2 POP PUSH2 0xC73 DUP4 PUSH2 0x68D JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xC83 JUMPI PUSH2 0xC82 PUSH2 0xC31 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0xBEBD69F9C69019ADE06A64BDD8C8261CD3 BYTE DUP3 CODECOPY 0xC1 0xE8 SDIV GASLIMIT 0xC8 0xE0 0x2E 0xEC 0x4C GT 0xA7 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ",
							"sourceMap": "327:1682:9:-:0;;;545:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;612:4;598:19;;;;;;;;;;642:6;628:21;;;;;;;;;;545:112;;327:1682;;88:117:10;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:507::-;924:6;932;981:2;969:9;960:7;956:23;952:32;949:119;;;987:79;;:::i;:::-;949:119;1107:1;1132:64;1188:7;1179:6;1168:9;1164:22;1132:64;:::i;:::-;1122:74;;1078:128;1245:2;1271:64;1327:7;1318:6;1307:9;1303:22;1271:64;:::i;:::-;1261:74;;1216:129;845:507;;;;;:::o;327:1682:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@calculateRate_1033": {
									"entryPoint": 1505,
									"id": 1033,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@calculateReward_1122": {
									"entryPoint": 1209,
									"id": 1122,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@onERC721Received_799": {
									"entryPoint": 289,
									"id": 799,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@stakes_981": {
									"entryPoint": 1178,
									"id": 981,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@staking_1073": {
									"entryPoint": 308,
									"id": 1073,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@unstake_1163": {
									"entryPoint": 790,
									"id": 1163,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_available_length_t_bytes_memory_ptr": {
									"entryPoint": 1934,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 1657,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 2400,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 2793,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes_memory_ptr": {
									"entryPoint": 1999,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 1708,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 2420,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 2044,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2298,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 2813,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 2255,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 2583,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes4_to_t_bytes4_fromStack": {
									"entryPoint": 2215,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_stringliteral_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2896,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2519,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 2617,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 2360,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 2649,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 2721,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
									"entryPoint": 2230,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2930,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2553,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 2375,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 1846,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 1570,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_bytes_memory_ptr": {
									"entryPoint": 1872,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 2598,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 2463,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 3166,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3056,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 3005,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 1618,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 2760,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes4": {
									"entryPoint": 2172,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 1587,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 1677,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_calldata_to_memory_with_cleanup": {
									"entryPoint": 1920,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"finalize_allocation": {
									"entryPoint": 1797,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 2960,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 3121,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1752,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 1728,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 1732,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 1583,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 1579,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 1736,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b": {
									"entryPoint": 2856,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c": {
									"entryPoint": 2479,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
									"entryPoint": 2614,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 1635,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 2771,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 1686,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:12426:10",
										"nodeType": "YulBlock",
										"src": "0:12426:10",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:10",
													"nodeType": "YulBlock",
													"src": "47:35:10",
													"statements": [
														{
															"nativeSrc": "57:19:10",
															"nodeType": "YulAssignment",
															"src": "57:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:10",
																		"nodeType": "YulLiteral",
																		"src": "73:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:10"
																},
																"nativeSrc": "67:9:10",
																"nodeType": "YulFunctionCall",
																"src": "67:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:10",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:10",
														"nodeType": "YulTypedName",
														"src": "40:6:10",
														"type": ""
													}
												],
												"src": "7:75:10"
											},
											{
												"body": {
													"nativeSrc": "177:28:10",
													"nodeType": "YulBlock",
													"src": "177:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:10",
																		"nodeType": "YulLiteral",
																		"src": "194:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:10",
																		"nodeType": "YulLiteral",
																		"src": "197:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:10"
																},
																"nativeSrc": "187:12:10",
																"nodeType": "YulFunctionCall",
																"src": "187:12:10"
															},
															"nativeSrc": "187:12:10",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:10",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:10"
											},
											{
												"body": {
													"nativeSrc": "300:28:10",
													"nodeType": "YulBlock",
													"src": "300:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:10",
																		"nodeType": "YulLiteral",
																		"src": "317:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:10",
																		"nodeType": "YulLiteral",
																		"src": "320:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:10"
																},
																"nativeSrc": "310:12:10",
																"nodeType": "YulFunctionCall",
																"src": "310:12:10"
															},
															"nativeSrc": "310:12:10",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:10",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:10"
											},
											{
												"body": {
													"nativeSrc": "379:81:10",
													"nodeType": "YulBlock",
													"src": "379:81:10",
													"statements": [
														{
															"nativeSrc": "389:65:10",
															"nodeType": "YulAssignment",
															"src": "389:65:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "404:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "411:42:10",
																		"nodeType": "YulLiteral",
																		"src": "411:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "400:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:10"
																},
																"nativeSrc": "400:54:10",
																"nodeType": "YulFunctionCall",
																"src": "400:54:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:10",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "334:126:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:10",
														"nodeType": "YulTypedName",
														"src": "361:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:10",
														"nodeType": "YulTypedName",
														"src": "371:7:10",
														"type": ""
													}
												],
												"src": "334:126:10"
											},
											{
												"body": {
													"nativeSrc": "511:51:10",
													"nodeType": "YulBlock",
													"src": "511:51:10",
													"statements": [
														{
															"nativeSrc": "521:35:10",
															"nodeType": "YulAssignment",
															"src": "521:35:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "550:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "532:17:10",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:10"
																},
																"nativeSrc": "532:24:10",
																"nodeType": "YulFunctionCall",
																"src": "532:24:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "521:7:10",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "466:96:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "493:5:10",
														"nodeType": "YulTypedName",
														"src": "493:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "503:7:10",
														"nodeType": "YulTypedName",
														"src": "503:7:10",
														"type": ""
													}
												],
												"src": "466:96:10"
											},
											{
												"body": {
													"nativeSrc": "611:79:10",
													"nodeType": "YulBlock",
													"src": "611:79:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "668:16:10",
																"nodeType": "YulBlock",
																"src": "668:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "677:1:10",
																					"nodeType": "YulLiteral",
																					"src": "677:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "680:1:10",
																					"nodeType": "YulLiteral",
																					"src": "680:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "670:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:10"
																			},
																			"nativeSrc": "670:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:10"
																		},
																		"nativeSrc": "670:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "634:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "659:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "641:17:10",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:10"
																				},
																				"nativeSrc": "641:24:10",
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "631:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:10"
																		},
																		"nativeSrc": "631:35:10",
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "624:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:10"
																},
																"nativeSrc": "624:43:10",
																"nodeType": "YulFunctionCall",
																"src": "624:43:10"
															},
															"nativeSrc": "621:63:10",
															"nodeType": "YulIf",
															"src": "621:63:10"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "568:122:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "604:5:10",
														"nodeType": "YulTypedName",
														"src": "604:5:10",
														"type": ""
													}
												],
												"src": "568:122:10"
											},
											{
												"body": {
													"nativeSrc": "748:87:10",
													"nodeType": "YulBlock",
													"src": "748:87:10",
													"statements": [
														{
															"nativeSrc": "758:29:10",
															"nodeType": "YulAssignment",
															"src": "758:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "780:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "767:12:10",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:10"
																},
																"nativeSrc": "767:20:10",
																"nodeType": "YulFunctionCall",
																"src": "767:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "758:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "823:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "796:26:10",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:10"
																},
																"nativeSrc": "796:33:10",
																"nodeType": "YulFunctionCall",
																"src": "796:33:10"
															},
															"nativeSrc": "796:33:10",
															"nodeType": "YulExpressionStatement",
															"src": "796:33:10"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "696:139:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "726:6:10",
														"nodeType": "YulTypedName",
														"src": "726:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "734:3:10",
														"nodeType": "YulTypedName",
														"src": "734:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "742:5:10",
														"nodeType": "YulTypedName",
														"src": "742:5:10",
														"type": ""
													}
												],
												"src": "696:139:10"
											},
											{
												"body": {
													"nativeSrc": "886:32:10",
													"nodeType": "YulBlock",
													"src": "886:32:10",
													"statements": [
														{
															"nativeSrc": "896:16:10",
															"nodeType": "YulAssignment",
															"src": "896:16:10",
															"value": {
																"name": "value",
																"nativeSrc": "907:5:10",
																"nodeType": "YulIdentifier",
																"src": "907:5:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "896:7:10",
																	"nodeType": "YulIdentifier",
																	"src": "896:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "841:77:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "868:5:10",
														"nodeType": "YulTypedName",
														"src": "868:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "878:7:10",
														"nodeType": "YulTypedName",
														"src": "878:7:10",
														"type": ""
													}
												],
												"src": "841:77:10"
											},
											{
												"body": {
													"nativeSrc": "967:79:10",
													"nodeType": "YulBlock",
													"src": "967:79:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "1024:16:10",
																"nodeType": "YulBlock",
																"src": "1024:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1033:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1033:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1036:1:10",
																					"nodeType": "YulLiteral",
																					"src": "1036:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1026:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "1026:6:10"
																			},
																			"nativeSrc": "1026:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "1026:12:10"
																		},
																		"nativeSrc": "1026:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "1026:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "990:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "990:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1015:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "1015:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "997:17:10",
																					"nodeType": "YulIdentifier",
																					"src": "997:17:10"
																				},
																				"nativeSrc": "997:24:10",
																				"nodeType": "YulFunctionCall",
																				"src": "997:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "987:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "987:2:10"
																		},
																		"nativeSrc": "987:35:10",
																		"nodeType": "YulFunctionCall",
																		"src": "987:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "980:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "980:6:10"
																},
																"nativeSrc": "980:43:10",
																"nodeType": "YulFunctionCall",
																"src": "980:43:10"
															},
															"nativeSrc": "977:63:10",
															"nodeType": "YulIf",
															"src": "977:63:10"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "924:122:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "960:5:10",
														"nodeType": "YulTypedName",
														"src": "960:5:10",
														"type": ""
													}
												],
												"src": "924:122:10"
											},
											{
												"body": {
													"nativeSrc": "1104:87:10",
													"nodeType": "YulBlock",
													"src": "1104:87:10",
													"statements": [
														{
															"nativeSrc": "1114:29:10",
															"nodeType": "YulAssignment",
															"src": "1114:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "1136:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "1136:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1123:12:10",
																	"nodeType": "YulIdentifier",
																	"src": "1123:12:10"
																},
																"nativeSrc": "1123:20:10",
																"nodeType": "YulFunctionCall",
																"src": "1123:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1114:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "1114:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1179:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "1179:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "1152:26:10",
																	"nodeType": "YulIdentifier",
																	"src": "1152:26:10"
																},
																"nativeSrc": "1152:33:10",
																"nodeType": "YulFunctionCall",
																"src": "1152:33:10"
															},
															"nativeSrc": "1152:33:10",
															"nodeType": "YulExpressionStatement",
															"src": "1152:33:10"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "1052:139:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "1082:6:10",
														"nodeType": "YulTypedName",
														"src": "1082:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1090:3:10",
														"nodeType": "YulTypedName",
														"src": "1090:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "1098:5:10",
														"nodeType": "YulTypedName",
														"src": "1098:5:10",
														"type": ""
													}
												],
												"src": "1052:139:10"
											},
											{
												"body": {
													"nativeSrc": "1286:28:10",
													"nodeType": "YulBlock",
													"src": "1286:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1303:1:10",
																		"nodeType": "YulLiteral",
																		"src": "1303:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1306:1:10",
																		"nodeType": "YulLiteral",
																		"src": "1306:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1296:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1296:6:10"
																},
																"nativeSrc": "1296:12:10",
																"nodeType": "YulFunctionCall",
																"src": "1296:12:10"
															},
															"nativeSrc": "1296:12:10",
															"nodeType": "YulExpressionStatement",
															"src": "1296:12:10"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nativeSrc": "1197:117:10",
												"nodeType": "YulFunctionDefinition",
												"src": "1197:117:10"
											},
											{
												"body": {
													"nativeSrc": "1409:28:10",
													"nodeType": "YulBlock",
													"src": "1409:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1426:1:10",
																		"nodeType": "YulLiteral",
																		"src": "1426:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1429:1:10",
																		"nodeType": "YulLiteral",
																		"src": "1429:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1419:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1419:6:10"
																},
																"nativeSrc": "1419:12:10",
																"nodeType": "YulFunctionCall",
																"src": "1419:12:10"
															},
															"nativeSrc": "1419:12:10",
															"nodeType": "YulExpressionStatement",
															"src": "1419:12:10"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nativeSrc": "1320:117:10",
												"nodeType": "YulFunctionDefinition",
												"src": "1320:117:10"
											},
											{
												"body": {
													"nativeSrc": "1491:54:10",
													"nodeType": "YulBlock",
													"src": "1491:54:10",
													"statements": [
														{
															"nativeSrc": "1501:38:10",
															"nodeType": "YulAssignment",
															"src": "1501:38:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1519:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "1519:5:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1526:2:10",
																				"nodeType": "YulLiteral",
																				"src": "1526:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1515:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1515:3:10"
																		},
																		"nativeSrc": "1515:14:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1515:14:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1535:2:10",
																				"nodeType": "YulLiteral",
																				"src": "1535:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "1531:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "1531:3:10"
																		},
																		"nativeSrc": "1531:7:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1531:7:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1511:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "1511:3:10"
																},
																"nativeSrc": "1511:28:10",
																"nodeType": "YulFunctionCall",
																"src": "1511:28:10"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "1501:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1501:6:10"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "1443:102:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1474:5:10",
														"nodeType": "YulTypedName",
														"src": "1474:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "1484:6:10",
														"nodeType": "YulTypedName",
														"src": "1484:6:10",
														"type": ""
													}
												],
												"src": "1443:102:10"
											},
											{
												"body": {
													"nativeSrc": "1579:152:10",
													"nodeType": "YulBlock",
													"src": "1579:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1596:1:10",
																		"nodeType": "YulLiteral",
																		"src": "1596:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1599:77:10",
																		"nodeType": "YulLiteral",
																		"src": "1599:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1589:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1589:6:10"
																},
																"nativeSrc": "1589:88:10",
																"nodeType": "YulFunctionCall",
																"src": "1589:88:10"
															},
															"nativeSrc": "1589:88:10",
															"nodeType": "YulExpressionStatement",
															"src": "1589:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1693:1:10",
																		"nodeType": "YulLiteral",
																		"src": "1693:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1696:4:10",
																		"nodeType": "YulLiteral",
																		"src": "1696:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1686:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1686:6:10"
																},
																"nativeSrc": "1686:15:10",
																"nodeType": "YulFunctionCall",
																"src": "1686:15:10"
															},
															"nativeSrc": "1686:15:10",
															"nodeType": "YulExpressionStatement",
															"src": "1686:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1717:1:10",
																		"nodeType": "YulLiteral",
																		"src": "1717:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1720:4:10",
																		"nodeType": "YulLiteral",
																		"src": "1720:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1710:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1710:6:10"
																},
																"nativeSrc": "1710:15:10",
																"nodeType": "YulFunctionCall",
																"src": "1710:15:10"
															},
															"nativeSrc": "1710:15:10",
															"nodeType": "YulExpressionStatement",
															"src": "1710:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "1551:180:10",
												"nodeType": "YulFunctionDefinition",
												"src": "1551:180:10"
											},
											{
												"body": {
													"nativeSrc": "1780:238:10",
													"nodeType": "YulBlock",
													"src": "1780:238:10",
													"statements": [
														{
															"nativeSrc": "1790:58:10",
															"nodeType": "YulVariableDeclaration",
															"src": "1790:58:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "1812:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "1812:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nativeSrc": "1842:4:10",
																				"nodeType": "YulIdentifier",
																				"src": "1842:4:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "1820:21:10",
																			"nodeType": "YulIdentifier",
																			"src": "1820:21:10"
																		},
																		"nativeSrc": "1820:27:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1820:27:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1808:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "1808:3:10"
																},
																"nativeSrc": "1808:40:10",
																"nodeType": "YulFunctionCall",
																"src": "1808:40:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nativeSrc": "1794:10:10",
																	"nodeType": "YulTypedName",
																	"src": "1794:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1959:22:10",
																"nodeType": "YulBlock",
																"src": "1959:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "1961:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "1961:16:10"
																			},
																			"nativeSrc": "1961:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "1961:18:10"
																		},
																		"nativeSrc": "1961:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "1961:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "1902:10:10",
																				"nodeType": "YulIdentifier",
																				"src": "1902:10:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1914:18:10",
																				"nodeType": "YulLiteral",
																				"src": "1914:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "1899:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "1899:2:10"
																		},
																		"nativeSrc": "1899:34:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1899:34:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "1938:10:10",
																				"nodeType": "YulIdentifier",
																				"src": "1938:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nativeSrc": "1950:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "1950:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "1935:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "1935:2:10"
																		},
																		"nativeSrc": "1935:22:10",
																		"nodeType": "YulFunctionCall",
																		"src": "1935:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "1896:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "1896:2:10"
																},
																"nativeSrc": "1896:62:10",
																"nodeType": "YulFunctionCall",
																"src": "1896:62:10"
															},
															"nativeSrc": "1893:88:10",
															"nodeType": "YulIf",
															"src": "1893:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1997:2:10",
																		"nodeType": "YulLiteral",
																		"src": "1997:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nativeSrc": "2001:10:10",
																		"nodeType": "YulIdentifier",
																		"src": "2001:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1990:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "1990:6:10"
																},
																"nativeSrc": "1990:22:10",
																"nodeType": "YulFunctionCall",
																"src": "1990:22:10"
															},
															"nativeSrc": "1990:22:10",
															"nodeType": "YulExpressionStatement",
															"src": "1990:22:10"
														}
													]
												},
												"name": "finalize_allocation",
												"nativeSrc": "1737:281:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "1766:6:10",
														"nodeType": "YulTypedName",
														"src": "1766:6:10",
														"type": ""
													},
													{
														"name": "size",
														"nativeSrc": "1774:4:10",
														"nodeType": "YulTypedName",
														"src": "1774:4:10",
														"type": ""
													}
												],
												"src": "1737:281:10"
											},
											{
												"body": {
													"nativeSrc": "2065:88:10",
													"nodeType": "YulBlock",
													"src": "2065:88:10",
													"statements": [
														{
															"nativeSrc": "2075:30:10",
															"nodeType": "YulAssignment",
															"src": "2075:30:10",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nativeSrc": "2085:18:10",
																	"nodeType": "YulIdentifier",
																	"src": "2085:18:10"
																},
																"nativeSrc": "2085:20:10",
																"nodeType": "YulFunctionCall",
																"src": "2085:20:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "2075:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2075:6:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "2134:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "2134:6:10"
																	},
																	{
																		"name": "size",
																		"nativeSrc": "2142:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "2142:4:10"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nativeSrc": "2114:19:10",
																	"nodeType": "YulIdentifier",
																	"src": "2114:19:10"
																},
																"nativeSrc": "2114:33:10",
																"nodeType": "YulFunctionCall",
																"src": "2114:33:10"
															},
															"nativeSrc": "2114:33:10",
															"nodeType": "YulExpressionStatement",
															"src": "2114:33:10"
														}
													]
												},
												"name": "allocate_memory",
												"nativeSrc": "2024:129:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nativeSrc": "2049:4:10",
														"nodeType": "YulTypedName",
														"src": "2049:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "2058:6:10",
														"nodeType": "YulTypedName",
														"src": "2058:6:10",
														"type": ""
													}
												],
												"src": "2024:129:10"
											},
											{
												"body": {
													"nativeSrc": "2225:241:10",
													"nodeType": "YulBlock",
													"src": "2225:241:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "2330:22:10",
																"nodeType": "YulBlock",
																"src": "2330:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "2332:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "2332:16:10"
																			},
																			"nativeSrc": "2332:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2332:18:10"
																		},
																		"nativeSrc": "2332:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "2332:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "2302:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "2302:6:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2310:18:10",
																		"nodeType": "YulLiteral",
																		"src": "2310:18:10",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2299:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "2299:2:10"
																},
																"nativeSrc": "2299:30:10",
																"nodeType": "YulFunctionCall",
																"src": "2299:30:10"
															},
															"nativeSrc": "2296:56:10",
															"nodeType": "YulIf",
															"src": "2296:56:10"
														},
														{
															"nativeSrc": "2362:37:10",
															"nodeType": "YulAssignment",
															"src": "2362:37:10",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "2392:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "2392:6:10"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nativeSrc": "2370:21:10",
																	"nodeType": "YulIdentifier",
																	"src": "2370:21:10"
																},
																"nativeSrc": "2370:29:10",
																"nodeType": "YulFunctionCall",
																"src": "2370:29:10"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nativeSrc": "2362:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "2362:4:10"
																}
															]
														},
														{
															"nativeSrc": "2436:23:10",
															"nodeType": "YulAssignment",
															"src": "2436:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nativeSrc": "2448:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "2448:4:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2454:4:10",
																		"nodeType": "YulLiteral",
																		"src": "2454:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2444:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "2444:3:10"
																},
																"nativeSrc": "2444:15:10",
																"nodeType": "YulFunctionCall",
																"src": "2444:15:10"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nativeSrc": "2436:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "2436:4:10"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes_memory_ptr",
												"nativeSrc": "2159:307:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nativeSrc": "2209:6:10",
														"nodeType": "YulTypedName",
														"src": "2209:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nativeSrc": "2220:4:10",
														"nodeType": "YulTypedName",
														"src": "2220:4:10",
														"type": ""
													}
												],
												"src": "2159:307:10"
											},
											{
												"body": {
													"nativeSrc": "2536:82:10",
													"nodeType": "YulBlock",
													"src": "2536:82:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "2559:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "2559:3:10"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "2564:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "2564:3:10"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "2569:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "2569:6:10"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nativeSrc": "2546:12:10",
																	"nodeType": "YulIdentifier",
																	"src": "2546:12:10"
																},
																"nativeSrc": "2546:30:10",
																"nodeType": "YulFunctionCall",
																"src": "2546:30:10"
															},
															"nativeSrc": "2546:30:10",
															"nodeType": "YulExpressionStatement",
															"src": "2546:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "2596:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "2596:3:10"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "2601:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2601:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2592:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "2592:3:10"
																		},
																		"nativeSrc": "2592:16:10",
																		"nodeType": "YulFunctionCall",
																		"src": "2592:16:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2610:1:10",
																		"nodeType": "YulLiteral",
																		"src": "2610:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2585:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2585:6:10"
																},
																"nativeSrc": "2585:27:10",
																"nodeType": "YulFunctionCall",
																"src": "2585:27:10"
															},
															"nativeSrc": "2585:27:10",
															"nodeType": "YulExpressionStatement",
															"src": "2585:27:10"
														}
													]
												},
												"name": "copy_calldata_to_memory_with_cleanup",
												"nativeSrc": "2472:146:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "2518:3:10",
														"nodeType": "YulTypedName",
														"src": "2518:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "2523:3:10",
														"nodeType": "YulTypedName",
														"src": "2523:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "2528:6:10",
														"nodeType": "YulTypedName",
														"src": "2528:6:10",
														"type": ""
													}
												],
												"src": "2472:146:10"
											},
											{
												"body": {
													"nativeSrc": "2707:340:10",
													"nodeType": "YulBlock",
													"src": "2707:340:10",
													"statements": [
														{
															"nativeSrc": "2717:74:10",
															"nodeType": "YulAssignment",
															"src": "2717:74:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "2783:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2783:6:10"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes_memory_ptr",
																			"nativeSrc": "2742:40:10",
																			"nodeType": "YulIdentifier",
																			"src": "2742:40:10"
																		},
																		"nativeSrc": "2742:48:10",
																		"nodeType": "YulFunctionCall",
																		"src": "2742:48:10"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nativeSrc": "2726:15:10",
																	"nodeType": "YulIdentifier",
																	"src": "2726:15:10"
																},
																"nativeSrc": "2726:65:10",
																"nodeType": "YulFunctionCall",
																"src": "2726:65:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "2717:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "2717:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "2807:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "2807:5:10"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "2814:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "2814:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2800:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2800:6:10"
																},
																"nativeSrc": "2800:21:10",
																"nodeType": "YulFunctionCall",
																"src": "2800:21:10"
															},
															"nativeSrc": "2800:21:10",
															"nodeType": "YulExpressionStatement",
															"src": "2800:21:10"
														},
														{
															"nativeSrc": "2830:27:10",
															"nodeType": "YulVariableDeclaration",
															"src": "2830:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "2845:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "2845:5:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2852:4:10",
																		"nodeType": "YulLiteral",
																		"src": "2852:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2841:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "2841:3:10"
																},
																"nativeSrc": "2841:16:10",
																"nodeType": "YulFunctionCall",
																"src": "2841:16:10"
															},
															"variables": [
																{
																	"name": "dst",
																	"nativeSrc": "2834:3:10",
																	"nodeType": "YulTypedName",
																	"src": "2834:3:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2895:83:10",
																"nodeType": "YulBlock",
																"src": "2895:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nativeSrc": "2897:77:10",
																				"nodeType": "YulIdentifier",
																				"src": "2897:77:10"
																			},
																			"nativeSrc": "2897:79:10",
																			"nodeType": "YulFunctionCall",
																			"src": "2897:79:10"
																		},
																		"nativeSrc": "2897:79:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "2897:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nativeSrc": "2876:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "2876:3:10"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "2881:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "2881:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2872:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "2872:3:10"
																		},
																		"nativeSrc": "2872:16:10",
																		"nodeType": "YulFunctionCall",
																		"src": "2872:16:10"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "2890:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "2890:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2869:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "2869:2:10"
																},
																"nativeSrc": "2869:25:10",
																"nodeType": "YulFunctionCall",
																"src": "2869:25:10"
															},
															"nativeSrc": "2866:112:10",
															"nodeType": "YulIf",
															"src": "2866:112:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "3024:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "3024:3:10"
																	},
																	{
																		"name": "dst",
																		"nativeSrc": "3029:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "3029:3:10"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3034:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "3034:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory_with_cleanup",
																	"nativeSrc": "2987:36:10",
																	"nodeType": "YulIdentifier",
																	"src": "2987:36:10"
																},
																"nativeSrc": "2987:54:10",
																"nodeType": "YulFunctionCall",
																"src": "2987:54:10"
															},
															"nativeSrc": "2987:54:10",
															"nodeType": "YulExpressionStatement",
															"src": "2987:54:10"
														}
													]
												},
												"name": "abi_decode_available_length_t_bytes_memory_ptr",
												"nativeSrc": "2624:423:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "2680:3:10",
														"nodeType": "YulTypedName",
														"src": "2680:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "2685:6:10",
														"nodeType": "YulTypedName",
														"src": "2685:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2693:3:10",
														"nodeType": "YulTypedName",
														"src": "2693:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "2701:5:10",
														"nodeType": "YulTypedName",
														"src": "2701:5:10",
														"type": ""
													}
												],
												"src": "2624:423:10"
											},
											{
												"body": {
													"nativeSrc": "3127:277:10",
													"nodeType": "YulBlock",
													"src": "3127:277:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "3176:83:10",
																"nodeType": "YulBlock",
																"src": "3176:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nativeSrc": "3178:77:10",
																				"nodeType": "YulIdentifier",
																				"src": "3178:77:10"
																			},
																			"nativeSrc": "3178:79:10",
																			"nodeType": "YulFunctionCall",
																			"src": "3178:79:10"
																		},
																		"nativeSrc": "3178:79:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "3178:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "3155:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "3155:6:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3163:4:10",
																						"nodeType": "YulLiteral",
																						"src": "3163:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3151:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "3151:3:10"
																				},
																				"nativeSrc": "3151:17:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3151:17:10"
																			},
																			{
																				"name": "end",
																				"nativeSrc": "3170:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "3170:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "3147:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3147:3:10"
																		},
																		"nativeSrc": "3147:27:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3147:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3140:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "3140:6:10"
																},
																"nativeSrc": "3140:35:10",
																"nodeType": "YulFunctionCall",
																"src": "3140:35:10"
															},
															"nativeSrc": "3137:122:10",
															"nodeType": "YulIf",
															"src": "3137:122:10"
														},
														{
															"nativeSrc": "3268:34:10",
															"nodeType": "YulVariableDeclaration",
															"src": "3268:34:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "3295:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "3295:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3282:12:10",
																	"nodeType": "YulIdentifier",
																	"src": "3282:12:10"
																},
																"nativeSrc": "3282:20:10",
																"nodeType": "YulFunctionCall",
																"src": "3282:20:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "3272:6:10",
																	"nodeType": "YulTypedName",
																	"src": "3272:6:10",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3311:87:10",
															"nodeType": "YulAssignment",
															"src": "3311:87:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "3371:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "3371:6:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3379:4:10",
																				"nodeType": "YulLiteral",
																				"src": "3379:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3367:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3367:3:10"
																		},
																		"nativeSrc": "3367:17:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3367:17:10"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3386:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "3386:6:10"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "3394:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "3394:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_bytes_memory_ptr",
																	"nativeSrc": "3320:46:10",
																	"nodeType": "YulIdentifier",
																	"src": "3320:46:10"
																},
																"nativeSrc": "3320:78:10",
																"nodeType": "YulFunctionCall",
																"src": "3320:78:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "3311:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "3311:5:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes_memory_ptr",
												"nativeSrc": "3066:338:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "3105:6:10",
														"nodeType": "YulTypedName",
														"src": "3105:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "3113:3:10",
														"nodeType": "YulTypedName",
														"src": "3113:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "3121:5:10",
														"nodeType": "YulTypedName",
														"src": "3121:5:10",
														"type": ""
													}
												],
												"src": "3066:338:10"
											},
											{
												"body": {
													"nativeSrc": "3536:817:10",
													"nodeType": "YulBlock",
													"src": "3536:817:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "3583:83:10",
																"nodeType": "YulBlock",
																"src": "3583:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3585:77:10",
																				"nodeType": "YulIdentifier",
																				"src": "3585:77:10"
																			},
																			"nativeSrc": "3585:79:10",
																			"nodeType": "YulFunctionCall",
																			"src": "3585:79:10"
																		},
																		"nativeSrc": "3585:79:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "3585:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3557:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "3557:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3566:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "3566:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3553:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3553:3:10"
																		},
																		"nativeSrc": "3553:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3553:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3578:3:10",
																		"nodeType": "YulLiteral",
																		"src": "3578:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3549:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "3549:3:10"
																},
																"nativeSrc": "3549:33:10",
																"nodeType": "YulFunctionCall",
																"src": "3549:33:10"
															},
															"nativeSrc": "3546:120:10",
															"nodeType": "YulIf",
															"src": "3546:120:10"
														},
														{
															"nativeSrc": "3676:117:10",
															"nodeType": "YulBlock",
															"src": "3676:117:10",
															"statements": [
																{
																	"nativeSrc": "3691:15:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3691:15:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3705:1:10",
																		"nodeType": "YulLiteral",
																		"src": "3705:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3695:6:10",
																			"nodeType": "YulTypedName",
																			"src": "3695:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3720:63:10",
																	"nodeType": "YulAssignment",
																	"src": "3720:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3755:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "3755:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3766:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "3766:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3751:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "3751:3:10"
																				},
																				"nativeSrc": "3751:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3751:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3775:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "3775:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "3730:20:10",
																			"nodeType": "YulIdentifier",
																			"src": "3730:20:10"
																		},
																		"nativeSrc": "3730:53:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3730:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3720:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "3720:6:10"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "3803:118:10",
															"nodeType": "YulBlock",
															"src": "3803:118:10",
															"statements": [
																{
																	"nativeSrc": "3818:16:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3818:16:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3832:2:10",
																		"nodeType": "YulLiteral",
																		"src": "3832:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3822:6:10",
																			"nodeType": "YulTypedName",
																			"src": "3822:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3848:63:10",
																	"nodeType": "YulAssignment",
																	"src": "3848:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3883:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "3883:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3894:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "3894:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3879:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "3879:3:10"
																				},
																				"nativeSrc": "3879:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3879:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3903:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "3903:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "3858:20:10",
																			"nodeType": "YulIdentifier",
																			"src": "3858:20:10"
																		},
																		"nativeSrc": "3858:53:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3858:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "3848:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "3848:6:10"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "3931:118:10",
															"nodeType": "YulBlock",
															"src": "3931:118:10",
															"statements": [
																{
																	"nativeSrc": "3946:16:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3946:16:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3960:2:10",
																		"nodeType": "YulLiteral",
																		"src": "3960:2:10",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3950:6:10",
																			"nodeType": "YulTypedName",
																			"src": "3950:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3976:63:10",
																	"nodeType": "YulAssignment",
																	"src": "3976:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4011:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "4011:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4022:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "4022:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4007:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "4007:3:10"
																				},
																				"nativeSrc": "4007:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "4007:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4031:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "4031:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "3986:20:10",
																			"nodeType": "YulIdentifier",
																			"src": "3986:20:10"
																		},
																		"nativeSrc": "3986:53:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3986:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "3976:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "3976:6:10"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4059:287:10",
															"nodeType": "YulBlock",
															"src": "4059:287:10",
															"statements": [
																{
																	"nativeSrc": "4074:46:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4074:46:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4105:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "4105:9:10"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4116:2:10",
																						"nodeType": "YulLiteral",
																						"src": "4116:2:10",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4101:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "4101:3:10"
																				},
																				"nativeSrc": "4101:18:10",
																				"nodeType": "YulFunctionCall",
																				"src": "4101:18:10"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nativeSrc": "4088:12:10",
																			"nodeType": "YulIdentifier",
																			"src": "4088:12:10"
																		},
																		"nativeSrc": "4088:32:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4088:32:10"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4078:6:10",
																			"nodeType": "YulTypedName",
																			"src": "4078:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nativeSrc": "4167:83:10",
																		"nodeType": "YulBlock",
																		"src": "4167:83:10",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nativeSrc": "4169:77:10",
																						"nodeType": "YulIdentifier",
																						"src": "4169:77:10"
																					},
																					"nativeSrc": "4169:79:10",
																					"nodeType": "YulFunctionCall",
																					"src": "4169:79:10"
																				},
																				"nativeSrc": "4169:79:10",
																				"nodeType": "YulExpressionStatement",
																				"src": "4169:79:10"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "4139:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "4139:6:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4147:18:10",
																				"nodeType": "YulLiteral",
																				"src": "4147:18:10",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "4136:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "4136:2:10"
																		},
																		"nativeSrc": "4136:30:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4136:30:10"
																	},
																	"nativeSrc": "4133:117:10",
																	"nodeType": "YulIf",
																	"src": "4133:117:10"
																},
																{
																	"nativeSrc": "4264:72:10",
																	"nodeType": "YulAssignment",
																	"src": "4264:72:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4308:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "4308:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4319:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "4319:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4304:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "4304:3:10"
																				},
																				"nativeSrc": "4304:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "4304:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4328:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "4328:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes_memory_ptr",
																			"nativeSrc": "4274:29:10",
																			"nodeType": "YulIdentifier",
																			"src": "4274:29:10"
																		},
																		"nativeSrc": "4274:62:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4274:62:10"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nativeSrc": "4264:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "4264:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nativeSrc": "3410:943:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3482:9:10",
														"nodeType": "YulTypedName",
														"src": "3482:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3493:7:10",
														"nodeType": "YulTypedName",
														"src": "3493:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3505:6:10",
														"nodeType": "YulTypedName",
														"src": "3505:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3513:6:10",
														"nodeType": "YulTypedName",
														"src": "3513:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3521:6:10",
														"nodeType": "YulTypedName",
														"src": "3521:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "3529:6:10",
														"nodeType": "YulTypedName",
														"src": "3529:6:10",
														"type": ""
													}
												],
												"src": "3410:943:10"
											},
											{
												"body": {
													"nativeSrc": "4403:105:10",
													"nodeType": "YulBlock",
													"src": "4403:105:10",
													"statements": [
														{
															"nativeSrc": "4413:89:10",
															"nodeType": "YulAssignment",
															"src": "4413:89:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4428:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "4428:5:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4435:66:10",
																		"nodeType": "YulLiteral",
																		"src": "4435:66:10",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4424:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "4424:3:10"
																},
																"nativeSrc": "4424:78:10",
																"nodeType": "YulFunctionCall",
																"src": "4424:78:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4413:7:10",
																	"nodeType": "YulIdentifier",
																	"src": "4413:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nativeSrc": "4359:149:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4385:5:10",
														"nodeType": "YulTypedName",
														"src": "4385:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4395:7:10",
														"nodeType": "YulTypedName",
														"src": "4395:7:10",
														"type": ""
													}
												],
												"src": "4359:149:10"
											},
											{
												"body": {
													"nativeSrc": "4577:52:10",
													"nodeType": "YulBlock",
													"src": "4577:52:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4594:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "4594:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4616:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "4616:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes4",
																			"nativeSrc": "4599:16:10",
																			"nodeType": "YulIdentifier",
																			"src": "4599:16:10"
																		},
																		"nativeSrc": "4599:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4599:23:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4587:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "4587:6:10"
																},
																"nativeSrc": "4587:36:10",
																"nodeType": "YulFunctionCall",
																"src": "4587:36:10"
															},
															"nativeSrc": "4587:36:10",
															"nodeType": "YulExpressionStatement",
															"src": "4587:36:10"
														}
													]
												},
												"name": "abi_encode_t_bytes4_to_t_bytes4_fromStack",
												"nativeSrc": "4514:115:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4565:5:10",
														"nodeType": "YulTypedName",
														"src": "4565:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4572:3:10",
														"nodeType": "YulTypedName",
														"src": "4572:3:10",
														"type": ""
													}
												],
												"src": "4514:115:10"
											},
											{
												"body": {
													"nativeSrc": "4731:122:10",
													"nodeType": "YulBlock",
													"src": "4731:122:10",
													"statements": [
														{
															"nativeSrc": "4741:26:10",
															"nodeType": "YulAssignment",
															"src": "4741:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4753:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "4753:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4764:2:10",
																		"nodeType": "YulLiteral",
																		"src": "4764:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4749:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "4749:3:10"
																},
																"nativeSrc": "4749:18:10",
																"nodeType": "YulFunctionCall",
																"src": "4749:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4741:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "4741:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "4819:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "4819:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4832:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "4832:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4843:1:10",
																				"nodeType": "YulLiteral",
																				"src": "4843:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4828:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "4828:3:10"
																		},
																		"nativeSrc": "4828:17:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4828:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes4_to_t_bytes4_fromStack",
																	"nativeSrc": "4777:41:10",
																	"nodeType": "YulIdentifier",
																	"src": "4777:41:10"
																},
																"nativeSrc": "4777:69:10",
																"nodeType": "YulFunctionCall",
																"src": "4777:69:10"
															},
															"nativeSrc": "4777:69:10",
															"nodeType": "YulExpressionStatement",
															"src": "4777:69:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
												"nativeSrc": "4635:218:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4703:9:10",
														"nodeType": "YulTypedName",
														"src": "4703:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4715:6:10",
														"nodeType": "YulTypedName",
														"src": "4715:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4726:4:10",
														"nodeType": "YulTypedName",
														"src": "4726:4:10",
														"type": ""
													}
												],
												"src": "4635:218:10"
											},
											{
												"body": {
													"nativeSrc": "4925:263:10",
													"nodeType": "YulBlock",
													"src": "4925:263:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "4971:83:10",
																"nodeType": "YulBlock",
																"src": "4971:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "4973:77:10",
																				"nodeType": "YulIdentifier",
																				"src": "4973:77:10"
																			},
																			"nativeSrc": "4973:79:10",
																			"nodeType": "YulFunctionCall",
																			"src": "4973:79:10"
																		},
																		"nativeSrc": "4973:79:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "4973:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4946:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "4946:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4955:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "4955:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4942:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "4942:3:10"
																		},
																		"nativeSrc": "4942:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4942:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4967:2:10",
																		"nodeType": "YulLiteral",
																		"src": "4967:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4938:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "4938:3:10"
																},
																"nativeSrc": "4938:32:10",
																"nodeType": "YulFunctionCall",
																"src": "4938:32:10"
															},
															"nativeSrc": "4935:119:10",
															"nodeType": "YulIf",
															"src": "4935:119:10"
														},
														{
															"nativeSrc": "5064:117:10",
															"nodeType": "YulBlock",
															"src": "5064:117:10",
															"statements": [
																{
																	"nativeSrc": "5079:15:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5079:15:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5093:1:10",
																		"nodeType": "YulLiteral",
																		"src": "5093:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5083:6:10",
																			"nodeType": "YulTypedName",
																			"src": "5083:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5108:63:10",
																	"nodeType": "YulAssignment",
																	"src": "5108:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5143:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "5143:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5154:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "5154:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5139:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "5139:3:10"
																				},
																				"nativeSrc": "5139:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "5139:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5163:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "5163:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "5118:20:10",
																			"nodeType": "YulIdentifier",
																			"src": "5118:20:10"
																		},
																		"nativeSrc": "5118:53:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5118:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5108:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "5108:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "4859:329:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4895:9:10",
														"nodeType": "YulTypedName",
														"src": "4895:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4906:7:10",
														"nodeType": "YulTypedName",
														"src": "4906:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4918:6:10",
														"nodeType": "YulTypedName",
														"src": "4918:6:10",
														"type": ""
													}
												],
												"src": "4859:329:10"
											},
											{
												"body": {
													"nativeSrc": "5277:391:10",
													"nodeType": "YulBlock",
													"src": "5277:391:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "5323:83:10",
																"nodeType": "YulBlock",
																"src": "5323:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5325:77:10",
																				"nodeType": "YulIdentifier",
																				"src": "5325:77:10"
																			},
																			"nativeSrc": "5325:79:10",
																			"nodeType": "YulFunctionCall",
																			"src": "5325:79:10"
																		},
																		"nativeSrc": "5325:79:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "5325:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5298:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "5298:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5307:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "5307:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5294:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "5294:3:10"
																		},
																		"nativeSrc": "5294:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5294:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5319:2:10",
																		"nodeType": "YulLiteral",
																		"src": "5319:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5290:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "5290:3:10"
																},
																"nativeSrc": "5290:32:10",
																"nodeType": "YulFunctionCall",
																"src": "5290:32:10"
															},
															"nativeSrc": "5287:119:10",
															"nodeType": "YulIf",
															"src": "5287:119:10"
														},
														{
															"nativeSrc": "5416:117:10",
															"nodeType": "YulBlock",
															"src": "5416:117:10",
															"statements": [
																{
																	"nativeSrc": "5431:15:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5431:15:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5445:1:10",
																		"nodeType": "YulLiteral",
																		"src": "5445:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5435:6:10",
																			"nodeType": "YulTypedName",
																			"src": "5435:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5460:63:10",
																	"nodeType": "YulAssignment",
																	"src": "5460:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5495:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "5495:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5506:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "5506:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5491:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "5491:3:10"
																				},
																				"nativeSrc": "5491:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "5491:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5515:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "5515:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5470:20:10",
																			"nodeType": "YulIdentifier",
																			"src": "5470:20:10"
																		},
																		"nativeSrc": "5470:53:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5470:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5460:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "5460:6:10"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "5543:118:10",
															"nodeType": "YulBlock",
															"src": "5543:118:10",
															"statements": [
																{
																	"nativeSrc": "5558:16:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5558:16:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5572:2:10",
																		"nodeType": "YulLiteral",
																		"src": "5572:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5562:6:10",
																			"nodeType": "YulTypedName",
																			"src": "5562:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5588:63:10",
																	"nodeType": "YulAssignment",
																	"src": "5588:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5623:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "5623:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5634:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "5634:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5619:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "5619:3:10"
																				},
																				"nativeSrc": "5619:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "5619:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5643:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "5643:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "5598:20:10",
																			"nodeType": "YulIdentifier",
																			"src": "5598:20:10"
																		},
																		"nativeSrc": "5598:53:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5598:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "5588:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "5588:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "5194:474:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5239:9:10",
														"nodeType": "YulTypedName",
														"src": "5239:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5250:7:10",
														"nodeType": "YulTypedName",
														"src": "5250:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5262:6:10",
														"nodeType": "YulTypedName",
														"src": "5262:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5270:6:10",
														"nodeType": "YulTypedName",
														"src": "5270:6:10",
														"type": ""
													}
												],
												"src": "5194:474:10"
											},
											{
												"body": {
													"nativeSrc": "5739:53:10",
													"nodeType": "YulBlock",
													"src": "5739:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5756:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "5756:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5779:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "5779:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "5761:17:10",
																			"nodeType": "YulIdentifier",
																			"src": "5761:17:10"
																		},
																		"nativeSrc": "5761:24:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5761:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5749:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "5749:6:10"
																},
																"nativeSrc": "5749:37:10",
																"nodeType": "YulFunctionCall",
																"src": "5749:37:10"
															},
															"nativeSrc": "5749:37:10",
															"nodeType": "YulExpressionStatement",
															"src": "5749:37:10"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "5674:118:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5727:5:10",
														"nodeType": "YulTypedName",
														"src": "5727:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "5734:3:10",
														"nodeType": "YulTypedName",
														"src": "5734:3:10",
														"type": ""
													}
												],
												"src": "5674:118:10"
											},
											{
												"body": {
													"nativeSrc": "5896:124:10",
													"nodeType": "YulBlock",
													"src": "5896:124:10",
													"statements": [
														{
															"nativeSrc": "5906:26:10",
															"nodeType": "YulAssignment",
															"src": "5906:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5918:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "5918:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5929:2:10",
																		"nodeType": "YulLiteral",
																		"src": "5929:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5914:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "5914:3:10"
																},
																"nativeSrc": "5914:18:10",
																"nodeType": "YulFunctionCall",
																"src": "5914:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5906:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "5906:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5986:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "5986:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5999:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "5999:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6010:1:10",
																				"nodeType": "YulLiteral",
																				"src": "6010:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5995:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "5995:3:10"
																		},
																		"nativeSrc": "5995:17:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5995:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "5942:43:10",
																	"nodeType": "YulIdentifier",
																	"src": "5942:43:10"
																},
																"nativeSrc": "5942:71:10",
																"nodeType": "YulFunctionCall",
																"src": "5942:71:10"
															},
															"nativeSrc": "5942:71:10",
															"nodeType": "YulExpressionStatement",
															"src": "5942:71:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "5798:222:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5868:9:10",
														"nodeType": "YulTypedName",
														"src": "5868:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5880:6:10",
														"nodeType": "YulTypedName",
														"src": "5880:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5891:4:10",
														"nodeType": "YulTypedName",
														"src": "5891:4:10",
														"type": ""
													}
												],
												"src": "5798:222:10"
											},
											{
												"body": {
													"nativeSrc": "6089:80:10",
													"nodeType": "YulBlock",
													"src": "6089:80:10",
													"statements": [
														{
															"nativeSrc": "6099:22:10",
															"nodeType": "YulAssignment",
															"src": "6099:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "6114:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "6114:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "6108:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "6108:5:10"
																},
																"nativeSrc": "6108:13:10",
																"nodeType": "YulFunctionCall",
																"src": "6108:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "6099:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "6099:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6157:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "6157:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "6130:26:10",
																	"nodeType": "YulIdentifier",
																	"src": "6130:26:10"
																},
																"nativeSrc": "6130:33:10",
																"nodeType": "YulFunctionCall",
																"src": "6130:33:10"
															},
															"nativeSrc": "6130:33:10",
															"nodeType": "YulExpressionStatement",
															"src": "6130:33:10"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nativeSrc": "6026:143:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "6067:6:10",
														"nodeType": "YulTypedName",
														"src": "6067:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "6075:3:10",
														"nodeType": "YulTypedName",
														"src": "6075:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "6083:5:10",
														"nodeType": "YulTypedName",
														"src": "6083:5:10",
														"type": ""
													}
												],
												"src": "6026:143:10"
											},
											{
												"body": {
													"nativeSrc": "6252:274:10",
													"nodeType": "YulBlock",
													"src": "6252:274:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "6298:83:10",
																"nodeType": "YulBlock",
																"src": "6298:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "6300:77:10",
																				"nodeType": "YulIdentifier",
																				"src": "6300:77:10"
																			},
																			"nativeSrc": "6300:79:10",
																			"nodeType": "YulFunctionCall",
																			"src": "6300:79:10"
																		},
																		"nativeSrc": "6300:79:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "6300:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6273:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "6273:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "6282:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "6282:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "6269:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "6269:3:10"
																		},
																		"nativeSrc": "6269:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "6269:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6294:2:10",
																		"nodeType": "YulLiteral",
																		"src": "6294:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "6265:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "6265:3:10"
																},
																"nativeSrc": "6265:32:10",
																"nodeType": "YulFunctionCall",
																"src": "6265:32:10"
															},
															"nativeSrc": "6262:119:10",
															"nodeType": "YulIf",
															"src": "6262:119:10"
														},
														{
															"nativeSrc": "6391:128:10",
															"nodeType": "YulBlock",
															"src": "6391:128:10",
															"statements": [
																{
																	"nativeSrc": "6406:15:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6406:15:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6420:1:10",
																		"nodeType": "YulLiteral",
																		"src": "6420:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6410:6:10",
																			"nodeType": "YulTypedName",
																			"src": "6410:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6435:74:10",
																	"nodeType": "YulAssignment",
																	"src": "6435:74:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6481:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "6481:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6492:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "6492:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6477:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "6477:3:10"
																				},
																				"nativeSrc": "6477:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "6477:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6501:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "6501:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nativeSrc": "6445:31:10",
																			"nodeType": "YulIdentifier",
																			"src": "6445:31:10"
																		},
																		"nativeSrc": "6445:64:10",
																		"nodeType": "YulFunctionCall",
																		"src": "6445:64:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "6435:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "6435:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nativeSrc": "6175:351:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6222:9:10",
														"nodeType": "YulTypedName",
														"src": "6222:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "6233:7:10",
														"nodeType": "YulTypedName",
														"src": "6233:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "6245:6:10",
														"nodeType": "YulTypedName",
														"src": "6245:6:10",
														"type": ""
													}
												],
												"src": "6175:351:10"
											},
											{
												"body": {
													"nativeSrc": "6628:73:10",
													"nodeType": "YulBlock",
													"src": "6628:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6645:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "6645:3:10"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "6650:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "6650:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6638:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "6638:6:10"
																},
																"nativeSrc": "6638:19:10",
																"nodeType": "YulFunctionCall",
																"src": "6638:19:10"
															},
															"nativeSrc": "6638:19:10",
															"nodeType": "YulExpressionStatement",
															"src": "6638:19:10"
														},
														{
															"nativeSrc": "6666:29:10",
															"nodeType": "YulAssignment",
															"src": "6666:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6685:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "6685:3:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6690:4:10",
																		"nodeType": "YulLiteral",
																		"src": "6690:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6681:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "6681:3:10"
																},
																"nativeSrc": "6681:14:10",
																"nodeType": "YulFunctionCall",
																"src": "6681:14:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "6666:11:10",
																	"nodeType": "YulIdentifier",
																	"src": "6666:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "6532:169:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "6600:3:10",
														"nodeType": "YulTypedName",
														"src": "6600:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "6605:6:10",
														"nodeType": "YulTypedName",
														"src": "6605:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "6616:11:10",
														"nodeType": "YulTypedName",
														"src": "6616:11:10",
														"type": ""
													}
												],
												"src": "6532:169:10"
											},
											{
												"body": {
													"nativeSrc": "6813:67:10",
													"nodeType": "YulBlock",
													"src": "6813:67:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "6835:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "6835:6:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6843:1:10",
																				"nodeType": "YulLiteral",
																				"src": "6843:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6831:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "6831:3:10"
																		},
																		"nativeSrc": "6831:14:10",
																		"nodeType": "YulFunctionCall",
																		"src": "6831:14:10"
																	},
																	{
																		"hexValue": "596f75277265206e6f74206f776e2074686973204e4654",
																		"kind": "string",
																		"nativeSrc": "6847:25:10",
																		"nodeType": "YulLiteral",
																		"src": "6847:25:10",
																		"type": "",
																		"value": "You're not own this NFT"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6824:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "6824:6:10"
																},
																"nativeSrc": "6824:49:10",
																"nodeType": "YulFunctionCall",
																"src": "6824:49:10"
															},
															"nativeSrc": "6824:49:10",
															"nodeType": "YulExpressionStatement",
															"src": "6824:49:10"
														}
													]
												},
												"name": "store_literal_in_memory_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c",
												"nativeSrc": "6707:173:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "6805:6:10",
														"nodeType": "YulTypedName",
														"src": "6805:6:10",
														"type": ""
													}
												],
												"src": "6707:173:10"
											},
											{
												"body": {
													"nativeSrc": "7032:220:10",
													"nodeType": "YulBlock",
													"src": "7032:220:10",
													"statements": [
														{
															"nativeSrc": "7042:74:10",
															"nodeType": "YulAssignment",
															"src": "7042:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7108:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "7108:3:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7113:2:10",
																		"nodeType": "YulLiteral",
																		"src": "7113:2:10",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "7049:58:10",
																	"nodeType": "YulIdentifier",
																	"src": "7049:58:10"
																},
																"nativeSrc": "7049:67:10",
																"nodeType": "YulFunctionCall",
																"src": "7049:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "7042:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "7042:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7214:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "7214:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c",
																	"nativeSrc": "7125:88:10",
																	"nodeType": "YulIdentifier",
																	"src": "7125:88:10"
																},
																"nativeSrc": "7125:93:10",
																"nodeType": "YulFunctionCall",
																"src": "7125:93:10"
															},
															"nativeSrc": "7125:93:10",
															"nodeType": "YulExpressionStatement",
															"src": "7125:93:10"
														},
														{
															"nativeSrc": "7227:19:10",
															"nodeType": "YulAssignment",
															"src": "7227:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7238:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "7238:3:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7243:2:10",
																		"nodeType": "YulLiteral",
																		"src": "7243:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7234:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "7234:3:10"
																},
																"nativeSrc": "7234:12:10",
																"nodeType": "YulFunctionCall",
																"src": "7234:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "7227:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "7227:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "6886:366:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "7020:3:10",
														"nodeType": "YulTypedName",
														"src": "7020:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "7028:3:10",
														"nodeType": "YulTypedName",
														"src": "7028:3:10",
														"type": ""
													}
												],
												"src": "6886:366:10"
											},
											{
												"body": {
													"nativeSrc": "7429:248:10",
													"nodeType": "YulBlock",
													"src": "7429:248:10",
													"statements": [
														{
															"nativeSrc": "7439:26:10",
															"nodeType": "YulAssignment",
															"src": "7439:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7451:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "7451:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7462:2:10",
																		"nodeType": "YulLiteral",
																		"src": "7462:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7447:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "7447:3:10"
																},
																"nativeSrc": "7447:18:10",
																"nodeType": "YulFunctionCall",
																"src": "7447:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7439:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "7439:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7486:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "7486:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7497:1:10",
																				"nodeType": "YulLiteral",
																				"src": "7497:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7482:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "7482:3:10"
																		},
																		"nativeSrc": "7482:17:10",
																		"nodeType": "YulFunctionCall",
																		"src": "7482:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "7505:4:10",
																				"nodeType": "YulIdentifier",
																				"src": "7505:4:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "7511:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "7511:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7501:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "7501:3:10"
																		},
																		"nativeSrc": "7501:20:10",
																		"nodeType": "YulFunctionCall",
																		"src": "7501:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7475:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "7475:6:10"
																},
																"nativeSrc": "7475:47:10",
																"nodeType": "YulFunctionCall",
																"src": "7475:47:10"
															},
															"nativeSrc": "7475:47:10",
															"nodeType": "YulExpressionStatement",
															"src": "7475:47:10"
														},
														{
															"nativeSrc": "7531:139:10",
															"nodeType": "YulAssignment",
															"src": "7531:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "7665:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "7665:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "7539:124:10",
																	"nodeType": "YulIdentifier",
																	"src": "7539:124:10"
																},
																"nativeSrc": "7539:131:10",
																"nodeType": "YulFunctionCall",
																"src": "7539:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7531:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "7531:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "7258:419:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7409:9:10",
														"nodeType": "YulTypedName",
														"src": "7409:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7424:4:10",
														"nodeType": "YulTypedName",
														"src": "7424:4:10",
														"type": ""
													}
												],
												"src": "7258:419:10"
											},
											{
												"body": {
													"nativeSrc": "7748:53:10",
													"nodeType": "YulBlock",
													"src": "7748:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7765:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "7765:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "7788:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "7788:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "7770:17:10",
																			"nodeType": "YulIdentifier",
																			"src": "7770:17:10"
																		},
																		"nativeSrc": "7770:24:10",
																		"nodeType": "YulFunctionCall",
																		"src": "7770:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7758:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "7758:6:10"
																},
																"nativeSrc": "7758:37:10",
																"nodeType": "YulFunctionCall",
																"src": "7758:37:10"
															},
															"nativeSrc": "7758:37:10",
															"nodeType": "YulExpressionStatement",
															"src": "7758:37:10"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "7683:118:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7736:5:10",
														"nodeType": "YulTypedName",
														"src": "7736:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "7743:3:10",
														"nodeType": "YulTypedName",
														"src": "7743:3:10",
														"type": ""
													}
												],
												"src": "7683:118:10"
											},
											{
												"body": {
													"nativeSrc": "7902:73:10",
													"nodeType": "YulBlock",
													"src": "7902:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7919:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "7919:3:10"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7924:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "7924:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7912:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "7912:6:10"
																},
																"nativeSrc": "7912:19:10",
																"nodeType": "YulFunctionCall",
																"src": "7912:19:10"
															},
															"nativeSrc": "7912:19:10",
															"nodeType": "YulExpressionStatement",
															"src": "7912:19:10"
														},
														{
															"nativeSrc": "7940:29:10",
															"nodeType": "YulAssignment",
															"src": "7940:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7959:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "7959:3:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7964:4:10",
																		"nodeType": "YulLiteral",
																		"src": "7964:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7955:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "7955:3:10"
																},
																"nativeSrc": "7955:14:10",
																"nodeType": "YulFunctionCall",
																"src": "7955:14:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "7940:11:10",
																	"nodeType": "YulIdentifier",
																	"src": "7940:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
												"nativeSrc": "7807:168:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "7874:3:10",
														"nodeType": "YulTypedName",
														"src": "7874:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "7879:6:10",
														"nodeType": "YulTypedName",
														"src": "7879:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "7890:11:10",
														"nodeType": "YulTypedName",
														"src": "7890:11:10",
														"type": ""
													}
												],
												"src": "7807:168:10"
											},
											{
												"body": {
													"nativeSrc": "8087:8:10",
													"nodeType": "YulBlock",
													"src": "8087:8:10",
													"statements": []
												},
												"name": "store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
												"nativeSrc": "7981:114:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "8079:6:10",
														"nodeType": "YulTypedName",
														"src": "8079:6:10",
														"type": ""
													}
												],
												"src": "7981:114:10"
											},
											{
												"body": {
													"nativeSrc": "8246:217:10",
													"nodeType": "YulBlock",
													"src": "8246:217:10",
													"statements": [
														{
															"nativeSrc": "8256:72:10",
															"nodeType": "YulAssignment",
															"src": "8256:72:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8321:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "8321:3:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8326:1:10",
																		"nodeType": "YulLiteral",
																		"src": "8326:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
																	"nativeSrc": "8263:57:10",
																	"nodeType": "YulIdentifier",
																	"src": "8263:57:10"
																},
																"nativeSrc": "8263:65:10",
																"nodeType": "YulFunctionCall",
																"src": "8263:65:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "8256:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "8256:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8426:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "8426:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"nativeSrc": "8337:88:10",
																	"nodeType": "YulIdentifier",
																	"src": "8337:88:10"
																},
																"nativeSrc": "8337:93:10",
																"nodeType": "YulFunctionCall",
																"src": "8337:93:10"
															},
															"nativeSrc": "8337:93:10",
															"nodeType": "YulExpressionStatement",
															"src": "8337:93:10"
														},
														{
															"nativeSrc": "8439:18:10",
															"nodeType": "YulAssignment",
															"src": "8439:18:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8450:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "8450:3:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8455:1:10",
																		"nodeType": "YulLiteral",
																		"src": "8455:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8446:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "8446:3:10"
																},
																"nativeSrc": "8446:11:10",
																"nodeType": "YulFunctionCall",
																"src": "8446:11:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "8439:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "8439:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_fromStack",
												"nativeSrc": "8101:362:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "8234:3:10",
														"nodeType": "YulTypedName",
														"src": "8234:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "8242:3:10",
														"nodeType": "YulTypedName",
														"src": "8242:3:10",
														"type": ""
													}
												],
												"src": "8101:362:10"
											},
											{
												"body": {
													"nativeSrc": "8723:494:10",
													"nodeType": "YulBlock",
													"src": "8723:494:10",
													"statements": [
														{
															"nativeSrc": "8733:27:10",
															"nodeType": "YulAssignment",
															"src": "8733:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8745:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "8745:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8756:3:10",
																		"nodeType": "YulLiteral",
																		"src": "8756:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8741:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "8741:3:10"
																},
																"nativeSrc": "8741:19:10",
																"nodeType": "YulFunctionCall",
																"src": "8741:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8733:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "8733:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "8814:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "8814:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8827:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "8827:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8838:1:10",
																				"nodeType": "YulLiteral",
																				"src": "8838:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8823:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "8823:3:10"
																		},
																		"nativeSrc": "8823:17:10",
																		"nodeType": "YulFunctionCall",
																		"src": "8823:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "8770:43:10",
																	"nodeType": "YulIdentifier",
																	"src": "8770:43:10"
																},
																"nativeSrc": "8770:71:10",
																"nodeType": "YulFunctionCall",
																"src": "8770:71:10"
															},
															"nativeSrc": "8770:71:10",
															"nodeType": "YulExpressionStatement",
															"src": "8770:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "8895:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "8895:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8908:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "8908:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8919:2:10",
																				"nodeType": "YulLiteral",
																				"src": "8919:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8904:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "8904:3:10"
																		},
																		"nativeSrc": "8904:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "8904:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "8851:43:10",
																	"nodeType": "YulIdentifier",
																	"src": "8851:43:10"
																},
																"nativeSrc": "8851:72:10",
																"nodeType": "YulFunctionCall",
																"src": "8851:72:10"
															},
															"nativeSrc": "8851:72:10",
															"nodeType": "YulExpressionStatement",
															"src": "8851:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "8977:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "8977:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8990:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "8990:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9001:2:10",
																				"nodeType": "YulLiteral",
																				"src": "9001:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8986:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "8986:3:10"
																		},
																		"nativeSrc": "8986:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "8986:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "8933:43:10",
																	"nodeType": "YulIdentifier",
																	"src": "8933:43:10"
																},
																"nativeSrc": "8933:72:10",
																"nodeType": "YulFunctionCall",
																"src": "8933:72:10"
															},
															"nativeSrc": "8933:72:10",
															"nodeType": "YulExpressionStatement",
															"src": "8933:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9026:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "9026:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9037:2:10",
																				"nodeType": "YulLiteral",
																				"src": "9037:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9022:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "9022:3:10"
																		},
																		"nativeSrc": "9022:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "9022:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "9046:4:10",
																				"nodeType": "YulIdentifier",
																				"src": "9046:4:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "9052:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "9052:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "9042:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "9042:3:10"
																		},
																		"nativeSrc": "9042:20:10",
																		"nodeType": "YulFunctionCall",
																		"src": "9042:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9015:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "9015:6:10"
																},
																"nativeSrc": "9015:48:10",
																"nodeType": "YulFunctionCall",
																"src": "9015:48:10"
															},
															"nativeSrc": "9015:48:10",
															"nodeType": "YulExpressionStatement",
															"src": "9015:48:10"
														},
														{
															"nativeSrc": "9072:138:10",
															"nodeType": "YulAssignment",
															"src": "9072:138:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "9205:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "9205:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_fromStack",
																	"nativeSrc": "9080:123:10",
																	"nodeType": "YulIdentifier",
																	"src": "9080:123:10"
																},
																"nativeSrc": "9080:130:10",
																"nodeType": "YulFunctionCall",
																"src": "9080:130:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9072:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "9072:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nativeSrc": "8469:748:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8679:9:10",
														"nodeType": "YulTypedName",
														"src": "8679:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "8691:6:10",
														"nodeType": "YulTypedName",
														"src": "8691:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "8699:6:10",
														"nodeType": "YulTypedName",
														"src": "8699:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "8707:6:10",
														"nodeType": "YulTypedName",
														"src": "8707:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "8718:4:10",
														"nodeType": "YulTypedName",
														"src": "8718:4:10",
														"type": ""
													}
												],
												"src": "8469:748:10"
											},
											{
												"body": {
													"nativeSrc": "9349:206:10",
													"nodeType": "YulBlock",
													"src": "9349:206:10",
													"statements": [
														{
															"nativeSrc": "9359:26:10",
															"nodeType": "YulAssignment",
															"src": "9359:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9371:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "9371:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9382:2:10",
																		"nodeType": "YulLiteral",
																		"src": "9382:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9367:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "9367:3:10"
																},
																"nativeSrc": "9367:18:10",
																"nodeType": "YulFunctionCall",
																"src": "9367:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9359:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "9359:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "9439:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "9439:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9452:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "9452:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9463:1:10",
																				"nodeType": "YulLiteral",
																				"src": "9463:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9448:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "9448:3:10"
																		},
																		"nativeSrc": "9448:17:10",
																		"nodeType": "YulFunctionCall",
																		"src": "9448:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "9395:43:10",
																	"nodeType": "YulIdentifier",
																	"src": "9395:43:10"
																},
																"nativeSrc": "9395:71:10",
																"nodeType": "YulFunctionCall",
																"src": "9395:71:10"
															},
															"nativeSrc": "9395:71:10",
															"nodeType": "YulExpressionStatement",
															"src": "9395:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "9520:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "9520:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9533:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "9533:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9544:2:10",
																				"nodeType": "YulLiteral",
																				"src": "9544:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9529:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "9529:3:10"
																		},
																		"nativeSrc": "9529:18:10",
																		"nodeType": "YulFunctionCall",
																		"src": "9529:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "9476:43:10",
																	"nodeType": "YulIdentifier",
																	"src": "9476:43:10"
																},
																"nativeSrc": "9476:72:10",
																"nodeType": "YulFunctionCall",
																"src": "9476:72:10"
															},
															"nativeSrc": "9476:72:10",
															"nodeType": "YulExpressionStatement",
															"src": "9476:72:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "9223:332:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9313:9:10",
														"nodeType": "YulTypedName",
														"src": "9313:9:10",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "9325:6:10",
														"nodeType": "YulTypedName",
														"src": "9325:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9333:6:10",
														"nodeType": "YulTypedName",
														"src": "9333:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9344:4:10",
														"nodeType": "YulTypedName",
														"src": "9344:4:10",
														"type": ""
													}
												],
												"src": "9223:332:10"
											},
											{
												"body": {
													"nativeSrc": "9603:48:10",
													"nodeType": "YulBlock",
													"src": "9603:48:10",
													"statements": [
														{
															"nativeSrc": "9613:32:10",
															"nodeType": "YulAssignment",
															"src": "9613:32:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "9638:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "9638:5:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "9631:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "9631:6:10"
																		},
																		"nativeSrc": "9631:13:10",
																		"nodeType": "YulFunctionCall",
																		"src": "9631:13:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "9624:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "9624:6:10"
																},
																"nativeSrc": "9624:21:10",
																"nodeType": "YulFunctionCall",
																"src": "9624:21:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "9613:7:10",
																	"nodeType": "YulIdentifier",
																	"src": "9613:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "9561:90:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9585:5:10",
														"nodeType": "YulTypedName",
														"src": "9585:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "9595:7:10",
														"nodeType": "YulTypedName",
														"src": "9595:7:10",
														"type": ""
													}
												],
												"src": "9561:90:10"
											},
											{
												"body": {
													"nativeSrc": "9697:76:10",
													"nodeType": "YulBlock",
													"src": "9697:76:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "9751:16:10",
																"nodeType": "YulBlock",
																"src": "9751:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "9760:1:10",
																					"nodeType": "YulLiteral",
																					"src": "9760:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "9763:1:10",
																					"nodeType": "YulLiteral",
																					"src": "9763:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "9753:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "9753:6:10"
																			},
																			"nativeSrc": "9753:12:10",
																			"nodeType": "YulFunctionCall",
																			"src": "9753:12:10"
																		},
																		"nativeSrc": "9753:12:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "9753:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "9720:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "9720:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "9742:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "9742:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nativeSrc": "9727:14:10",
																					"nodeType": "YulIdentifier",
																					"src": "9727:14:10"
																				},
																				"nativeSrc": "9727:21:10",
																				"nodeType": "YulFunctionCall",
																				"src": "9727:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "9717:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "9717:2:10"
																		},
																		"nativeSrc": "9717:32:10",
																		"nodeType": "YulFunctionCall",
																		"src": "9717:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "9710:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "9710:6:10"
																},
																"nativeSrc": "9710:40:10",
																"nodeType": "YulFunctionCall",
																"src": "9710:40:10"
															},
															"nativeSrc": "9707:60:10",
															"nodeType": "YulIf",
															"src": "9707:60:10"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nativeSrc": "9657:116:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9690:5:10",
														"nodeType": "YulTypedName",
														"src": "9690:5:10",
														"type": ""
													}
												],
												"src": "9657:116:10"
											},
											{
												"body": {
													"nativeSrc": "9839:77:10",
													"nodeType": "YulBlock",
													"src": "9839:77:10",
													"statements": [
														{
															"nativeSrc": "9849:22:10",
															"nodeType": "YulAssignment",
															"src": "9849:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "9864:6:10",
																		"nodeType": "YulIdentifier",
																		"src": "9864:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "9858:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "9858:5:10"
																},
																"nativeSrc": "9858:13:10",
																"nodeType": "YulFunctionCall",
																"src": "9858:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "9849:5:10",
																	"nodeType": "YulIdentifier",
																	"src": "9849:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "9904:5:10",
																		"nodeType": "YulIdentifier",
																		"src": "9904:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nativeSrc": "9880:23:10",
																	"nodeType": "YulIdentifier",
																	"src": "9880:23:10"
																},
																"nativeSrc": "9880:30:10",
																"nodeType": "YulFunctionCall",
																"src": "9880:30:10"
															},
															"nativeSrc": "9880:30:10",
															"nodeType": "YulExpressionStatement",
															"src": "9880:30:10"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nativeSrc": "9779:137:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "9817:6:10",
														"nodeType": "YulTypedName",
														"src": "9817:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "9825:3:10",
														"nodeType": "YulTypedName",
														"src": "9825:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "9833:5:10",
														"nodeType": "YulTypedName",
														"src": "9833:5:10",
														"type": ""
													}
												],
												"src": "9779:137:10"
											},
											{
												"body": {
													"nativeSrc": "9996:271:10",
													"nodeType": "YulBlock",
													"src": "9996:271:10",
													"statements": [
														{
															"body": {
																"nativeSrc": "10042:83:10",
																"nodeType": "YulBlock",
																"src": "10042:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "10044:77:10",
																				"nodeType": "YulIdentifier",
																				"src": "10044:77:10"
																			},
																			"nativeSrc": "10044:79:10",
																			"nodeType": "YulFunctionCall",
																			"src": "10044:79:10"
																		},
																		"nativeSrc": "10044:79:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "10044:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10017:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "10017:7:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "10026:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "10026:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "10013:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "10013:3:10"
																		},
																		"nativeSrc": "10013:23:10",
																		"nodeType": "YulFunctionCall",
																		"src": "10013:23:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10038:2:10",
																		"nodeType": "YulLiteral",
																		"src": "10038:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "10009:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "10009:3:10"
																},
																"nativeSrc": "10009:32:10",
																"nodeType": "YulFunctionCall",
																"src": "10009:32:10"
															},
															"nativeSrc": "10006:119:10",
															"nodeType": "YulIf",
															"src": "10006:119:10"
														},
														{
															"nativeSrc": "10135:125:10",
															"nodeType": "YulBlock",
															"src": "10135:125:10",
															"statements": [
																{
																	"nativeSrc": "10150:15:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10150:15:10",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10164:1:10",
																		"nodeType": "YulLiteral",
																		"src": "10164:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10154:6:10",
																			"nodeType": "YulTypedName",
																			"src": "10154:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10179:71:10",
																	"nodeType": "YulAssignment",
																	"src": "10179:71:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10222:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "10222:9:10"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10233:6:10",
																						"nodeType": "YulIdentifier",
																						"src": "10233:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10218:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "10218:3:10"
																				},
																				"nativeSrc": "10218:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "10218:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10242:7:10",
																				"nodeType": "YulIdentifier",
																				"src": "10242:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nativeSrc": "10189:28:10",
																			"nodeType": "YulIdentifier",
																			"src": "10189:28:10"
																		},
																		"nativeSrc": "10189:61:10",
																		"nodeType": "YulFunctionCall",
																		"src": "10189:61:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "10179:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "10179:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nativeSrc": "9922:345:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9966:9:10",
														"nodeType": "YulTypedName",
														"src": "9966:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "9977:7:10",
														"nodeType": "YulTypedName",
														"src": "9977:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "9989:6:10",
														"nodeType": "YulTypedName",
														"src": "9989:6:10",
														"type": ""
													}
												],
												"src": "9922:345:10"
											},
											{
												"body": {
													"nativeSrc": "10379:68:10",
													"nodeType": "YulBlock",
													"src": "10379:68:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "10401:6:10",
																				"nodeType": "YulIdentifier",
																				"src": "10401:6:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10409:1:10",
																				"nodeType": "YulLiteral",
																				"src": "10409:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10397:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "10397:3:10"
																		},
																		"nativeSrc": "10397:14:10",
																		"nodeType": "YulFunctionCall",
																		"src": "10397:14:10"
																	},
																	{
																		"hexValue": "596f75206e65766572207374616b652074686973204e4654",
																		"kind": "string",
																		"nativeSrc": "10413:26:10",
																		"nodeType": "YulLiteral",
																		"src": "10413:26:10",
																		"type": "",
																		"value": "You never stake this NFT"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10390:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "10390:6:10"
																},
																"nativeSrc": "10390:50:10",
																"nodeType": "YulFunctionCall",
																"src": "10390:50:10"
															},
															"nativeSrc": "10390:50:10",
															"nodeType": "YulExpressionStatement",
															"src": "10390:50:10"
														}
													]
												},
												"name": "store_literal_in_memory_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b",
												"nativeSrc": "10273:174:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "10371:6:10",
														"nodeType": "YulTypedName",
														"src": "10371:6:10",
														"type": ""
													}
												],
												"src": "10273:174:10"
											},
											{
												"body": {
													"nativeSrc": "10599:220:10",
													"nodeType": "YulBlock",
													"src": "10599:220:10",
													"statements": [
														{
															"nativeSrc": "10609:74:10",
															"nodeType": "YulAssignment",
															"src": "10609:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10675:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "10675:3:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10680:2:10",
																		"nodeType": "YulLiteral",
																		"src": "10680:2:10",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "10616:58:10",
																	"nodeType": "YulIdentifier",
																	"src": "10616:58:10"
																},
																"nativeSrc": "10616:67:10",
																"nodeType": "YulFunctionCall",
																"src": "10616:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "10609:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "10609:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10781:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "10781:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b",
																	"nativeSrc": "10692:88:10",
																	"nodeType": "YulIdentifier",
																	"src": "10692:88:10"
																},
																"nativeSrc": "10692:93:10",
																"nodeType": "YulFunctionCall",
																"src": "10692:93:10"
															},
															"nativeSrc": "10692:93:10",
															"nodeType": "YulExpressionStatement",
															"src": "10692:93:10"
														},
														{
															"nativeSrc": "10794:19:10",
															"nodeType": "YulAssignment",
															"src": "10794:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10805:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "10805:3:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10810:2:10",
																		"nodeType": "YulLiteral",
																		"src": "10810:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10801:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "10801:3:10"
																},
																"nativeSrc": "10801:12:10",
																"nodeType": "YulFunctionCall",
																"src": "10801:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "10794:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "10794:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "10453:366:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "10587:3:10",
														"nodeType": "YulTypedName",
														"src": "10587:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "10595:3:10",
														"nodeType": "YulTypedName",
														"src": "10595:3:10",
														"type": ""
													}
												],
												"src": "10453:366:10"
											},
											{
												"body": {
													"nativeSrc": "10996:248:10",
													"nodeType": "YulBlock",
													"src": "10996:248:10",
													"statements": [
														{
															"nativeSrc": "11006:26:10",
															"nodeType": "YulAssignment",
															"src": "11006:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "11018:9:10",
																		"nodeType": "YulIdentifier",
																		"src": "11018:9:10"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11029:2:10",
																		"nodeType": "YulLiteral",
																		"src": "11029:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11014:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "11014:3:10"
																},
																"nativeSrc": "11014:18:10",
																"nodeType": "YulFunctionCall",
																"src": "11014:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "11006:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "11006:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "11053:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "11053:9:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11064:1:10",
																				"nodeType": "YulLiteral",
																				"src": "11064:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11049:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "11049:3:10"
																		},
																		"nativeSrc": "11049:17:10",
																		"nodeType": "YulFunctionCall",
																		"src": "11049:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "11072:4:10",
																				"nodeType": "YulIdentifier",
																				"src": "11072:4:10"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "11078:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "11078:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "11068:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "11068:3:10"
																		},
																		"nativeSrc": "11068:20:10",
																		"nodeType": "YulFunctionCall",
																		"src": "11068:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11042:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "11042:6:10"
																},
																"nativeSrc": "11042:47:10",
																"nodeType": "YulFunctionCall",
																"src": "11042:47:10"
															},
															"nativeSrc": "11042:47:10",
															"nodeType": "YulExpressionStatement",
															"src": "11042:47:10"
														},
														{
															"nativeSrc": "11098:139:10",
															"nodeType": "YulAssignment",
															"src": "11098:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "11232:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "11232:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "11106:124:10",
																	"nodeType": "YulIdentifier",
																	"src": "11106:124:10"
																},
																"nativeSrc": "11106:131:10",
																"nodeType": "YulFunctionCall",
																"src": "11106:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "11098:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "11098:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "10825:419:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "10976:9:10",
														"nodeType": "YulTypedName",
														"src": "10976:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "10991:4:10",
														"nodeType": "YulTypedName",
														"src": "10991:4:10",
														"type": ""
													}
												],
												"src": "10825:419:10"
											},
											{
												"body": {
													"nativeSrc": "11278:152:10",
													"nodeType": "YulBlock",
													"src": "11278:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11295:1:10",
																		"nodeType": "YulLiteral",
																		"src": "11295:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11298:77:10",
																		"nodeType": "YulLiteral",
																		"src": "11298:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11288:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "11288:6:10"
																},
																"nativeSrc": "11288:88:10",
																"nodeType": "YulFunctionCall",
																"src": "11288:88:10"
															},
															"nativeSrc": "11288:88:10",
															"nodeType": "YulExpressionStatement",
															"src": "11288:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11392:1:10",
																		"nodeType": "YulLiteral",
																		"src": "11392:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11395:4:10",
																		"nodeType": "YulLiteral",
																		"src": "11395:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11385:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "11385:6:10"
																},
																"nativeSrc": "11385:15:10",
																"nodeType": "YulFunctionCall",
																"src": "11385:15:10"
															},
															"nativeSrc": "11385:15:10",
															"nodeType": "YulExpressionStatement",
															"src": "11385:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11416:1:10",
																		"nodeType": "YulLiteral",
																		"src": "11416:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11419:4:10",
																		"nodeType": "YulLiteral",
																		"src": "11419:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "11409:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "11409:6:10"
																},
																"nativeSrc": "11409:15:10",
																"nodeType": "YulFunctionCall",
																"src": "11409:15:10"
															},
															"nativeSrc": "11409:15:10",
															"nodeType": "YulExpressionStatement",
															"src": "11409:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "11250:180:10",
												"nodeType": "YulFunctionDefinition",
												"src": "11250:180:10"
											},
											{
												"body": {
													"nativeSrc": "11481:149:10",
													"nodeType": "YulBlock",
													"src": "11481:149:10",
													"statements": [
														{
															"nativeSrc": "11491:25:10",
															"nodeType": "YulAssignment",
															"src": "11491:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11514:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "11514:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11496:17:10",
																	"nodeType": "YulIdentifier",
																	"src": "11496:17:10"
																},
																"nativeSrc": "11496:20:10",
																"nodeType": "YulFunctionCall",
																"src": "11496:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "11491:1:10",
																	"nodeType": "YulIdentifier",
																	"src": "11491:1:10"
																}
															]
														},
														{
															"nativeSrc": "11525:25:10",
															"nodeType": "YulAssignment",
															"src": "11525:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "11548:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "11548:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11530:17:10",
																	"nodeType": "YulIdentifier",
																	"src": "11530:17:10"
																},
																"nativeSrc": "11530:20:10",
																"nodeType": "YulFunctionCall",
																"src": "11530:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "11525:1:10",
																	"nodeType": "YulIdentifier",
																	"src": "11525:1:10"
																}
															]
														},
														{
															"nativeSrc": "11559:17:10",
															"nodeType": "YulAssignment",
															"src": "11559:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11571:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "11571:1:10"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "11574:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "11574:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "11567:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "11567:3:10"
																},
																"nativeSrc": "11567:9:10",
																"nodeType": "YulFunctionCall",
																"src": "11567:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nativeSrc": "11559:4:10",
																	"nodeType": "YulIdentifier",
																	"src": "11559:4:10"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "11601:22:10",
																"nodeType": "YulBlock",
																"src": "11601:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "11603:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "11603:16:10"
																			},
																			"nativeSrc": "11603:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "11603:18:10"
																		},
																		"nativeSrc": "11603:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "11603:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nativeSrc": "11592:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "11592:4:10"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "11598:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "11598:1:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "11589:2:10",
																	"nodeType": "YulIdentifier",
																	"src": "11589:2:10"
																},
																"nativeSrc": "11589:11:10",
																"nodeType": "YulFunctionCall",
																"src": "11589:11:10"
															},
															"nativeSrc": "11586:37:10",
															"nodeType": "YulIf",
															"src": "11586:37:10"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nativeSrc": "11436:194:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "11467:1:10",
														"nodeType": "YulTypedName",
														"src": "11467:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "11470:1:10",
														"nodeType": "YulTypedName",
														"src": "11470:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nativeSrc": "11476:4:10",
														"nodeType": "YulTypedName",
														"src": "11476:4:10",
														"type": ""
													}
												],
												"src": "11436:194:10"
											},
											{
												"body": {
													"nativeSrc": "11684:362:10",
													"nodeType": "YulBlock",
													"src": "11684:362:10",
													"statements": [
														{
															"nativeSrc": "11694:25:10",
															"nodeType": "YulAssignment",
															"src": "11694:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11717:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "11717:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11699:17:10",
																	"nodeType": "YulIdentifier",
																	"src": "11699:17:10"
																},
																"nativeSrc": "11699:20:10",
																"nodeType": "YulFunctionCall",
																"src": "11699:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "11694:1:10",
																	"nodeType": "YulIdentifier",
																	"src": "11694:1:10"
																}
															]
														},
														{
															"nativeSrc": "11728:25:10",
															"nodeType": "YulAssignment",
															"src": "11728:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "11751:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "11751:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11733:17:10",
																	"nodeType": "YulIdentifier",
																	"src": "11733:17:10"
																},
																"nativeSrc": "11733:20:10",
																"nodeType": "YulFunctionCall",
																"src": "11733:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "11728:1:10",
																	"nodeType": "YulIdentifier",
																	"src": "11728:1:10"
																}
															]
														},
														{
															"nativeSrc": "11762:28:10",
															"nodeType": "YulVariableDeclaration",
															"src": "11762:28:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11785:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "11785:1:10"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "11788:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "11788:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "11781:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "11781:3:10"
																},
																"nativeSrc": "11781:9:10",
																"nodeType": "YulFunctionCall",
																"src": "11781:9:10"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nativeSrc": "11766:11:10",
																	"nodeType": "YulTypedName",
																	"src": "11766:11:10",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "11799:41:10",
															"nodeType": "YulAssignment",
															"src": "11799:41:10",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nativeSrc": "11828:11:10",
																		"nodeType": "YulIdentifier",
																		"src": "11828:11:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11810:17:10",
																	"nodeType": "YulIdentifier",
																	"src": "11810:17:10"
																},
																"nativeSrc": "11810:30:10",
																"nodeType": "YulFunctionCall",
																"src": "11810:30:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "11799:7:10",
																	"nodeType": "YulIdentifier",
																	"src": "11799:7:10"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "12017:22:10",
																"nodeType": "YulBlock",
																"src": "12017:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "12019:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "12019:16:10"
																			},
																			"nativeSrc": "12019:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "12019:18:10"
																		},
																		"nativeSrc": "12019:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "12019:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "11950:1:10",
																						"nodeType": "YulIdentifier",
																						"src": "11950:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "11943:6:10",
																					"nodeType": "YulIdentifier",
																					"src": "11943:6:10"
																				},
																				"nativeSrc": "11943:9:10",
																				"nodeType": "YulFunctionCall",
																				"src": "11943:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "11973:1:10",
																						"nodeType": "YulIdentifier",
																						"src": "11973:1:10"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "11980:7:10",
																								"nodeType": "YulIdentifier",
																								"src": "11980:7:10"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "11989:1:10",
																								"nodeType": "YulIdentifier",
																								"src": "11989:1:10"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "11976:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "11976:3:10"
																						},
																						"nativeSrc": "11976:15:10",
																						"nodeType": "YulFunctionCall",
																						"src": "11976:15:10"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "11970:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "11970:2:10"
																				},
																				"nativeSrc": "11970:22:10",
																				"nodeType": "YulFunctionCall",
																				"src": "11970:22:10"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "11923:2:10",
																			"nodeType": "YulIdentifier",
																			"src": "11923:2:10"
																		},
																		"nativeSrc": "11923:83:10",
																		"nodeType": "YulFunctionCall",
																		"src": "11923:83:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "11903:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "11903:6:10"
																},
																"nativeSrc": "11903:113:10",
																"nodeType": "YulFunctionCall",
																"src": "11903:113:10"
															},
															"nativeSrc": "11900:139:10",
															"nodeType": "YulIf",
															"src": "11900:139:10"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "11636:410:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "11667:1:10",
														"nodeType": "YulTypedName",
														"src": "11667:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "11670:1:10",
														"nodeType": "YulTypedName",
														"src": "11670:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "11676:7:10",
														"nodeType": "YulTypedName",
														"src": "11676:7:10",
														"type": ""
													}
												],
												"src": "11636:410:10"
											},
											{
												"body": {
													"nativeSrc": "12080:152:10",
													"nodeType": "YulBlock",
													"src": "12080:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12097:1:10",
																		"nodeType": "YulLiteral",
																		"src": "12097:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12100:77:10",
																		"nodeType": "YulLiteral",
																		"src": "12100:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12090:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "12090:6:10"
																},
																"nativeSrc": "12090:88:10",
																"nodeType": "YulFunctionCall",
																"src": "12090:88:10"
															},
															"nativeSrc": "12090:88:10",
															"nodeType": "YulExpressionStatement",
															"src": "12090:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12194:1:10",
																		"nodeType": "YulLiteral",
																		"src": "12194:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12197:4:10",
																		"nodeType": "YulLiteral",
																		"src": "12197:4:10",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12187:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "12187:6:10"
																},
																"nativeSrc": "12187:15:10",
																"nodeType": "YulFunctionCall",
																"src": "12187:15:10"
															},
															"nativeSrc": "12187:15:10",
															"nodeType": "YulExpressionStatement",
															"src": "12187:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12218:1:10",
																		"nodeType": "YulLiteral",
																		"src": "12218:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12221:4:10",
																		"nodeType": "YulLiteral",
																		"src": "12221:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "12211:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "12211:6:10"
																},
																"nativeSrc": "12211:15:10",
																"nodeType": "YulFunctionCall",
																"src": "12211:15:10"
															},
															"nativeSrc": "12211:15:10",
															"nodeType": "YulExpressionStatement",
															"src": "12211:15:10"
														}
													]
												},
												"name": "panic_error_0x12",
												"nativeSrc": "12052:180:10",
												"nodeType": "YulFunctionDefinition",
												"src": "12052:180:10"
											},
											{
												"body": {
													"nativeSrc": "12280:143:10",
													"nodeType": "YulBlock",
													"src": "12280:143:10",
													"statements": [
														{
															"nativeSrc": "12290:25:10",
															"nodeType": "YulAssignment",
															"src": "12290:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "12313:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "12313:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "12295:17:10",
																	"nodeType": "YulIdentifier",
																	"src": "12295:17:10"
																},
																"nativeSrc": "12295:20:10",
																"nodeType": "YulFunctionCall",
																"src": "12295:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "12290:1:10",
																	"nodeType": "YulIdentifier",
																	"src": "12290:1:10"
																}
															]
														},
														{
															"nativeSrc": "12324:25:10",
															"nodeType": "YulAssignment",
															"src": "12324:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "12347:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "12347:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "12329:17:10",
																	"nodeType": "YulIdentifier",
																	"src": "12329:17:10"
																},
																"nativeSrc": "12329:20:10",
																"nodeType": "YulFunctionCall",
																"src": "12329:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "12324:1:10",
																	"nodeType": "YulIdentifier",
																	"src": "12324:1:10"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "12371:22:10",
																"nodeType": "YulBlock",
																"src": "12371:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nativeSrc": "12373:16:10",
																				"nodeType": "YulIdentifier",
																				"src": "12373:16:10"
																			},
																			"nativeSrc": "12373:18:10",
																			"nodeType": "YulFunctionCall",
																			"src": "12373:18:10"
																		},
																		"nativeSrc": "12373:18:10",
																		"nodeType": "YulExpressionStatement",
																		"src": "12373:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "12368:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "12368:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "12361:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "12361:6:10"
																},
																"nativeSrc": "12361:9:10",
																"nodeType": "YulFunctionCall",
																"src": "12361:9:10"
															},
															"nativeSrc": "12358:35:10",
															"nodeType": "YulIf",
															"src": "12358:35:10"
														},
														{
															"nativeSrc": "12403:14:10",
															"nodeType": "YulAssignment",
															"src": "12403:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "12412:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "12412:1:10"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "12415:1:10",
																		"nodeType": "YulIdentifier",
																		"src": "12415:1:10"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "12408:3:10",
																	"nodeType": "YulIdentifier",
																	"src": "12408:3:10"
																},
																"nativeSrc": "12408:9:10",
																"nodeType": "YulFunctionCall",
																"src": "12408:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "12403:1:10",
																	"nodeType": "YulIdentifier",
																	"src": "12403:1:10"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nativeSrc": "12238:185:10",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "12269:1:10",
														"nodeType": "YulTypedName",
														"src": "12269:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "12272:1:10",
														"nodeType": "YulTypedName",
														"src": "12272:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "12278:1:10",
														"nodeType": "YulTypedName",
														"src": "12278:1:10",
														"type": ""
													}
												],
												"src": "12238:185:10"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function abi_encode_t_bytes4_to_t_bytes4_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes4(value))\n    }\n\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes4_to_t_bytes4_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c(memPtr) {\n\n        mstore(add(memPtr, 0), \"You're not own this NFT\")\n\n    }\n\n    function abi_encode_t_stringliteral_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b(memPtr) {\n\n        mstore(add(memPtr, 0), \"You never stake this NFT\")\n\n    }\n\n    function abi_encode_t_stringliteral_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"972": [
									{
										"length": 32,
										"start": 333
									},
									{
										"length": 32,
										"start": 651
									},
									{
										"length": 32,
										"start": 882
									}
								],
								"975": [
									{
										"length": 32,
										"start": 1020
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b5060043610610055575f3560e01c8063150b7a02146100595780631dbb2a22146100895780632e17de78146100a5578063584b62a1146100c1578063d2d7231f146100f1575b5f80fd5b610073600480360381019061006e91906107fc565b610121565b60405161008091906108b6565b60405180910390f35b6100a3600480360381019061009e91906108cf565b610134565b005b6100bf60048036038101906100ba91906108cf565b610316565b005b6100db60048036038101906100d691906108fa565b61049a565b6040516100e89190610947565b60405180910390f35b61010b600480360381019061010691906108cf565b6104b9565b6040516101189190610947565b60405180910390f35b5f63150b7a0260e01b9050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016101a49190610947565b602060405180830381865afa1580156101bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e39190610974565b73ffffffffffffffffffffffffffffffffffffffff1614610239576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610230906109f9565b60405180910390fd5b425f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f20819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b88d4fde3330846040518463ffffffff1660e01b81526004016102e693929190610a59565b5f604051808303815f87803b1580156102fd575f80fd5b505af115801561030f573d5f803e3d5ffd5b5050505050565b5f610320826104b9565b90505f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8381526020019081526020015f205f90557f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b88d4fde3033856040518463ffffffff1660e01b81526004016103cd93929190610a59565b5f604051808303815f87803b1580156103e4575f80fd5b505af11580156103f6573d5f803e3d5ffd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610455929190610aa1565b6020604051808303815f875af1158015610471573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104959190610afd565b505050565b5f602052815f5260405f20602052805f5260405f205f91509150505481565b5f805f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f205411610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053e90610b72565b60405180910390fd5b5f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f20544261059f9190610bbd565b90505f603c670de0b6b3a7640000836105b7856105e1565b6105c19190610bf0565b6105cb9190610bf0565b6105d59190610c5e565b90508092505050919050565b5f603c8210156105f3575f905061061d565b60b4821015610605576003905061061d565b61012c821015610618576005905061061d565b600a90505b919050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61065c82610633565b9050919050565b61066c81610652565b8114610676575f80fd5b50565b5f8135905061068781610663565b92915050565b5f819050919050565b61069f8161068d565b81146106a9575f80fd5b50565b5f813590506106ba81610696565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61070e826106c8565b810181811067ffffffffffffffff8211171561072d5761072c6106d8565b5b80604052505050565b5f61073f610622565b905061074b8282610705565b919050565b5f67ffffffffffffffff82111561076a576107696106d8565b5b610773826106c8565b9050602081019050919050565b828183375f83830152505050565b5f6107a061079b84610750565b610736565b9050828152602081018484840111156107bc576107bb6106c4565b5b6107c7848285610780565b509392505050565b5f82601f8301126107e3576107e26106c0565b5b81356107f384826020860161078e565b91505092915050565b5f805f80608085870312156108145761081361062b565b5b5f61082187828801610679565b945050602061083287828801610679565b9350506040610843878288016106ac565b925050606085013567ffffffffffffffff8111156108645761086361062f565b5b610870878288016107cf565b91505092959194509250565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6108b08161087c565b82525050565b5f6020820190506108c95f8301846108a7565b92915050565b5f602082840312156108e4576108e361062b565b5b5f6108f1848285016106ac565b91505092915050565b5f80604083850312156109105761090f61062b565b5b5f61091d85828601610679565b925050602061092e858286016106ac565b9150509250929050565b6109418161068d565b82525050565b5f60208201905061095a5f830184610938565b92915050565b5f8151905061096e81610663565b92915050565b5f602082840312156109895761098861062b565b5b5f61099684828501610960565b91505092915050565b5f82825260208201905092915050565b7f596f75277265206e6f74206f776e2074686973204e46540000000000000000005f82015250565b5f6109e360178361099f565b91506109ee826109af565b602082019050919050565b5f6020820190508181035f830152610a10816109d7565b9050919050565b610a2081610652565b82525050565b5f82825260208201905092915050565b50565b5f610a445f83610a26565b9150610a4f82610a36565b5f82019050919050565b5f608082019050610a6c5f830186610a17565b610a796020830185610a17565b610a866040830184610938565b8181036060830152610a9781610a39565b9050949350505050565b5f604082019050610ab45f830185610a17565b610ac16020830184610938565b9392505050565b5f8115159050919050565b610adc81610ac8565b8114610ae6575f80fd5b50565b5f81519050610af781610ad3565b92915050565b5f60208284031215610b1257610b1161062b565b5b5f610b1f84828501610ae9565b91505092915050565b7f596f75206e65766572207374616b652074686973204e465400000000000000005f82015250565b5f610b5c60188361099f565b9150610b6782610b28565b602082019050919050565b5f6020820190508181035f830152610b8981610b50565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610bc78261068d565b9150610bd28361068d565b9250828203905081811115610bea57610be9610b90565b5b92915050565b5f610bfa8261068d565b9150610c058361068d565b9250828202610c138161068d565b91508282048414831517610c2a57610c29610b90565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610c688261068d565b9150610c738361068d565b925082610c8357610c82610c31565b5b82820490509291505056fea264697066735822122070bebd69f9c69019ade06a64bdd8c8261cd31a8239c1e80545c8e02eec4c11a764736f6c63430008180033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x59 JUMPI DUP1 PUSH4 0x1DBB2A22 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x2E17DE78 EQ PUSH2 0xA5 JUMPI DUP1 PUSH4 0x584B62A1 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0xD2D7231F EQ PUSH2 0xF1 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x73 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6E SWAP2 SWAP1 PUSH2 0x7FC JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x80 SWAP2 SWAP1 PUSH2 0x8B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x9E SWAP2 SWAP1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x134 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xBA SWAP2 SWAP1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x316 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD6 SWAP2 SWAP1 PUSH2 0x8FA JUMP JUMPDEST PUSH2 0x49A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0x947 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x106 SWAP2 SWAP1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x118 SWAP2 SWAP1 PUSH2 0x947 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A4 SWAP2 SWAP1 PUSH2 0x947 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BF JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E3 SWAP2 SWAP1 PUSH2 0x974 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x239 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x230 SWAP1 PUSH2 0x9F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB88D4FDE CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA59 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FD JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30F JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x320 DUP3 PUSH2 0x4B9 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 SWAP1 SSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB88D4FDE ADDRESS CALLER DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3CD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA59 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F6 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x455 SWAP3 SWAP2 SWAP1 PUSH2 0xAA1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x471 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x495 SWAP2 SWAP1 PUSH2 0xAFD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 MSTORE DUP2 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD GT PUSH2 0x547 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x53E SWAP1 PUSH2 0xB72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD TIMESTAMP PUSH2 0x59F SWAP2 SWAP1 PUSH2 0xBBD JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x3C PUSH8 0xDE0B6B3A7640000 DUP4 PUSH2 0x5B7 DUP6 PUSH2 0x5E1 JUMP JUMPDEST PUSH2 0x5C1 SWAP2 SWAP1 PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0x5CB SWAP2 SWAP1 PUSH2 0xBF0 JUMP JUMPDEST PUSH2 0x5D5 SWAP2 SWAP1 PUSH2 0xC5E JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x3C DUP3 LT ISZERO PUSH2 0x5F3 JUMPI PUSH0 SWAP1 POP PUSH2 0x61D JUMP JUMPDEST PUSH1 0xB4 DUP3 LT ISZERO PUSH2 0x605 JUMPI PUSH1 0x3 SWAP1 POP PUSH2 0x61D JUMP JUMPDEST PUSH2 0x12C DUP3 LT ISZERO PUSH2 0x618 JUMPI PUSH1 0x5 SWAP1 POP PUSH2 0x61D JUMP JUMPDEST PUSH1 0xA SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x65C DUP3 PUSH2 0x633 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x66C DUP2 PUSH2 0x652 JUMP JUMPDEST DUP2 EQ PUSH2 0x676 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x687 DUP2 PUSH2 0x663 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x69F DUP2 PUSH2 0x68D JUMP JUMPDEST DUP2 EQ PUSH2 0x6A9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x6BA DUP2 PUSH2 0x696 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x70E DUP3 PUSH2 0x6C8 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x72D JUMPI PUSH2 0x72C PUSH2 0x6D8 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x73F PUSH2 0x622 JUMP JUMPDEST SWAP1 POP PUSH2 0x74B DUP3 DUP3 PUSH2 0x705 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x76A JUMPI PUSH2 0x769 PUSH2 0x6D8 JUMP JUMPDEST JUMPDEST PUSH2 0x773 DUP3 PUSH2 0x6C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x7A0 PUSH2 0x79B DUP5 PUSH2 0x750 JUMP JUMPDEST PUSH2 0x736 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x7BC JUMPI PUSH2 0x7BB PUSH2 0x6C4 JUMP JUMPDEST JUMPDEST PUSH2 0x7C7 DUP5 DUP3 DUP6 PUSH2 0x780 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7E3 JUMPI PUSH2 0x7E2 PUSH2 0x6C0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7F3 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x78E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x814 JUMPI PUSH2 0x813 PUSH2 0x62B JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x821 DUP8 DUP3 DUP9 ADD PUSH2 0x679 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x832 DUP8 DUP3 DUP9 ADD PUSH2 0x679 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x843 DUP8 DUP3 DUP9 ADD PUSH2 0x6AC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x864 JUMPI PUSH2 0x863 PUSH2 0x62F JUMP JUMPDEST JUMPDEST PUSH2 0x870 DUP8 DUP3 DUP9 ADD PUSH2 0x7CF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8B0 DUP2 PUSH2 0x87C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8C9 PUSH0 DUP4 ADD DUP5 PUSH2 0x8A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8E4 JUMPI PUSH2 0x8E3 PUSH2 0x62B JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x8F1 DUP5 DUP3 DUP6 ADD PUSH2 0x6AC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x910 JUMPI PUSH2 0x90F PUSH2 0x62B JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x91D DUP6 DUP3 DUP7 ADD PUSH2 0x679 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x92E DUP6 DUP3 DUP7 ADD PUSH2 0x6AC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x941 DUP2 PUSH2 0x68D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x95A PUSH0 DUP4 ADD DUP5 PUSH2 0x938 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x96E DUP2 PUSH2 0x663 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x989 JUMPI PUSH2 0x988 PUSH2 0x62B JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x996 DUP5 DUP3 DUP6 ADD PUSH2 0x960 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F75277265206E6F74206F776E2074686973204E4654000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x9E3 PUSH1 0x17 DUP4 PUSH2 0x99F JUMP JUMPDEST SWAP2 POP PUSH2 0x9EE DUP3 PUSH2 0x9AF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xA10 DUP2 PUSH2 0x9D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA20 DUP2 PUSH2 0x652 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH2 0xA44 PUSH0 DUP4 PUSH2 0xA26 JUMP JUMPDEST SWAP2 POP PUSH2 0xA4F DUP3 PUSH2 0xA36 JUMP JUMPDEST PUSH0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0xA6C PUSH0 DUP4 ADD DUP7 PUSH2 0xA17 JUMP JUMPDEST PUSH2 0xA79 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xA17 JUMP JUMPDEST PUSH2 0xA86 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x938 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0xA97 DUP2 PUSH2 0xA39 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xAB4 PUSH0 DUP4 ADD DUP6 PUSH2 0xA17 JUMP JUMPDEST PUSH2 0xAC1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x938 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xADC DUP2 PUSH2 0xAC8 JUMP JUMPDEST DUP2 EQ PUSH2 0xAE6 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0xAF7 DUP2 PUSH2 0xAD3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB12 JUMPI PUSH2 0xB11 PUSH2 0x62B JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xB1F DUP5 DUP3 DUP6 ADD PUSH2 0xAE9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F75206E65766572207374616B652074686973204E46540000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xB5C PUSH1 0x18 DUP4 PUSH2 0x99F JUMP JUMPDEST SWAP2 POP PUSH2 0xB67 DUP3 PUSH2 0xB28 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xB89 DUP2 PUSH2 0xB50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xBC7 DUP3 PUSH2 0x68D JUMP JUMPDEST SWAP2 POP PUSH2 0xBD2 DUP4 PUSH2 0x68D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xBEA JUMPI PUSH2 0xBE9 PUSH2 0xB90 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xBFA DUP3 PUSH2 0x68D JUMP JUMPDEST SWAP2 POP PUSH2 0xC05 DUP4 PUSH2 0x68D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xC13 DUP2 PUSH2 0x68D JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xC2A JUMPI PUSH2 0xC29 PUSH2 0xB90 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xC68 DUP3 PUSH2 0x68D JUMP JUMPDEST SWAP2 POP PUSH2 0xC73 DUP4 PUSH2 0x68D JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xC83 JUMPI PUSH2 0xC82 PUSH2 0xC31 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0xBEBD69F9C69019ADE06A64BDD8C8261CD3 BYTE DUP3 CODECOPY 0xC1 0xE8 SDIV GASLIMIT 0xC8 0xE0 0x2E 0xEC 0x4C GT 0xA7 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ",
							"sourceMap": "327:1682:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;639:153:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;979:282:9;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1624:380;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;474:62;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1269:347;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;639:153:5;730:6;755:30;;;748:37;;639:153;;;;;;:::o;979:282:9:-;1065:10;1040:35;;:3;:11;;;1052:8;1040:21;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:35;;;1032:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;1166:15;1135:6;:18;1142:10;1135:18;;;;;;;;;;;;;;;:28;1154:8;1135:28;;;;;;;;;;;:46;;;;1192:3;:20;;;1213:10;1233:4;1240:8;1192:61;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;979:282;:::o;1624:380::-;1705:20;1728:25;1744:8;1728:15;:25::i;:::-;1705:48;;1771:6;:18;1778:10;1771:18;;;;;;;;;;;;;;;:28;1790:8;1771:28;;;;;;;;;;;1764:35;;;1810:3;:20;;;1839:4;1846:10;1858:8;1810:61;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1884:5;:14;;;1899:10;1911:12;1884:40;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1666:338;1624:380;:::o;474:62::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1269:347::-;1332:7;1391:1;1360:6;:18;1367:10;1360:18;;;;;;;;;;;;;;;:28;1379:8;1360:28;;;;;;;;;;;;:32;1352:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1432:12;1465:6;:18;1472:10;1465:18;;;;;;;;;;;;;;;:28;1484:8;1465:28;;;;;;;;;;;;1447:15;:46;;;;:::i;:::-;1432:61;;1504:20;1569:9;1557:8;1549:4;1527:19;1541:4;1527:13;:19::i;:::-;:26;;;;:::i;:::-;:39;;;;:::i;:::-;:51;;;;:::i;:::-;1504:74;;1596:12;1589:19;;;;1269:347;;;:::o;665:306::-;723:7;753:9;746:4;:16;743:221;;;786:1;779:8;;;;743:221;815:9;808:4;:16;805:159;;;848:1;841:8;;;;805:159;877:9;870:4;:16;867:97;;;910:1;903:8;;;;867:97;950:2;943:9;;665:306;;;;:::o;7:75:10:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:117::-;1306:1;1303;1296:12;1320:117;1429:1;1426;1419:12;1443:102;1484:6;1535:2;1531:7;1526:2;1519:5;1515:14;1511:28;1501:38;;1443:102;;;:::o;1551:180::-;1599:77;1596:1;1589:88;1696:4;1693:1;1686:15;1720:4;1717:1;1710:15;1737:281;1820:27;1842:4;1820:27;:::i;:::-;1812:6;1808:40;1950:6;1938:10;1935:22;1914:18;1902:10;1899:34;1896:62;1893:88;;;1961:18;;:::i;:::-;1893:88;2001:10;1997:2;1990:22;1780:238;1737:281;;:::o;2024:129::-;2058:6;2085:20;;:::i;:::-;2075:30;;2114:33;2142:4;2134:6;2114:33;:::i;:::-;2024:129;;;:::o;2159:307::-;2220:4;2310:18;2302:6;2299:30;2296:56;;;2332:18;;:::i;:::-;2296:56;2370:29;2392:6;2370:29;:::i;:::-;2362:37;;2454:4;2448;2444:15;2436:23;;2159:307;;;:::o;2472:146::-;2569:6;2564:3;2559;2546:30;2610:1;2601:6;2596:3;2592:16;2585:27;2472:146;;;:::o;2624:423::-;2701:5;2726:65;2742:48;2783:6;2742:48;:::i;:::-;2726:65;:::i;:::-;2717:74;;2814:6;2807:5;2800:21;2852:4;2845:5;2841:16;2890:3;2881:6;2876:3;2872:16;2869:25;2866:112;;;2897:79;;:::i;:::-;2866:112;2987:54;3034:6;3029:3;3024;2987:54;:::i;:::-;2707:340;2624:423;;;;;:::o;3066:338::-;3121:5;3170:3;3163:4;3155:6;3151:17;3147:27;3137:122;;3178:79;;:::i;:::-;3137:122;3295:6;3282:20;3320:78;3394:3;3386:6;3379:4;3371:6;3367:17;3320:78;:::i;:::-;3311:87;;3127:277;3066:338;;;;:::o;3410:943::-;3505:6;3513;3521;3529;3578:3;3566:9;3557:7;3553:23;3549:33;3546:120;;;3585:79;;:::i;:::-;3546:120;3705:1;3730:53;3775:7;3766:6;3755:9;3751:22;3730:53;:::i;:::-;3720:63;;3676:117;3832:2;3858:53;3903:7;3894:6;3883:9;3879:22;3858:53;:::i;:::-;3848:63;;3803:118;3960:2;3986:53;4031:7;4022:6;4011:9;4007:22;3986:53;:::i;:::-;3976:63;;3931:118;4116:2;4105:9;4101:18;4088:32;4147:18;4139:6;4136:30;4133:117;;;4169:79;;:::i;:::-;4133:117;4274:62;4328:7;4319:6;4308:9;4304:22;4274:62;:::i;:::-;4264:72;;4059:287;3410:943;;;;;;;:::o;4359:149::-;4395:7;4435:66;4428:5;4424:78;4413:89;;4359:149;;;:::o;4514:115::-;4599:23;4616:5;4599:23;:::i;:::-;4594:3;4587:36;4514:115;;:::o;4635:218::-;4726:4;4764:2;4753:9;4749:18;4741:26;;4777:69;4843:1;4832:9;4828:17;4819:6;4777:69;:::i;:::-;4635:218;;;;:::o;4859:329::-;4918:6;4967:2;4955:9;4946:7;4942:23;4938:32;4935:119;;;4973:79;;:::i;:::-;4935:119;5093:1;5118:53;5163:7;5154:6;5143:9;5139:22;5118:53;:::i;:::-;5108:63;;5064:117;4859:329;;;;:::o;5194:474::-;5262:6;5270;5319:2;5307:9;5298:7;5294:23;5290:32;5287:119;;;5325:79;;:::i;:::-;5287:119;5445:1;5470:53;5515:7;5506:6;5495:9;5491:22;5470:53;:::i;:::-;5460:63;;5416:117;5572:2;5598:53;5643:7;5634:6;5623:9;5619:22;5598:53;:::i;:::-;5588:63;;5543:118;5194:474;;;;;:::o;5674:118::-;5761:24;5779:5;5761:24;:::i;:::-;5756:3;5749:37;5674:118;;:::o;5798:222::-;5891:4;5929:2;5918:9;5914:18;5906:26;;5942:71;6010:1;5999:9;5995:17;5986:6;5942:71;:::i;:::-;5798:222;;;;:::o;6026:143::-;6083:5;6114:6;6108:13;6099:22;;6130:33;6157:5;6130:33;:::i;:::-;6026:143;;;;:::o;6175:351::-;6245:6;6294:2;6282:9;6273:7;6269:23;6265:32;6262:119;;;6300:79;;:::i;:::-;6262:119;6420:1;6445:64;6501:7;6492:6;6481:9;6477:22;6445:64;:::i;:::-;6435:74;;6391:128;6175:351;;;;:::o;6532:169::-;6616:11;6650:6;6645:3;6638:19;6690:4;6685:3;6681:14;6666:29;;6532:169;;;;:::o;6707:173::-;6847:25;6843:1;6835:6;6831:14;6824:49;6707:173;:::o;6886:366::-;7028:3;7049:67;7113:2;7108:3;7049:67;:::i;:::-;7042:74;;7125:93;7214:3;7125:93;:::i;:::-;7243:2;7238:3;7234:12;7227:19;;6886:366;;;:::o;7258:419::-;7424:4;7462:2;7451:9;7447:18;7439:26;;7511:9;7505:4;7501:20;7497:1;7486:9;7482:17;7475:47;7539:131;7665:4;7539:131;:::i;:::-;7531:139;;7258:419;;;:::o;7683:118::-;7770:24;7788:5;7770:24;:::i;:::-;7765:3;7758:37;7683:118;;:::o;7807:168::-;7890:11;7924:6;7919:3;7912:19;7964:4;7959:3;7955:14;7940:29;;7807:168;;;;:::o;7981:114::-;;:::o;8101:362::-;8242:3;8263:65;8326:1;8321:3;8263:65;:::i;:::-;8256:72;;8337:93;8426:3;8337:93;:::i;:::-;8455:1;8450:3;8446:11;8439:18;;8101:362;;;:::o;8469:748::-;8718:4;8756:3;8745:9;8741:19;8733:27;;8770:71;8838:1;8827:9;8823:17;8814:6;8770:71;:::i;:::-;8851:72;8919:2;8908:9;8904:18;8895:6;8851:72;:::i;:::-;8933;9001:2;8990:9;8986:18;8977:6;8933:72;:::i;:::-;9052:9;9046:4;9042:20;9037:2;9026:9;9022:18;9015:48;9080:130;9205:4;9080:130;:::i;:::-;9072:138;;8469:748;;;;;;:::o;9223:332::-;9344:4;9382:2;9371:9;9367:18;9359:26;;9395:71;9463:1;9452:9;9448:17;9439:6;9395:71;:::i;:::-;9476:72;9544:2;9533:9;9529:18;9520:6;9476:72;:::i;:::-;9223:332;;;;;:::o;9561:90::-;9595:7;9638:5;9631:13;9624:21;9613:32;;9561:90;;;:::o;9657:116::-;9727:21;9742:5;9727:21;:::i;:::-;9720:5;9717:32;9707:60;;9763:1;9760;9753:12;9707:60;9657:116;:::o;9779:137::-;9833:5;9864:6;9858:13;9849:22;;9880:30;9904:5;9880:30;:::i;:::-;9779:137;;;;:::o;9922:345::-;9989:6;10038:2;10026:9;10017:7;10013:23;10009:32;10006:119;;;10044:79;;:::i;:::-;10006:119;10164:1;10189:61;10242:7;10233:6;10222:9;10218:22;10189:61;:::i;:::-;10179:71;;10135:125;9922:345;;;;:::o;10273:174::-;10413:26;10409:1;10401:6;10397:14;10390:50;10273:174;:::o;10453:366::-;10595:3;10616:67;10680:2;10675:3;10616:67;:::i;:::-;10609:74;;10692:93;10781:3;10692:93;:::i;:::-;10810:2;10805:3;10801:12;10794:19;;10453:366;;;:::o;10825:419::-;10991:4;11029:2;11018:9;11014:18;11006:26;;11078:9;11072:4;11068:20;11064:1;11053:9;11049:17;11042:47;11106:131;11232:4;11106:131;:::i;:::-;11098:139;;10825:419;;;:::o;11250:180::-;11298:77;11295:1;11288:88;11395:4;11392:1;11385:15;11419:4;11416:1;11409:15;11436:194;11476:4;11496:20;11514:1;11496:20;:::i;:::-;11491:25;;11530:20;11548:1;11530:20;:::i;:::-;11525:25;;11574:1;11571;11567:9;11559:17;;11598:1;11592:4;11589:11;11586:37;;;11603:18;;:::i;:::-;11586:37;11436:194;;;;:::o;11636:410::-;11676:7;11699:20;11717:1;11699:20;:::i;:::-;11694:25;;11733:20;11751:1;11733:20;:::i;:::-;11728:25;;11788:1;11785;11781:9;11810:30;11828:11;11810:30;:::i;:::-;11799:41;;11989:1;11980:7;11976:15;11973:1;11970:22;11950:1;11943:9;11923:83;11900:139;;12019:18;;:::i;:::-;11900:139;11684:362;11636:410;;;;:::o;12052:180::-;12100:77;12097:1;12090:88;12197:4;12194:1;12187:15;12221:4;12218:1;12211:15;12238:185;12278:1;12295:20;12313:1;12295:20;:::i;:::-;12290:25;;12329:20;12347:1;12329:20;:::i;:::-;12324:25;;12368:1;12358:35;;12373:18;;:::i;:::-;12358:35;12415:1;12412;12408:9;12403:14;;12238:185;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "653600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"calculateReward(uint256)": "infinite",
								"onERC721Received(address,address,uint256,bytes)": "infinite",
								"stakes(address,uint256)": "infinite",
								"staking(uint256)": "infinite",
								"unstake(uint256)": "infinite"
							},
							"internal": {
								"calculateRate(uint256)": "116"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH",
									"source": 9,
									"value": "C0"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 545,
									"end": 657,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 545,
									"end": 657,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 545,
									"end": 657,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 545,
									"end": 657,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "CODESIZE",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 545,
									"end": 657,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 545,
									"end": 657,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 545,
									"end": 657,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 545,
									"end": 657,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 612,
									"end": 616,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 598,
									"end": 617,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 598,
									"end": 617,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 598,
									"end": 617,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 598,
									"end": 617,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 598,
									"end": 617,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 598,
									"end": 617,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 598,
									"end": 617,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 598,
									"end": 617,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 598,
									"end": 617,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 598,
									"end": 617,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 642,
									"end": 648,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 628,
									"end": 649,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 628,
									"end": 649,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 628,
									"end": 649,
									"name": "PUSH",
									"source": 9,
									"value": "A0"
								},
								{
									"begin": 628,
									"end": 649,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 628,
									"end": 649,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 628,
									"end": 649,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 628,
									"end": 649,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 628,
									"end": 649,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 628,
									"end": 649,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 628,
									"end": 649,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 545,
									"end": 657,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "6"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 10,
									"value": "8"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 10,
									"value": "10"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "10"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 10,
									"value": "12"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 10,
									"value": "13"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "12"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 924,
									"end": 930,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 932,
									"end": 938,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 981,
									"end": 983,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 969,
									"end": 978,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 960,
									"end": 967,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 956,
									"end": 979,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 952,
									"end": 984,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "8"
								},
								{
									"begin": 987,
									"end": 1066,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "tag",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "tag",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1107,
									"end": 1108,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 1188,
									"end": 1195,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1179,
									"end": 1185,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1168,
									"end": 1177,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1164,
									"end": 1186,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "13"
								},
								{
									"begin": 1132,
									"end": 1196,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "tag",
									"source": 10,
									"value": "29"
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1122,
									"end": 1196,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1122,
									"end": 1196,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1078,
									"end": 1206,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1245,
									"end": 1247,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 1327,
									"end": 1334,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1318,
									"end": 1324,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1307,
									"end": 1316,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1303,
									"end": 1325,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "13"
								},
								{
									"begin": 1271,
									"end": 1335,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1261,
									"end": 1335,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1261,
									"end": 1335,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1216,
									"end": 1345,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 845,
									"end": 1352,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "tag",
									"source": 9,
									"value": "6"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH",
									"source": 9,
									"value": "A0"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "975"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "972"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 327,
									"end": 2009,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122070bebd69f9c69019ade06a64bdd8c8261cd31a8239c1e80545c8e02eec4c11a764736f6c63430008180033",
									".code": [
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "150B7A02"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "1DBB2A22"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "2E17DE78"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "584B62A1"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "D2D7231F"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 327,
											"end": 2009,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 639,
											"end": 792,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 639,
											"end": 792,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 639,
											"end": 792,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 639,
											"end": 792,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 979,
											"end": 1261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 979,
											"end": 1261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 1624,
											"end": 2004,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1624,
											"end": 2004,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 474,
											"end": 536,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 474,
											"end": 536,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 474,
											"end": 536,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 1269,
											"end": 1616,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 1269,
											"end": 1616,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "tag",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 1269,
											"end": 1616,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "tag",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 639,
											"end": 792,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 639,
											"end": 792,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 730,
											"end": 736,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 755,
											"end": 785,
											"name": "PUSH",
											"source": 5,
											"value": "150B7A02"
										},
										{
											"begin": 755,
											"end": 785,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 755,
											"end": 785,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 748,
											"end": 785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 748,
											"end": 785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 639,
											"end": 792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1065,
											"end": 1075,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1075,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1040,
											"end": 1075,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1043,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "972"
										},
										{
											"begin": 1040,
											"end": 1051,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1040,
											"end": 1051,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1051,
											"name": "PUSH",
											"source": 9,
											"value": "6352211E"
										},
										{
											"begin": 1052,
											"end": 1060,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 1040,
											"end": 1061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "tag",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 1040,
											"end": 1061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "tag",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 1040,
											"end": 1061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1075,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1040,
											"end": 1075,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1040,
											"end": 1075,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1032,
											"end": 1103,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "tag",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 1032,
											"end": 1103,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1166,
											"end": 1181,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1141,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1142,
											"end": 1152,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1135,
											"end": 1153,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1154,
											"end": 1162,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1135,
											"end": 1163,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1181,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1181,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1181,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1181,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1195,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "972"
										},
										{
											"begin": 1192,
											"end": 1212,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1192,
											"end": 1212,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1212,
											"name": "PUSH",
											"source": 9,
											"value": "B88D4FDE"
										},
										{
											"begin": 1213,
											"end": 1223,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1233,
											"end": 1237,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 1240,
											"end": 1248,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 1192,
											"end": 1253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "tag",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1192,
											"end": 1253,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 979,
											"end": 1261,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1705,
											"end": 1725,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1728,
											"end": 1753,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 1744,
											"end": 1752,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1728,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 1728,
											"end": 1753,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1728,
											"end": 1753,
											"name": "tag",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 1728,
											"end": 1753,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1705,
											"end": 1753,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1705,
											"end": 1753,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1777,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1778,
											"end": 1788,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1771,
											"end": 1789,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1790,
											"end": 1798,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1771,
											"end": 1799,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1764,
											"end": 1799,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1764,
											"end": 1799,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1764,
											"end": 1799,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1813,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "972"
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "PUSH",
											"source": 9,
											"value": "B88D4FDE"
										},
										{
											"begin": 1839,
											"end": 1843,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 1846,
											"end": 1856,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1858,
											"end": 1866,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 1810,
											"end": 1871,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "tag",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "tag",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "tag",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1810,
											"end": 1871,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1889,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "975"
										},
										{
											"begin": 1884,
											"end": 1898,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1884,
											"end": 1898,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1898,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 1899,
											"end": 1909,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1911,
											"end": 1923,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 1884,
											"end": 1924,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "tag",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "tag",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 1884,
											"end": 1924,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "tag",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1884,
											"end": 1924,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1666,
											"end": 2004,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1624,
											"end": 2004,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "tag",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 474,
											"end": 536,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "tag",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1332,
											"end": 1339,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1391,
											"end": 1392,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1366,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1367,
											"end": 1377,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1360,
											"end": 1378,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1379,
											"end": 1387,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1388,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1360,
											"end": 1392,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 1352,
											"end": 1421,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "tag",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "tag",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 1352,
											"end": 1421,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1432,
											"end": 1444,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1465,
											"end": 1471,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1472,
											"end": 1482,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1465,
											"end": 1483,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1484,
											"end": 1492,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1493,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1447,
											"end": 1462,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 1447,
											"end": 1493,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 1447,
											"end": 1493,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1447,
											"end": 1493,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1447,
											"end": 1493,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 1447,
											"end": 1493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1447,
											"end": 1493,
											"name": "tag",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 1447,
											"end": 1493,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1432,
											"end": 1493,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1432,
											"end": 1493,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1504,
											"end": 1524,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1569,
											"end": 1578,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 1557,
											"end": 1565,
											"name": "PUSH",
											"source": 9,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 1549,
											"end": 1553,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 1541,
											"end": 1545,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1540,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 1527,
											"end": 1546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1546,
											"name": "tag",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 1527,
											"end": 1546,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1553,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 1527,
											"end": 1553,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1553,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1553,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 1527,
											"end": 1553,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1553,
											"name": "tag",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 1527,
											"end": 1553,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1566,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 1527,
											"end": 1566,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1566,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1566,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 1527,
											"end": 1566,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1566,
											"name": "tag",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 1527,
											"end": 1566,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 1527,
											"end": 1578,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1578,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 1527,
											"end": 1578,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1527,
											"end": 1578,
											"name": "tag",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 1527,
											"end": 1578,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1504,
											"end": 1578,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1504,
											"end": 1578,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1596,
											"end": 1608,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1589,
											"end": 1608,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1589,
											"end": 1608,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1589,
											"end": 1608,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1589,
											"end": 1608,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1269,
											"end": 1616,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 665,
											"end": 971,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 665,
											"end": 971,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 723,
											"end": 730,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 762,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 746,
											"end": 750,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 746,
											"end": 762,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 743,
											"end": 964,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 743,
											"end": 964,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 743,
											"end": 964,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 786,
											"end": 787,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 779,
											"end": 787,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 779,
											"end": 787,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 779,
											"end": 787,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 779,
											"end": 787,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 743,
											"end": 964,
											"name": "tag",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 743,
											"end": 964,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 815,
											"end": 824,
											"name": "PUSH",
											"source": 9,
											"value": "B4"
										},
										{
											"begin": 808,
											"end": 812,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 808,
											"end": 824,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 805,
											"end": 964,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 805,
											"end": 964,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 805,
											"end": 964,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 848,
											"end": 849,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 841,
											"end": 849,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 841,
											"end": 849,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 841,
											"end": 849,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 841,
											"end": 849,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 805,
											"end": 964,
											"name": "tag",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 805,
											"end": 964,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 877,
											"end": 886,
											"name": "PUSH",
											"source": 9,
											"value": "12C"
										},
										{
											"begin": 870,
											"end": 874,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 870,
											"end": 886,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 867,
											"end": 964,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 867,
											"end": 964,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 867,
											"end": 964,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 910,
											"end": 911,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 903,
											"end": 911,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 903,
											"end": 911,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 903,
											"end": 911,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 903,
											"end": 911,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 867,
											"end": 964,
											"name": "tag",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 867,
											"end": 964,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 950,
											"end": 952,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 943,
											"end": 952,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 943,
											"end": 952,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 665,
											"end": 971,
											"name": "tag",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 665,
											"end": 971,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 665,
											"end": 971,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 665,
											"end": 971,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 665,
											"end": 971,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 665,
											"end": 971,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7,
											"end": 82,
											"name": "tag",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 40,
											"end": 46,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 75,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 67,
											"end": 76,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 57,
											"end": 76,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 57,
											"end": 76,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7,
											"end": 82,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7,
											"end": 82,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 211,
											"end": 328,
											"name": "tag",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 211,
											"end": 328,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 334,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 532,
											"end": 556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 466,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 641,
											"end": 665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 568,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "127"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 796,
											"end": 829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 10,
											"value": "127"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 696,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 841,
											"end": 918,
											"name": "tag",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 841,
											"end": 918,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 878,
											"end": 885,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 907,
											"end": 912,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 896,
											"end": 912,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 896,
											"end": 912,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 841,
											"end": 918,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 841,
											"end": 918,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "tag",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 1015,
											"end": 1020,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 997,
											"end": 1021,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "tag",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 990,
											"end": 995,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 987,
											"end": 1022,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1034,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1026,
											"end": 1038,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "tag",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 924,
											"end": 1046,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1098,
											"end": 1103,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1123,
											"end": 1143,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 1179,
											"end": 1184,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 1152,
											"end": 1185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1052,
											"end": 1191,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1197,
											"end": 1314,
											"name": "tag",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 1197,
											"end": 1314,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1306,
											"end": 1307,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1303,
											"end": 1304,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1296,
											"end": 1308,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1320,
											"end": 1437,
											"name": "tag",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 1320,
											"end": 1437,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1429,
											"end": 1430,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1426,
											"end": 1427,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1419,
											"end": 1431,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1443,
											"end": 1545,
											"name": "tag",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 1443,
											"end": 1545,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1484,
											"end": 1490,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1535,
											"end": 1537,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1531,
											"end": 1538,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 1526,
											"end": 1528,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1519,
											"end": 1524,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1515,
											"end": 1529,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1511,
											"end": 1539,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1501,
											"end": 1539,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1501,
											"end": 1539,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1443,
											"end": 1545,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1443,
											"end": 1545,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1443,
											"end": 1545,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1443,
											"end": 1545,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1551,
											"end": 1731,
											"name": "tag",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 1551,
											"end": 1731,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1599,
											"end": 1676,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1596,
											"end": 1597,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1589,
											"end": 1677,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1696,
											"end": 1700,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 1693,
											"end": 1694,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1686,
											"end": 1701,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1720,
											"end": 1724,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 1717,
											"end": 1718,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1725,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1737,
											"end": 2018,
											"name": "tag",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 1737,
											"end": 2018,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1820,
											"end": 1847,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 1842,
											"end": 1846,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1820,
											"end": 1847,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 1820,
											"end": 1847,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1820,
											"end": 1847,
											"name": "tag",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 1820,
											"end": 1847,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1812,
											"end": 1818,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1808,
											"end": 1848,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1950,
											"end": 1956,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1938,
											"end": 1948,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1935,
											"end": 1957,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 1914,
											"end": 1932,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1902,
											"end": 1912,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1899,
											"end": 1933,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 1896,
											"end": 1958,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 1893,
											"end": 1981,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1893,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 1893,
											"end": 1981,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1961,
											"end": 1979,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 1961,
											"end": 1979,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 1961,
											"end": 1979,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1961,
											"end": 1979,
											"name": "tag",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 1961,
											"end": 1979,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1893,
											"end": 1981,
											"name": "tag",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 1893,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2001,
											"end": 2011,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1997,
											"end": 1999,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1990,
											"end": 2012,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1780,
											"end": 2018,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1737,
											"end": 2018,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1737,
											"end": 2018,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1737,
											"end": 2018,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2024,
											"end": 2153,
											"name": "tag",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 2024,
											"end": 2153,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2058,
											"end": 2064,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2085,
											"end": 2105,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 2085,
											"end": 2105,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "78"
										},
										{
											"begin": 2085,
											"end": 2105,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2085,
											"end": 2105,
											"name": "tag",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 2085,
											"end": 2105,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2075,
											"end": 2105,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2075,
											"end": 2105,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2114,
											"end": 2147,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 2142,
											"end": 2146,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2134,
											"end": 2140,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2114,
											"end": 2147,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 2114,
											"end": 2147,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2114,
											"end": 2147,
											"name": "tag",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 2114,
											"end": 2147,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2024,
											"end": 2153,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2024,
											"end": 2153,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2024,
											"end": 2153,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2024,
											"end": 2153,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2159,
											"end": 2466,
											"name": "tag",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 2159,
											"end": 2466,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2220,
											"end": 2224,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2310,
											"end": 2328,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2302,
											"end": 2308,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2299,
											"end": 2329,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2296,
											"end": 2352,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2296,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 2296,
											"end": 2352,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2332,
											"end": 2350,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 2332,
											"end": 2350,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 2332,
											"end": 2350,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2332,
											"end": 2350,
											"name": "tag",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 2332,
											"end": 2350,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2296,
											"end": 2352,
											"name": "tag",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 2296,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2370,
											"end": 2399,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 2392,
											"end": 2398,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2370,
											"end": 2399,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 2370,
											"end": 2399,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2370,
											"end": 2399,
											"name": "tag",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 2370,
											"end": 2399,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2362,
											"end": 2399,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2362,
											"end": 2399,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2454,
											"end": 2458,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2448,
											"end": 2452,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2444,
											"end": 2459,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2436,
											"end": 2459,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2436,
											"end": 2459,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2159,
											"end": 2466,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2159,
											"end": 2466,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2159,
											"end": 2466,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2159,
											"end": 2466,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2472,
											"end": 2618,
											"name": "tag",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 2472,
											"end": 2618,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2569,
											"end": 2575,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2564,
											"end": 2567,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2559,
											"end": 2562,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2546,
											"end": 2576,
											"name": "CALLDATACOPY",
											"source": 10
										},
										{
											"begin": 2610,
											"end": 2611,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2601,
											"end": 2607,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2599,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2592,
											"end": 2608,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2585,
											"end": 2612,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2472,
											"end": 2618,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2472,
											"end": 2618,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2472,
											"end": 2618,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2472,
											"end": 2618,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2624,
											"end": 3047,
											"name": "tag",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 2624,
											"end": 3047,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2701,
											"end": 2706,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2726,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 2742,
											"end": 2790,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 2783,
											"end": 2789,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2742,
											"end": 2790,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 2742,
											"end": 2790,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2742,
											"end": 2790,
											"name": "tag",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 2742,
											"end": 2790,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2726,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 2726,
											"end": 2791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2726,
											"end": 2791,
											"name": "tag",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 2726,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2717,
											"end": 2791,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2717,
											"end": 2791,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2814,
											"end": 2820,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2807,
											"end": 2812,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2800,
											"end": 2821,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2852,
											"end": 2856,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2845,
											"end": 2850,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2841,
											"end": 2857,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2890,
											"end": 2893,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2881,
											"end": 2887,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2876,
											"end": 2879,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2872,
											"end": 2888,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2869,
											"end": 2894,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2866,
											"end": 2978,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2866,
											"end": 2978,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 2866,
											"end": 2978,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2897,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 2897,
											"end": 2976,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 2897,
											"end": 2976,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2897,
											"end": 2976,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 2897,
											"end": 2976,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2866,
											"end": 2978,
											"name": "tag",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 2866,
											"end": 2978,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2987,
											"end": 3041,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 3034,
											"end": 3040,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3029,
											"end": 3032,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3024,
											"end": 3027,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2987,
											"end": 3041,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 2987,
											"end": 3041,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2987,
											"end": 3041,
											"name": "tag",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 2987,
											"end": 3041,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2707,
											"end": 3047,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2624,
											"end": 3047,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2624,
											"end": 3047,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2624,
											"end": 3047,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2624,
											"end": 3047,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2624,
											"end": 3047,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2624,
											"end": 3047,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3066,
											"end": 3404,
											"name": "tag",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 3066,
											"end": 3404,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3121,
											"end": 3126,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3170,
											"end": 3173,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3167,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 3155,
											"end": 3161,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3151,
											"end": 3168,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3147,
											"end": 3174,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3137,
											"end": 3259,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 3137,
											"end": 3259,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3178,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 3178,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 3178,
											"end": 3257,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3178,
											"end": 3257,
											"name": "tag",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 3178,
											"end": 3257,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3137,
											"end": 3259,
											"name": "tag",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 3137,
											"end": 3259,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3295,
											"end": 3301,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3282,
											"end": 3302,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 3320,
											"end": 3398,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 3394,
											"end": 3397,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3386,
											"end": 3392,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3379,
											"end": 3383,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3371,
											"end": 3377,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3367,
											"end": 3384,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3320,
											"end": 3398,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 3320,
											"end": 3398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3320,
											"end": 3398,
											"name": "tag",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 3320,
											"end": 3398,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3311,
											"end": 3398,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3311,
											"end": 3398,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3127,
											"end": 3404,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3066,
											"end": 3404,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3066,
											"end": 3404,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3066,
											"end": 3404,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3066,
											"end": 3404,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3066,
											"end": 3404,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3410,
											"end": 4353,
											"name": "tag",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 3410,
											"end": 4353,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3505,
											"end": 3511,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3513,
											"end": 3519,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3521,
											"end": 3527,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3529,
											"end": 3535,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3578,
											"end": 3581,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3566,
											"end": 3575,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3557,
											"end": 3564,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3553,
											"end": 3576,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3549,
											"end": 3582,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3546,
											"end": 3666,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3546,
											"end": 3666,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 3546,
											"end": 3666,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3585,
											"end": 3664,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 3585,
											"end": 3664,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 3585,
											"end": 3664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3585,
											"end": 3664,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 3585,
											"end": 3664,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3546,
											"end": 3666,
											"name": "tag",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 3546,
											"end": 3666,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3705,
											"end": 3706,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3730,
											"end": 3783,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 3775,
											"end": 3782,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3766,
											"end": 3772,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3755,
											"end": 3764,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 3751,
											"end": 3773,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3730,
											"end": 3783,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 3730,
											"end": 3783,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3730,
											"end": 3783,
											"name": "tag",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 3730,
											"end": 3783,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3720,
											"end": 3783,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3720,
											"end": 3783,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3676,
											"end": 3793,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3832,
											"end": 3834,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3858,
											"end": 3911,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 3903,
											"end": 3910,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3894,
											"end": 3900,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3883,
											"end": 3892,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 3879,
											"end": 3901,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3858,
											"end": 3911,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 3858,
											"end": 3911,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3858,
											"end": 3911,
											"name": "tag",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 3858,
											"end": 3911,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3848,
											"end": 3911,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 3848,
											"end": 3911,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3803,
											"end": 3921,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3960,
											"end": 3962,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3986,
											"end": 4039,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "165"
										},
										{
											"begin": 4031,
											"end": 4038,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4022,
											"end": 4028,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4011,
											"end": 4020,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3986,
											"end": 4039,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 3986,
											"end": 4039,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3986,
											"end": 4039,
											"name": "tag",
											"source": 10,
											"value": "165"
										},
										{
											"begin": 3986,
											"end": 4039,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3976,
											"end": 4039,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3976,
											"end": 4039,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3931,
											"end": 4049,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4116,
											"end": 4118,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4105,
											"end": 4114,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4101,
											"end": 4119,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4088,
											"end": 4120,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 4147,
											"end": 4165,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4139,
											"end": 4145,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4136,
											"end": 4166,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 4133,
											"end": 4250,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4133,
											"end": 4250,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "166"
										},
										{
											"begin": 4133,
											"end": 4250,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4169,
											"end": 4248,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 4169,
											"end": 4248,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 4169,
											"end": 4248,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4169,
											"end": 4248,
											"name": "tag",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 4169,
											"end": 4248,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4133,
											"end": 4250,
											"name": "tag",
											"source": 10,
											"value": "166"
										},
										{
											"begin": 4133,
											"end": 4250,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4274,
											"end": 4336,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 4328,
											"end": 4335,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4319,
											"end": 4325,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4308,
											"end": 4317,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 4304,
											"end": 4326,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4274,
											"end": 4336,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 4274,
											"end": 4336,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4274,
											"end": 4336,
											"name": "tag",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 4274,
											"end": 4336,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4264,
											"end": 4336,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4264,
											"end": 4336,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4059,
											"end": 4346,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3410,
											"end": 4353,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3410,
											"end": 4353,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 3410,
											"end": 4353,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3410,
											"end": 4353,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3410,
											"end": 4353,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3410,
											"end": 4353,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3410,
											"end": 4353,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3410,
											"end": 4353,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4359,
											"end": 4508,
											"name": "tag",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 4359,
											"end": 4508,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4395,
											"end": 4402,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4435,
											"end": 4501,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4428,
											"end": 4433,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4424,
											"end": 4502,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4413,
											"end": 4502,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4413,
											"end": 4502,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4359,
											"end": 4508,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4359,
											"end": 4508,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4359,
											"end": 4508,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4359,
											"end": 4508,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4514,
											"end": 4629,
											"name": "tag",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 4514,
											"end": 4629,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4599,
											"end": 4622,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 4616,
											"end": 4621,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4599,
											"end": 4622,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 4599,
											"end": 4622,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4599,
											"end": 4622,
											"name": "tag",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 4599,
											"end": 4622,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4594,
											"end": 4597,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4587,
											"end": 4623,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4514,
											"end": 4629,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4514,
											"end": 4629,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4514,
											"end": 4629,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4635,
											"end": 4853,
											"name": "tag",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 4635,
											"end": 4853,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4730,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4764,
											"end": 4766,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4753,
											"end": 4762,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4749,
											"end": 4767,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4741,
											"end": 4767,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4741,
											"end": 4767,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4777,
											"end": 4846,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 4843,
											"end": 4844,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4832,
											"end": 4841,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4828,
											"end": 4845,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4819,
											"end": 4825,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4777,
											"end": 4846,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 4777,
											"end": 4846,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4777,
											"end": 4846,
											"name": "tag",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 4777,
											"end": 4846,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4635,
											"end": 4853,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4635,
											"end": 4853,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4635,
											"end": 4853,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4635,
											"end": 4853,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4635,
											"end": 4853,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4859,
											"end": 5188,
											"name": "tag",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 4859,
											"end": 5188,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4924,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4967,
											"end": 4969,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4955,
											"end": 4964,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4946,
											"end": 4953,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4942,
											"end": 4965,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4938,
											"end": 4970,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 4935,
											"end": 5054,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4935,
											"end": 5054,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 4935,
											"end": 5054,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4973,
											"end": 5052,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 4973,
											"end": 5052,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 4973,
											"end": 5052,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4973,
											"end": 5052,
											"name": "tag",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 4973,
											"end": 5052,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4935,
											"end": 5054,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 4935,
											"end": 5054,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5093,
											"end": 5094,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5118,
											"end": 5171,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 5163,
											"end": 5170,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5154,
											"end": 5160,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5143,
											"end": 5152,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5139,
											"end": 5161,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5118,
											"end": 5171,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 5118,
											"end": 5171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5118,
											"end": 5171,
											"name": "tag",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 5118,
											"end": 5171,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5108,
											"end": 5171,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5108,
											"end": 5171,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5064,
											"end": 5181,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4859,
											"end": 5188,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4859,
											"end": 5188,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4859,
											"end": 5188,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4859,
											"end": 5188,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4859,
											"end": 5188,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5194,
											"end": 5668,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 5194,
											"end": 5668,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5262,
											"end": 5268,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5270,
											"end": 5276,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5319,
											"end": 5321,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5307,
											"end": 5316,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5298,
											"end": 5305,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5294,
											"end": 5317,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5290,
											"end": 5322,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5406,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5406,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 5287,
											"end": 5406,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5325,
											"end": 5404,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 5325,
											"end": 5404,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 5325,
											"end": 5404,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5325,
											"end": 5404,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 5325,
											"end": 5404,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5406,
											"name": "tag",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 5287,
											"end": 5406,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5445,
											"end": 5446,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5470,
											"end": 5523,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 5515,
											"end": 5522,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5506,
											"end": 5512,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5495,
											"end": 5504,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5491,
											"end": 5513,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5470,
											"end": 5523,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 5470,
											"end": 5523,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5470,
											"end": 5523,
											"name": "tag",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 5470,
											"end": 5523,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5460,
											"end": 5523,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5460,
											"end": 5523,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5416,
											"end": 5533,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5572,
											"end": 5574,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5598,
											"end": 5651,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 5643,
											"end": 5650,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5634,
											"end": 5640,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5623,
											"end": 5632,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5619,
											"end": 5641,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5598,
											"end": 5651,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 5598,
											"end": 5651,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5598,
											"end": 5651,
											"name": "tag",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 5598,
											"end": 5651,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5588,
											"end": 5651,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5588,
											"end": 5651,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5543,
											"end": 5661,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5194,
											"end": 5668,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5194,
											"end": 5668,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5194,
											"end": 5668,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5194,
											"end": 5668,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5194,
											"end": 5668,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5194,
											"end": 5668,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5674,
											"end": 5792,
											"name": "tag",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 5674,
											"end": 5792,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5761,
											"end": 5785,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 5779,
											"end": 5784,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5761,
											"end": 5785,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 5761,
											"end": 5785,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5761,
											"end": 5785,
											"name": "tag",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 5761,
											"end": 5785,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5756,
											"end": 5759,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5749,
											"end": 5786,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5674,
											"end": 5792,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5674,
											"end": 5792,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5674,
											"end": 5792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5798,
											"end": 6020,
											"name": "tag",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 5798,
											"end": 6020,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5891,
											"end": 5895,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5929,
											"end": 5931,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5918,
											"end": 5927,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5914,
											"end": 5932,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5906,
											"end": 5932,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5906,
											"end": 5932,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5942,
											"end": 6013,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 6010,
											"end": 6011,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5999,
											"end": 6008,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5995,
											"end": 6012,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5986,
											"end": 5992,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5942,
											"end": 6013,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 5942,
											"end": 6013,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5942,
											"end": 6013,
											"name": "tag",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 5942,
											"end": 6013,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5798,
											"end": 6020,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5798,
											"end": 6020,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5798,
											"end": 6020,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5798,
											"end": 6020,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5798,
											"end": 6020,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6026,
											"end": 6169,
											"name": "tag",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 6026,
											"end": 6169,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6083,
											"end": 6088,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6114,
											"end": 6120,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6108,
											"end": 6121,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6130,
											"end": 6163,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 6157,
											"end": 6162,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6130,
											"end": 6163,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 6130,
											"end": 6163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6130,
											"end": 6163,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 6130,
											"end": 6163,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6026,
											"end": 6169,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6026,
											"end": 6169,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6026,
											"end": 6169,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6026,
											"end": 6169,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6026,
											"end": 6169,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6175,
											"end": 6526,
											"name": "tag",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 6175,
											"end": 6526,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6245,
											"end": 6251,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6294,
											"end": 6296,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6282,
											"end": 6291,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6273,
											"end": 6280,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6269,
											"end": 6292,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 6265,
											"end": 6297,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 6262,
											"end": 6381,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6262,
											"end": 6381,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 6262,
											"end": 6381,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6300,
											"end": 6379,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 6300,
											"end": 6379,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 6300,
											"end": 6379,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6300,
											"end": 6379,
											"name": "tag",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 6300,
											"end": 6379,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6262,
											"end": 6381,
											"name": "tag",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 6262,
											"end": 6381,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6420,
											"end": 6421,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6445,
											"end": 6509,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 6501,
											"end": 6508,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6492,
											"end": 6498,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6481,
											"end": 6490,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6477,
											"end": 6499,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6445,
											"end": 6509,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 6445,
											"end": 6509,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6445,
											"end": 6509,
											"name": "tag",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 6445,
											"end": 6509,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6435,
											"end": 6509,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6435,
											"end": 6509,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6391,
											"end": 6519,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6175,
											"end": 6526,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6175,
											"end": 6526,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6175,
											"end": 6526,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6175,
											"end": 6526,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6175,
											"end": 6526,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6532,
											"end": 6701,
											"name": "tag",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 6532,
											"end": 6701,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6616,
											"end": 6627,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6650,
											"end": 6656,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6645,
											"end": 6648,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6638,
											"end": 6657,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6690,
											"end": 6694,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6685,
											"end": 6688,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6681,
											"end": 6695,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6666,
											"end": 6695,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6666,
											"end": 6695,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6532,
											"end": 6701,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6532,
											"end": 6701,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6532,
											"end": 6701,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6532,
											"end": 6701,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6532,
											"end": 6701,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6707,
											"end": 6880,
											"name": "tag",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 6707,
											"end": 6880,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6847,
											"end": 6872,
											"name": "PUSH",
											"source": 10,
											"value": "596F75277265206E6F74206F776E2074686973204E4654000000000000000000"
										},
										{
											"begin": 6843,
											"end": 6844,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6835,
											"end": 6841,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6831,
											"end": 6845,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6824,
											"end": 6873,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6707,
											"end": 6880,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6707,
											"end": 6880,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6886,
											"end": 7252,
											"name": "tag",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 6886,
											"end": 7252,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7028,
											"end": 7031,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7049,
											"end": 7116,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 7113,
											"end": 7115,
											"name": "PUSH",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 7108,
											"end": 7111,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7049,
											"end": 7116,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 7049,
											"end": 7116,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7049,
											"end": 7116,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 7049,
											"end": 7116,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7042,
											"end": 7116,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7042,
											"end": 7116,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7125,
											"end": 7218,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 7214,
											"end": 7217,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7125,
											"end": 7218,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 7125,
											"end": 7218,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7125,
											"end": 7218,
											"name": "tag",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 7125,
											"end": 7218,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7243,
											"end": 7245,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7238,
											"end": 7241,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7234,
											"end": 7246,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7227,
											"end": 7246,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7227,
											"end": 7246,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6886,
											"end": 7252,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6886,
											"end": 7252,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6886,
											"end": 7252,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6886,
											"end": 7252,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7258,
											"end": 7677,
											"name": "tag",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7258,
											"end": 7677,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7424,
											"end": 7428,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7462,
											"end": 7464,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7451,
											"end": 7460,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7447,
											"end": 7465,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7439,
											"end": 7465,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7439,
											"end": 7465,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7511,
											"end": 7520,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7505,
											"end": 7509,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7501,
											"end": 7521,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7497,
											"end": 7498,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7486,
											"end": 7495,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7482,
											"end": 7499,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7475,
											"end": 7522,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7539,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 7665,
											"end": 7669,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7539,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 7539,
											"end": 7670,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7539,
											"end": 7670,
											"name": "tag",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 7539,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7531,
											"end": 7670,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7531,
											"end": 7670,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7258,
											"end": 7677,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7258,
											"end": 7677,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7258,
											"end": 7677,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7258,
											"end": 7677,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7683,
											"end": 7801,
											"name": "tag",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 7683,
											"end": 7801,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7770,
											"end": 7794,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 7788,
											"end": 7793,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7770,
											"end": 7794,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 7770,
											"end": 7794,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7770,
											"end": 7794,
											"name": "tag",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 7770,
											"end": 7794,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7765,
											"end": 7768,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7758,
											"end": 7795,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7683,
											"end": 7801,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7683,
											"end": 7801,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7683,
											"end": 7801,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7807,
											"end": 7975,
											"name": "tag",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 7807,
											"end": 7975,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7890,
											"end": 7901,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7924,
											"end": 7930,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7919,
											"end": 7922,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7912,
											"end": 7931,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7964,
											"end": 7968,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7959,
											"end": 7962,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7955,
											"end": 7969,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7940,
											"end": 7969,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7940,
											"end": 7969,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7807,
											"end": 7975,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7807,
											"end": 7975,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7807,
											"end": 7975,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7807,
											"end": 7975,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7807,
											"end": 7975,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7981,
											"end": 8095,
											"name": "tag",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 7981,
											"end": 8095,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7981,
											"end": 8095,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7981,
											"end": 8095,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8101,
											"end": 8463,
											"name": "tag",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 8101,
											"end": 8463,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8242,
											"end": 8245,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8263,
											"end": 8328,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "205"
										},
										{
											"begin": 8326,
											"end": 8327,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8321,
											"end": 8324,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8263,
											"end": 8328,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 8263,
											"end": 8328,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8263,
											"end": 8328,
											"name": "tag",
											"source": 10,
											"value": "205"
										},
										{
											"begin": 8263,
											"end": 8328,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8256,
											"end": 8328,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8256,
											"end": 8328,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8337,
											"end": 8430,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 8426,
											"end": 8429,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8337,
											"end": 8430,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 8337,
											"end": 8430,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8337,
											"end": 8430,
											"name": "tag",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 8337,
											"end": 8430,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8455,
											"end": 8456,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8450,
											"end": 8453,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8446,
											"end": 8457,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8439,
											"end": 8457,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8439,
											"end": 8457,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8101,
											"end": 8463,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8101,
											"end": 8463,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8101,
											"end": 8463,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8101,
											"end": 8463,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 9217,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 8469,
											"end": 9217,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8718,
											"end": 8722,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8756,
											"end": 8759,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 8745,
											"end": 8754,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8741,
											"end": 8760,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8733,
											"end": 8760,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8733,
											"end": 8760,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8770,
											"end": 8841,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 8838,
											"end": 8839,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8827,
											"end": 8836,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8823,
											"end": 8840,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8820,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 8770,
											"end": 8841,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 8770,
											"end": 8841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8770,
											"end": 8841,
											"name": "tag",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 8770,
											"end": 8841,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8851,
											"end": 8923,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 8919,
											"end": 8921,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8908,
											"end": 8917,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8904,
											"end": 8922,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8895,
											"end": 8901,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8851,
											"end": 8923,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 8851,
											"end": 8923,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8851,
											"end": 8923,
											"name": "tag",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 8851,
											"end": 8923,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8933,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 9001,
											"end": 9003,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8990,
											"end": 8999,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8986,
											"end": 9004,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8977,
											"end": 8983,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8933,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 8933,
											"end": 9005,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8933,
											"end": 9005,
											"name": "tag",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 8933,
											"end": 9005,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9052,
											"end": 9061,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9046,
											"end": 9050,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9042,
											"end": 9062,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 9037,
											"end": 9039,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 9026,
											"end": 9035,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9022,
											"end": 9040,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9015,
											"end": 9063,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9080,
											"end": 9210,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 9205,
											"end": 9209,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9080,
											"end": 9210,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 9080,
											"end": 9210,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9080,
											"end": 9210,
											"name": "tag",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 9080,
											"end": 9210,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9072,
											"end": 9210,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9072,
											"end": 9210,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 9217,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 9217,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 9217,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 9217,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 9217,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 9217,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8469,
											"end": 9217,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9223,
											"end": 9555,
											"name": "tag",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 9223,
											"end": 9555,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9348,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9382,
											"end": 9384,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9371,
											"end": 9380,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9367,
											"end": 9385,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9359,
											"end": 9385,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9359,
											"end": 9385,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9395,
											"end": 9466,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 9463,
											"end": 9464,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9452,
											"end": 9461,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9448,
											"end": 9465,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9439,
											"end": 9445,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9395,
											"end": 9466,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 9395,
											"end": 9466,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9395,
											"end": 9466,
											"name": "tag",
											"source": 10,
											"value": "213"
										},
										{
											"begin": 9395,
											"end": 9466,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9476,
											"end": 9548,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 9544,
											"end": 9546,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9533,
											"end": 9542,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9529,
											"end": 9547,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9520,
											"end": 9526,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9476,
											"end": 9548,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 9476,
											"end": 9548,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9476,
											"end": 9548,
											"name": "tag",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 9476,
											"end": 9548,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9223,
											"end": 9555,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 9223,
											"end": 9555,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9223,
											"end": 9555,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9223,
											"end": 9555,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9223,
											"end": 9555,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9223,
											"end": 9555,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9561,
											"end": 9651,
											"name": "tag",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 9561,
											"end": 9651,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9595,
											"end": 9602,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9638,
											"end": 9643,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9631,
											"end": 9644,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9624,
											"end": 9645,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9613,
											"end": 9645,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9613,
											"end": 9645,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9561,
											"end": 9651,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9561,
											"end": 9651,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9561,
											"end": 9651,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9561,
											"end": 9651,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9657,
											"end": 9773,
											"name": "tag",
											"source": 10,
											"value": "110"
										},
										{
											"begin": 9657,
											"end": 9773,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9727,
											"end": 9748,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 9742,
											"end": 9747,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9727,
											"end": 9748,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 9727,
											"end": 9748,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9727,
											"end": 9748,
											"name": "tag",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 9727,
											"end": 9748,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9720,
											"end": 9725,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9717,
											"end": 9749,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9707,
											"end": 9767,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 9707,
											"end": 9767,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9763,
											"end": 9764,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9760,
											"end": 9761,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9753,
											"end": 9765,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 9707,
											"end": 9767,
											"name": "tag",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 9707,
											"end": 9767,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9657,
											"end": 9773,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9657,
											"end": 9773,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9779,
											"end": 9916,
											"name": "tag",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 9779,
											"end": 9916,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9833,
											"end": 9838,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9864,
											"end": 9870,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9858,
											"end": 9871,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 9849,
											"end": 9871,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9849,
											"end": 9871,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9880,
											"end": 9910,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 9904,
											"end": 9909,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9880,
											"end": 9910,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "110"
										},
										{
											"begin": 9880,
											"end": 9910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9880,
											"end": 9910,
											"name": "tag",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 9880,
											"end": 9910,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9779,
											"end": 9916,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9779,
											"end": 9916,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9779,
											"end": 9916,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9779,
											"end": 9916,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9779,
											"end": 9916,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9922,
											"end": 10267,
											"name": "tag",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 9922,
											"end": 10267,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9989,
											"end": 9995,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10038,
											"end": 10040,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10026,
											"end": 10035,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10017,
											"end": 10024,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10013,
											"end": 10036,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 10009,
											"end": 10041,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 10006,
											"end": 10125,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10006,
											"end": 10125,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 10006,
											"end": 10125,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10044,
											"end": 10123,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 10044,
											"end": 10123,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 10044,
											"end": 10123,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10044,
											"end": 10123,
											"name": "tag",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 10044,
											"end": 10123,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10006,
											"end": 10125,
											"name": "tag",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 10006,
											"end": 10125,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10164,
											"end": 10165,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10189,
											"end": 10250,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 10242,
											"end": 10249,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10233,
											"end": 10239,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10222,
											"end": 10231,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10218,
											"end": 10240,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10189,
											"end": 10250,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 10189,
											"end": 10250,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10189,
											"end": 10250,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 10189,
											"end": 10250,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10179,
											"end": 10250,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10179,
											"end": 10250,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10135,
											"end": 10260,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9922,
											"end": 10267,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9922,
											"end": 10267,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9922,
											"end": 10267,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9922,
											"end": 10267,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9922,
											"end": 10267,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10273,
											"end": 10447,
											"name": "tag",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 10273,
											"end": 10447,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10413,
											"end": 10439,
											"name": "PUSH",
											"source": 10,
											"value": "596F75206E65766572207374616B652074686973204E46540000000000000000"
										},
										{
											"begin": 10409,
											"end": 10410,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10401,
											"end": 10407,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10397,
											"end": 10411,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10390,
											"end": 10440,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10273,
											"end": 10447,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10273,
											"end": 10447,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10453,
											"end": 10819,
											"name": "tag",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 10453,
											"end": 10819,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10595,
											"end": 10598,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10616,
											"end": 10683,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 10680,
											"end": 10682,
											"name": "PUSH",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 10675,
											"end": 10678,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10616,
											"end": 10683,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 10616,
											"end": 10683,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10616,
											"end": 10683,
											"name": "tag",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 10616,
											"end": 10683,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10609,
											"end": 10683,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10609,
											"end": 10683,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10692,
											"end": 10785,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 10781,
											"end": 10784,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10692,
											"end": 10785,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 10692,
											"end": 10785,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10692,
											"end": 10785,
											"name": "tag",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 10692,
											"end": 10785,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10810,
											"end": 10812,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10805,
											"end": 10808,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10801,
											"end": 10813,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10794,
											"end": 10813,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10794,
											"end": 10813,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10453,
											"end": 10819,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10453,
											"end": 10819,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10453,
											"end": 10819,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10453,
											"end": 10819,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10825,
											"end": 11244,
											"name": "tag",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 10825,
											"end": 11244,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10991,
											"end": 10995,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11029,
											"end": 11031,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11018,
											"end": 11027,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11014,
											"end": 11032,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11006,
											"end": 11032,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11006,
											"end": 11032,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11078,
											"end": 11087,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11072,
											"end": 11076,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11068,
											"end": 11088,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 11064,
											"end": 11065,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11053,
											"end": 11062,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11049,
											"end": 11066,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11042,
											"end": 11089,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11106,
											"end": 11237,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 11232,
											"end": 11236,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11106,
											"end": 11237,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 11106,
											"end": 11237,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11106,
											"end": 11237,
											"name": "tag",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 11106,
											"end": 11237,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11098,
											"end": 11237,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11098,
											"end": 11237,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10825,
											"end": 11244,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10825,
											"end": 11244,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10825,
											"end": 11244,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10825,
											"end": 11244,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11250,
											"end": 11430,
											"name": "tag",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 11250,
											"end": 11430,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11298,
											"end": 11375,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11295,
											"end": 11296,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11288,
											"end": 11376,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11395,
											"end": 11399,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 11392,
											"end": 11393,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 11385,
											"end": 11400,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11419,
											"end": 11423,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 11416,
											"end": 11417,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11409,
											"end": 11424,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 11436,
											"end": 11630,
											"name": "tag",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 11436,
											"end": 11630,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11476,
											"end": 11480,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11496,
											"end": 11516,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 11514,
											"end": 11515,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11496,
											"end": 11516,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 11496,
											"end": 11516,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11496,
											"end": 11516,
											"name": "tag",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 11496,
											"end": 11516,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11491,
											"end": 11516,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11491,
											"end": 11516,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11530,
											"end": 11550,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 11548,
											"end": 11549,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11530,
											"end": 11550,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 11530,
											"end": 11550,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11530,
											"end": 11550,
											"name": "tag",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 11530,
											"end": 11550,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11525,
											"end": 11550,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11525,
											"end": 11550,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11574,
											"end": 11575,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11571,
											"end": 11572,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11567,
											"end": 11576,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 11559,
											"end": 11576,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11559,
											"end": 11576,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11598,
											"end": 11599,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11592,
											"end": 11596,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11589,
											"end": 11600,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 11586,
											"end": 11623,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11586,
											"end": 11623,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 11586,
											"end": 11623,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 11603,
											"end": 11621,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 11603,
											"end": 11621,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 11603,
											"end": 11621,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11603,
											"end": 11621,
											"name": "tag",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 11603,
											"end": 11621,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11586,
											"end": 11623,
											"name": "tag",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 11586,
											"end": 11623,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11436,
											"end": 11630,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11436,
											"end": 11630,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11436,
											"end": 11630,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11436,
											"end": 11630,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11436,
											"end": 11630,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11636,
											"end": 12046,
											"name": "tag",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 11636,
											"end": 12046,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11676,
											"end": 11683,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11699,
											"end": 11719,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 11717,
											"end": 11718,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11699,
											"end": 11719,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 11699,
											"end": 11719,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11699,
											"end": 11719,
											"name": "tag",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 11699,
											"end": 11719,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11694,
											"end": 11719,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11694,
											"end": 11719,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11733,
											"end": 11753,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 11751,
											"end": 11752,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11733,
											"end": 11753,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 11733,
											"end": 11753,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11733,
											"end": 11753,
											"name": "tag",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 11733,
											"end": 11753,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11728,
											"end": 11753,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11728,
											"end": 11753,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11788,
											"end": 11789,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11785,
											"end": 11786,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11781,
											"end": 11790,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 11810,
											"end": 11840,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 11828,
											"end": 11839,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11810,
											"end": 11840,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 11810,
											"end": 11840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11810,
											"end": 11840,
											"name": "tag",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 11810,
											"end": 11840,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11799,
											"end": 11840,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11799,
											"end": 11840,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11989,
											"end": 11990,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11980,
											"end": 11987,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11976,
											"end": 11991,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 11973,
											"end": 11974,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11970,
											"end": 11992,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 11950,
											"end": 11951,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11943,
											"end": 11952,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11923,
											"end": 12006,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 11900,
											"end": 12039,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 11900,
											"end": 12039,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12019,
											"end": 12037,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 12019,
											"end": 12037,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 12019,
											"end": 12037,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12019,
											"end": 12037,
											"name": "tag",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 12019,
											"end": 12037,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11900,
											"end": 12039,
											"name": "tag",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 11900,
											"end": 12039,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11684,
											"end": 12046,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11636,
											"end": 12046,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11636,
											"end": 12046,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11636,
											"end": 12046,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11636,
											"end": 12046,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11636,
											"end": 12046,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12052,
											"end": 12232,
											"name": "tag",
											"source": 10,
											"value": "115"
										},
										{
											"begin": 12052,
											"end": 12232,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12100,
											"end": 12177,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12097,
											"end": 12098,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12090,
											"end": 12178,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 12197,
											"end": 12201,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 12194,
											"end": 12195,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 12187,
											"end": 12202,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 12221,
											"end": 12225,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 12218,
											"end": 12219,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12211,
											"end": 12226,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 12238,
											"end": 12423,
											"name": "tag",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 12238,
											"end": 12423,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12278,
											"end": 12279,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12295,
											"end": 12315,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 12313,
											"end": 12314,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12295,
											"end": 12315,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 12295,
											"end": 12315,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12295,
											"end": 12315,
											"name": "tag",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 12295,
											"end": 12315,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12290,
											"end": 12315,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12290,
											"end": 12315,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12329,
											"end": 12349,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 12347,
											"end": 12348,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12329,
											"end": 12349,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 12329,
											"end": 12349,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12329,
											"end": 12349,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 12329,
											"end": 12349,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12324,
											"end": 12349,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 12324,
											"end": 12349,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12368,
											"end": 12369,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12373,
											"end": 12391,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 12373,
											"end": 12391,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "115"
										},
										{
											"begin": 12373,
											"end": 12391,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12373,
											"end": 12391,
											"name": "tag",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 12373,
											"end": 12391,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "tag",
											"source": 10,
											"value": "247"
										},
										{
											"begin": 12358,
											"end": 12393,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12415,
											"end": 12416,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12412,
											"end": 12413,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12408,
											"end": 12417,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 12403,
											"end": 12417,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12403,
											"end": 12417,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12238,
											"end": 12423,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 12238,
											"end": 12423,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12238,
											"end": 12423,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12238,
											"end": 12423,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12238,
											"end": 12423,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
								"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts@5.0.1/utils/introspection/IERC165.sol",
								"contracts/StakeTokenStaking.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"calculateReward(uint256)": "d2d7231f",
							"onERC721Received(address,address,uint256,bytes)": "150b7a02",
							"stakes(address,uint256)": "584b62a1",
							"staking(uint256)": "1dbb2a22",
							"unstake(uint256)": "2e17de78"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"staking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeTokenStaking.sol\":\"Staking\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"keccak256\":\"0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5396e8dbb000c2fada59b7d2093b9c7c870fd09413ab0fdaba45d882959c6244\",\"dweb:/ipfs/QmXQn5XckSiUsUBpMYuiFeqnojRX4rKa9jmgjCPeTuPmhh\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts@5.0.1/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"contracts/StakeTokenStaking.sol\":{\"keccak256\":\"0x40a8792602209401b62cf4b2ec461cac70f2c41758572d2bd3f94c69d58b3e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51aaffc56f318bb8972ffde05e33cbb02abc6b497fffa4ba8ceba784a1d579bc\",\"dweb:/ipfs/QmQbSS4oPAY1FikknHSgg3b1BPTsYodjkdTd9uZY6epMrJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 981,
								"contract": "contracts/StakeTokenStaking.sol:Staking",
								"label": "stakes",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_uint256)"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							136
						],
						"IERC20Errors": [
							41
						],
						"IERC721Errors": [
							89
						]
					},
					"id": 137,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:0",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 41,
							"linearizedBaseContracts": [
								41
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 11,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "652:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "668:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "685:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:0"
									},
									"src": "621:80:0"
								},
								{
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 16,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "889:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:0"
									},
									"src": "864:41:0"
								},
								{
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 21,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "1102:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:0"
									},
									"src": "1075:45:0"
								},
								{
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:0",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 30,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1509:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1526:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1545:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 27,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:0"
									},
									"src": "1476:85:0"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 35,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1773:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:0"
									},
									"src": "1746:45:0"
								},
								{
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:0",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 40,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2023:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 37,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:0"
									},
									"src": "1997:43:0"
								}
							],
							"scope": 137,
							"src": "278:1764:0",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 42,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:0",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 89,
							"linearizedBaseContracts": [
								89
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:0",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 47,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "2465:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 44,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:0"
									},
									"src": "2440:40:0"
								},
								{
									"documentation": {
										"id": 48,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:0",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 52,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2652:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:0"
									},
									"src": "2623:46:0"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:0",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 61,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "2996:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3012:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 56,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3029:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 58,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:0"
									},
									"src": "2969:75:0"
								},
								{
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 66,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 66,
												"src": "3233:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 63,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:0"
									},
									"src": "3207:42:0"
								},
								{
									"documentation": {
										"id": 67,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 71,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "3447:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:0"
									},
									"src": "3419:46:0"
								},
								{
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 78,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3756:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3774:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:0"
									},
									"src": "3723:68:0"
								},
								{
									"documentation": {
										"id": 79,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 83,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "4004:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:0"
									},
									"src": "3976:46:0"
								},
								{
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 88,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "4258:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:0"
									},
									"src": "4230:46:0"
								}
							],
							"scope": 137,
							"src": "2186:2092:0",
							"usedErrors": [
								47,
								52,
								61,
								66,
								71,
								78,
								83,
								88
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 90,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:0",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 136,
							"linearizedBaseContracts": [
								136
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 91,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 101,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4854:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4870:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 94,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4887:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4903:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:0"
									},
									"src": "4821:99:0"
								},
								{
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 106,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "5110:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:0"
									},
									"src": "5083:43:0"
								},
								{
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 111,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "5325:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:0"
									},
									"src": "5296:47:0"
								},
								{
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 118,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "5645:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "5663:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:0"
									},
									"src": "5610:68:0"
								},
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 123,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "5892:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:0"
									},
									"src": "5863:47:0"
								},
								{
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 128,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "6147:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:0"
									},
									"src": "6118:47:0"
								},
								{
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:0",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 135,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "6488:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "6507:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:0"
									},
									"src": "6456:73:0"
								}
							],
							"scope": 137,
							"src": "4424:2107:0",
							"usedErrors": [
								101,
								106,
								111,
								118,
								123,
								128,
								135
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							830
						],
						"ERC20": [
							651
						],
						"IERC20": [
							729
						],
						"IERC20Errors": [
							41
						],
						"IERC20Metadata": [
							755
						]
					},
					"id": 652,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 138,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 140,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 730,
							"src": "131:36:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 139,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 729,
										"src": "139:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 142,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 756,
							"src": "168:63:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 141,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 755,
										"src": "176:14:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 144,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 831,
							"src": "232:48:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 143,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 830,
										"src": "240:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 146,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 137,
							"src": "281:65:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 145,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 41,
										"src": "289:12:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 148,
										"name": "Context",
										"nameLocations": [
											"1428:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 830,
										"src": "1428:7:1"
									},
									"id": 149,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:1"
								},
								{
									"baseName": {
										"id": 150,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 729,
										"src": "1437:6:1"
									},
									"id": 151,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:1"
								},
								{
									"baseName": {
										"id": 152,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 755,
										"src": "1445:14:1"
									},
									"id": 153,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:1"
								},
								{
									"baseName": {
										"id": 154,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 41,
										"src": "1461:12:1"
									},
									"id": 155,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:1"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:1",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 651,
							"linearizedBaseContracts": [
								651,
								41,
								755,
								729,
								830
							],
							"name": "ERC20",
							"nameLocation": "1419:5:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 159,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1480:53:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 158,
										"keyName": "account",
										"keyNameLocation": "1496:7:1",
										"keyType": {
											"id": 156,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 157,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 165,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1540:83:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 164,
										"keyName": "account",
										"keyNameLocation": "1556:7:1",
										"keyType": {
											"id": 160,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 163,
											"keyName": "spender",
											"keyNameLocation": "1583:7:1",
											"keyType": {
												"id": 161,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 162,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 167,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1630:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 166,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 169,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1665:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 168,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 171,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1691:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 170,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 187,
										"nodeType": "Block",
										"src": "1952:57:1",
										"statements": [
											{
												"expression": {
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 179,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 169,
														"src": "1962:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 180,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 174,
														"src": "1970:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 182,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:1"
											},
											{
												"expression": {
													"id": 185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 183,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 171,
														"src": "1985:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 184,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 176,
														"src": "1995:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 186,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:1"
											}
										]
									},
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:1",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 188,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1908:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 173,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1929:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 175,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:1"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:1"
									},
									"scope": 651,
									"src": "1896:113:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										742
									],
									"body": {
										"id": 196,
										"nodeType": "Block",
										"src": "2134:29:1",
										"statements": [
											{
												"expression": {
													"id": 194,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 169,
													"src": "2151:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 193,
												"id": 195,
												"nodeType": "Return",
												"src": "2144:12:1"
											}
										]
									},
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:1",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "2119:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 191,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:1"
									},
									"scope": 651,
									"src": "2074:89:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										748
									],
									"body": {
										"id": 205,
										"nodeType": "Block",
										"src": "2338:31:1",
										"statements": [
											{
												"expression": {
													"id": 203,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 171,
													"src": "2355:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 202,
												"id": 204,
												"nodeType": "Return",
												"src": "2348:14:1"
											}
										]
									},
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:1",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 206,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:1"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "2323:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 200,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:1"
									},
									"scope": 651,
									"src": "2276:93:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										754
									],
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "3058:26:1",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 211,
												"id": 213,
												"nodeType": "Return",
												"src": "3068:9:1"
											}
										]
									},
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:1",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:1"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "3051:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 209,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:1"
									},
									"scope": 651,
									"src": "3002:82:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										678
									],
									"body": {
										"id": 223,
										"nodeType": "Block",
										"src": "3205:36:1",
										"statements": [
											{
												"expression": {
													"id": 221,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 167,
													"src": "3222:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 220,
												"id": 222,
												"nodeType": "Return",
												"src": "3215:19:1"
											}
										]
									},
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:1",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:1"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "3196:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:1"
									},
									"scope": 651,
									"src": "3144:97:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										686
									],
									"body": {
										"id": 236,
										"nodeType": "Block",
										"src": "3373:42:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 232,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 159,
														"src": "3390:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 234,
													"indexExpression": {
														"id": 233,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 227,
														"src": "3400:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 231,
												"id": 235,
												"nodeType": "Return",
												"src": "3383:25:1"
											}
										]
									},
									"documentation": {
										"id": 225,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:1",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3318:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:1"
									},
									"returnParameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3364:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:1"
									},
									"scope": 651,
									"src": "3299:116:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										696
									],
									"body": {
										"id": 260,
										"nodeType": "Block",
										"src": "3685:103:1",
										"statements": [
											{
												"assignments": [
													248
												],
												"declarations": [
													{
														"constant": false,
														"id": 248,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 260,
														"src": "3695:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 247,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 251,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 249,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 812,
														"src": "3711:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 253,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "3743:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 254,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "3750:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 255,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "3754:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 252,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 381,
														"src": "3733:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 258,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 246,
												"id": 259,
												"nodeType": "Return",
												"src": "3770:11:1"
											}
										]
									},
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:1",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3628:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3640:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:1"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3679:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 244,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:1"
									},
									"scope": 651,
									"src": "3610:178:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										706
									],
									"body": {
										"id": 277,
										"nodeType": "Block",
										"src": "3935:51:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 271,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 165,
															"src": "3952:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 273,
														"indexExpression": {
															"id": 272,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 264,
															"src": "3964:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 275,
													"indexExpression": {
														"id": 274,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 266,
														"src": "3971:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 270,
												"id": 276,
												"nodeType": "Return",
												"src": "3945:34:1"
											}
										]
									},
									"documentation": {
										"id": 262,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:1",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 278,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3865:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3880:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:1"
									},
									"returnParameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3926:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:1"
									},
									"scope": 651,
									"src": "3846:140:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										716
									],
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "4372:107:1",
										"statements": [
											{
												"assignments": [
													289
												],
												"declarations": [
													{
														"constant": false,
														"id": 289,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4382:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 288,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 292,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 290,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 812,
														"src": "4398:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 294,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 289,
															"src": "4429:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 295,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "4436:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 296,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "4445:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 293,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															542,
															602
														],
														"referencedDeclaration": 542,
														"src": "4420:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 299,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 287,
												"id": 300,
												"nodeType": "Return",
												"src": "4461:11:1"
											}
										]
									},
									"documentation": {
										"id": 279,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:1",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 302,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4310:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 280,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4327:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 282,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:1"
									},
									"returnParameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4366:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 285,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:1"
									},
									"scope": 651,
									"src": "4293:186:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										728
									],
									"body": {
										"id": 333,
										"nodeType": "Block",
										"src": "5132:151:1",
										"statements": [
											{
												"assignments": [
													315
												],
												"declarations": [
													{
														"constant": false,
														"id": 315,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 333,
														"src": "5142:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 314,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 318,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 316,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 812,
														"src": "5160:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 320,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "5198:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 321,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "5204:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 322,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "5213:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 319,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "5182:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 324,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 326,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "5239:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 327,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 307,
															"src": "5245:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 328,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "5249:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 325,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 381,
														"src": "5229:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 313,
												"id": 332,
												"nodeType": "Return",
												"src": "5265:11:1"
											}
										]
									},
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:1",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "5061:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "5075:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 306,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "5087:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:1"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "5126:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 311,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:1"
									},
									"scope": 651,
									"src": "5039:244:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 380,
										"nodeType": "Block",
										"src": "5725:231:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 344,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 337,
														"src": "5739:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 347,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 346,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 345,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 348,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 358,
												"nodeType": "IfStatement",
												"src": "5735:86:1",
												"trueBody": {
													"id": 357,
													"nodeType": "Block",
													"src": "5759:62:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 353,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 352,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 351,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 354,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 350,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "5780:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 356,
															"nodeType": "RevertStatement",
															"src": "5773:37:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 359,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 339,
														"src": "5834:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 360,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 363,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 373,
												"nodeType": "IfStatement",
												"src": "5830:86:1",
												"trueBody": {
													"id": 372,
													"nodeType": "Block",
													"src": "5852:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 368,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 367,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 366,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 369,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 365,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "5873:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 371,
															"nodeType": "RevertStatement",
															"src": "5866:39:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 375,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 337,
															"src": "5933:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 376,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "5939:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 377,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "5943:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 374,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "5925:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 379,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:1"
											}
										]
									},
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5675:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5689:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5701:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:1"
									},
									"returnParameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:1"
									},
									"scope": 651,
									"src": "5656:300:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "6346:1032:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 391,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "6360:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 394,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 393,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 392,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 395,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 428,
													"nodeType": "Block",
													"src": "6534:362:1",
													"statements": [
														{
															"assignments": [
																403
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 403,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 428,
																	"src": "6548:19:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 402,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 407,
															"initialValue": {
																"baseExpression": {
																	"id": 404,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 159,
																	"src": "6570:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 406,
																"indexExpression": {
																	"id": 405,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "6580:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:1"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 410,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 408,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 403,
																	"src": "6603:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 409,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "6617:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 418,
															"nodeType": "IfStatement",
															"src": "6599:115:1",
															"trueBody": {
																"id": 417,
																"nodeType": "Block",
																"src": "6624:90:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 412,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 384,
																					"src": "6674:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 413,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 403,
																					"src": "6680:11:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 414,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 388,
																					"src": "6693:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 411,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 11,
																				"src": "6649:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 415,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 416,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:1"
																	}
																]
															}
														},
														{
															"id": 427,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:1",
															"statements": [
																{
																	"expression": {
																		"id": 425,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 419,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "6834:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 421,
																			"indexExpression": {
																				"id": 420,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 384,
																				"src": "6844:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 424,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 422,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 403,
																				"src": "6852:11:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 423,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 388,
																				"src": "6866:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 426,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:1"
																}
															]
														}
													]
												},
												"id": 429,
												"nodeType": "IfStatement",
												"src": "6356:540:1",
												"trueBody": {
													"id": 401,
													"nodeType": "Block",
													"src": "6380:148:1",
													"statements": [
														{
															"expression": {
																"id": 399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 397,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 167,
																	"src": "6496:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 398,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "6512:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 400,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 430,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "6910:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 433,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 432,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 431,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 434,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 449,
													"nodeType": "Block",
													"src": "7125:206:1",
													"statements": [
														{
															"id": 448,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:1",
															"statements": [
																{
																	"expression": {
																		"id": 446,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 442,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "7284:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 444,
																			"indexExpression": {
																				"id": 443,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 386,
																				"src": "7294:2:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 445,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "7301:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 447,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:1"
																}
															]
														}
													]
												},
												"id": 450,
												"nodeType": "IfStatement",
												"src": "6906:425:1",
												"trueBody": {
													"id": 441,
													"nodeType": "Block",
													"src": "6928:191:1",
													"statements": [
														{
															"id": 440,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:1",
															"statements": [
																{
																	"expression": {
																		"id": 438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 436,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 167,
																			"src": "7073:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 437,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "7089:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 439,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:1"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 452,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "7355:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 453,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 386,
															"src": "7361:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 454,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "7365:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 451,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 663,
														"src": "7346:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 456,
												"nodeType": "EmitStatement",
												"src": "7341:30:1"
											}
										]
									},
									"documentation": {
										"id": 382,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:1",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6288:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6302:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6314:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:1"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:1"
									},
									"scope": 651,
									"src": "6271:1107:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 490,
										"nodeType": "Block",
										"src": "7777:152:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 466,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "7791:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 469,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 467,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 470,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 480,
												"nodeType": "IfStatement",
												"src": "7787:91:1",
												"trueBody": {
													"id": 479,
													"nodeType": "Block",
													"src": "7814:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 475,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 474,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 473,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 476,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 472,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "7835:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 478,
															"nodeType": "RevertStatement",
															"src": "7828:39:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 484,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 483,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 482,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 486,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "7907:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 487,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "7916:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 481,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "7887:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 489,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:1"
											}
										]
									},
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:1",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7736:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7753:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:1"
									},
									"returnParameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:1"
									},
									"scope": 651,
									"src": "7721:208:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 523,
										"nodeType": "Block",
										"src": "8303:150:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 499,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 494,
														"src": "8317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 500,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 503,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 513,
												"nodeType": "IfStatement",
												"src": "8313:89:1",
												"trueBody": {
													"id": 512,
													"nodeType": "Block",
													"src": "8340:62:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 508,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 506,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 505,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "8361:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 510,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 511,
															"nodeType": "RevertStatement",
															"src": "8354:37:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 515,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "8419:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 518,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 517,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 516,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 520,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 496,
															"src": "8440:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 514,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "8411:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 521,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 522,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:1"
											}
										]
									},
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:1",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "8262:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "8279:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:1"
									},
									"returnParameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:1"
									},
									"scope": 651,
									"src": "8247:206:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 541,
										"nodeType": "Block",
										"src": "9063:54:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 535,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "9082:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 536,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 529,
															"src": "9089:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 537,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 531,
															"src": "9098:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 534,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															542,
															602
														],
														"referencedDeclaration": 602,
														"src": "9073:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 540,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:1"
											}
										]
									},
									"documentation": {
										"id": 525,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:1",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 542,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "9007:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "9022:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "9039:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:1"
									},
									"returnParameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:1"
									},
									"scope": 651,
									"src": "8989:128:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 601,
										"nodeType": "Block",
										"src": "10047:334:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 554,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "10061:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 557,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 555,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 558,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 568,
												"nodeType": "IfStatement",
												"src": "10057:89:1",
												"trueBody": {
													"id": 567,
													"nodeType": "Block",
													"src": "10082:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 563,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 562,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 561,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 560,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "10103:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 565,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 566,
															"nodeType": "RevertStatement",
															"src": "10096:39:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 569,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 547,
														"src": "10159:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 571,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 570,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 573,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 583,
												"nodeType": "IfStatement",
												"src": "10155:90:1",
												"trueBody": {
													"id": 582,
													"nodeType": "Block",
													"src": "10182:63:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 578,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 577,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 576,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 579,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 575,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "10203:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 580,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 581,
															"nodeType": "RevertStatement",
															"src": "10196:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 584,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 165,
																"src": "10254:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 587,
															"indexExpression": {
																"id": 585,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 545,
																"src": "10266:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 588,
														"indexExpression": {
															"id": 586,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "10273:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 589,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "10284:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 591,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:1"
											},
											{
												"condition": {
													"id": 592,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 551,
													"src": "10303:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 600,
												"nodeType": "IfStatement",
												"src": "10299:76:1",
												"trueBody": {
													"id": 599,
													"nodeType": "Block",
													"src": "10314:61:1",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 594,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 545,
																		"src": "10342:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 595,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 547,
																		"src": "10349:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 596,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 549,
																		"src": "10358:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 593,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "10333:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 598,
															"nodeType": "EmitStatement",
															"src": "10328:36:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 543,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:1",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 602,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9967:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 544,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9982:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 546,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9999:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "10014:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 550,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:1"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:1"
									},
									"scope": 651,
									"src": "9949:432:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 649,
										"nodeType": "Block",
										"src": "10752:388:1",
										"statements": [
											{
												"assignments": [
													613
												],
												"declarations": [
													{
														"constant": false,
														"id": 613,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 649,
														"src": "10762:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 612,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 618,
												"initialValue": {
													"arguments": [
														{
															"id": 615,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 605,
															"src": "10799:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 616,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "10806:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 614,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 278,
														"src": "10789:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 619,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 613,
														"src": "10828:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 622,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 621,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 620,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 623,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 624,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 648,
												"nodeType": "IfStatement",
												"src": "10824:310:1",
												"trueBody": {
													"id": 647,
													"nodeType": "Block",
													"src": "10867:267:1",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 628,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 626,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 613,
																	"src": "10885:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 627,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 609,
																	"src": "10904:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 636,
															"nodeType": "IfStatement",
															"src": "10881:130:1",
															"trueBody": {
																"id": 635,
																"nodeType": "Block",
																"src": "10911:100:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 630,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 607,
																					"src": "10963:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 631,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 613,
																					"src": "10972:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 632,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 609,
																					"src": "10990:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 629,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 30,
																				"src": "10936:26:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 633,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 634,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:1"
																	}
																]
															}
														},
														{
															"id": 646,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:1",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 638,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 605,
																				"src": "11061:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 639,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 607,
																				"src": "11068:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 642,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 640,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 613,
																					"src": "11077:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 641,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 609,
																					"src": "11096:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 643,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 637,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				542,
																				602
																			],
																			"referencedDeclaration": 602,
																			"src": "11052:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 644,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 645,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:1"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 603,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:1",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 650,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10688:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 604,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10703:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10720:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:1"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:1"
									},
									"scope": 651,
									"src": "10663:477:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 652,
							"src": "1401:9741:1",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40
							],
							"usedEvents": [
								663,
								672
							]
						}
					],
					"src": "105:11038:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							729
						]
					},
					"id": 730,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 653,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 654,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 729,
							"linearizedBaseContracts": [
								729
							],
							"name": "IERC20",
							"nameLocation": "213:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 655,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 663,
									"name": "Transfer",
									"nameLocation": "395:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 657,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "404:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 656,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 659,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "426:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 658,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 661,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "446:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:2"
									},
									"src": "389:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 672,
									"name": "Approval",
									"nameLocation": "626:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "635:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 665,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 668,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "658:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 667,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 670,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "683:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:2"
									},
									"src": "620:78:2"
								},
								{
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:2",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 678,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:2"
									},
									"returnParameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "820:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 675,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:2"
									},
									"scope": 729,
									"src": "774:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 679,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:2",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 686,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "930:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:2"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "970:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:2"
									},
									"scope": 729,
									"src": "911:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 687,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:2",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 696,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1221:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1233:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:2"
									},
									"returnParameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1266:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 693,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:2"
									},
									"scope": 729,
									"src": "1203:69:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 697,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 706,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1566:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1581:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 700,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:2"
									},
									"returnParameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1621:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:2"
									},
									"scope": 729,
									"src": "1547:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:2",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 716,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2325:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2342:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 710,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:2"
									},
									"returnParameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2375:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 713,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:2"
									},
									"scope": 729,
									"src": "2308:73:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 717,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 728,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2711:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 718,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2725:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 720,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2737:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 722,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:2"
									},
									"returnParameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2770:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 725,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:2"
									},
									"scope": 729,
									"src": "2689:87:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 730,
							"src": "203:2575:2",
							"usedErrors": [],
							"usedEvents": [
								663,
								672
							]
						}
					],
					"src": "106:2673:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							729
						],
						"IERC20Metadata": [
							755
						]
					},
					"id": 756,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 731,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 733,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 756,
							"sourceUnit": 730,
							"src": "151:37:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 732,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 729,
										"src": "159:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 735,
										"name": "IERC20",
										"nameLocations": [
											"305:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 729,
										"src": "305:6:3"
									},
									"id": 736,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:3"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 734,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:3",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 755,
							"linearizedBaseContracts": [
								755,
								729
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 737,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 742,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:3"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "416:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 739,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:3"
									},
									"scope": 755,
									"src": "377:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 743,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:3",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 748,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:3"
									},
									"returnParameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 748,
												"src": "539:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 745,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:3"
									},
									"scope": 755,
									"src": "498:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 749,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:3",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 754,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:3"
									},
									"returnParameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "673:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 751,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:3"
									},
									"scope": 755,
									"src": "630:50:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 756,
							"src": "277:405:3",
							"usedErrors": [],
							"usedEvents": [
								663,
								672
							]
						}
					],
					"src": "125:558:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							773
						]
					},
					"id": 774,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 757,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "116:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 758,
								"nodeType": "StructuredDocumentation",
								"src": "142:152:4",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 773,
							"linearizedBaseContracts": [
								773
							],
							"name": "IERC721Receiver",
							"nameLocation": "305:15:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 759,
										"nodeType": "StructuredDocumentation",
										"src": "327:500:4",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 772,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "841:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "875:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "867:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "901:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "893:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 762,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "893:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "923:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "915:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 764,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "915:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "955:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "940:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 766,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "940:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:108:4"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "984:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 769,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "984:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "983:8:4"
									},
									"scope": 773,
									"src": "832:160:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 774,
							"src": "295:699:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "116:879:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol",
					"exportedSymbols": {
						"ERC721Holder": [
							800
						],
						"IERC721Receiver": [
							773
						]
					},
					"id": 801,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 775,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "119:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "../IERC721Receiver.sol",
							"id": 777,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 801,
							"sourceUnit": 774,
							"src": "145:55:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 776,
										"name": "IERC721Receiver",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 773,
										"src": "153:15:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 779,
										"name": "IERC721Receiver",
										"nameLocations": [
											"475:15:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 773,
										"src": "475:15:5"
									},
									"id": 780,
									"nodeType": "InheritanceSpecifier",
									"src": "475:15:5"
								}
							],
							"canonicalName": "ERC721Holder",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 778,
								"nodeType": "StructuredDocumentation",
								"src": "202:238:5",
								"text": " @dev Implementation of the {IERC721Receiver} interface.\n Accepts all token transfers.\n Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\n {IERC721-setApprovalForAll}."
							},
							"fullyImplemented": true,
							"id": 800,
							"linearizedBaseContracts": [
								800,
								773
							],
							"name": "ERC721Holder",
							"nameLocation": "459:12:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										772
									],
									"body": {
										"id": 798,
										"nodeType": "Block",
										"src": "738:54:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 794,
															"name": "this",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967268,
															"src": "755:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ERC721Holder_$800",
																"typeString": "contract ERC721Holder"
															}
														},
														"id": 795,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "760:16:5",
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 799,
														"src": "755:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
														}
													},
													"id": 796,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "777:8:5",
													"memberName": "selector",
													"nodeType": "MemberAccess",
													"src": "755:30:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"functionReturnParameters": 793,
												"id": 797,
												"nodeType": "Return",
												"src": "748:37:5"
											}
										]
									},
									"documentation": {
										"id": 781,
										"nodeType": "StructuredDocumentation",
										"src": "497:137:5",
										"text": " @dev See {IERC721Receiver-onERC721Received}.\n Always returns `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 799,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "648:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 799,
												"src": "665:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "665:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 799,
												"src": "674:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "674:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 799,
												"src": "683:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 799,
												"src": "692:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 788,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "692:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "664:41:5"
									},
									"returnParameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 799,
												"src": "730:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 791,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "730:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "729:8:5"
									},
									"scope": 800,
									"src": "639:153:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 801,
							"src": "441:353:5",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "119:676:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							830
						]
					},
					"id": 831,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 802,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 803,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 830,
							"linearizedBaseContracts": [
								830
							],
							"name": "Context",
							"nameLocation": "642:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 811,
										"nodeType": "Block",
										"src": "718:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 808,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 807,
												"id": 810,
												"nodeType": "Return",
												"src": "728:17:6"
											}
										]
									},
									"id": 812,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:6"
									},
									"returnParameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "709:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 805,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:6"
									},
									"scope": 830,
									"src": "656:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 820,
										"nodeType": "Block",
										"src": "825:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 817,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:6",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 816,
												"id": 819,
												"nodeType": "Return",
												"src": "835:15:6"
											}
										]
									},
									"id": 821,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 813,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:6"
									},
									"returnParameters": {
										"id": 816,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 815,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "809:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 814,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:6"
									},
									"scope": 830,
									"src": "758:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 828,
										"nodeType": "Block",
										"src": "935:25:6",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 826,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 825,
												"id": 827,
												"nodeType": "Return",
												"src": "945:8:6"
											}
										]
									},
									"id": 829,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:6"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "926:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:6"
									},
									"scope": 830,
									"src": "863:97:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 831,
							"src": "624:338:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							959
						],
						"IERC721": [
							947
						]
					},
					"id": 948,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 832,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "108:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.1/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 834,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 948,
							"sourceUnit": 960,
							"src": "134:62:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 833,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 959,
										"src": "142:7:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 836,
										"name": "IERC165",
										"nameLocations": [
											"287:7:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 959,
										"src": "287:7:7"
									},
									"id": 837,
									"nodeType": "InheritanceSpecifier",
									"src": "287:7:7"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 835,
								"nodeType": "StructuredDocumentation",
								"src": "198:67:7",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 947,
							"linearizedBaseContracts": [
								947,
								959
							],
							"name": "IERC721",
							"nameLocation": "276:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 838,
										"nodeType": "StructuredDocumentation",
										"src": "301:88:7",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 846,
									"name": "Transfer",
									"nameLocation": "400:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "425:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "409:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "409:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 842,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "447:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "431:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 841,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "431:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 844,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "467:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "451:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 843,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "451:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "408:67:7"
									},
									"src": "394:82:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 847,
										"nodeType": "StructuredDocumentation",
										"src": "482:94:7",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 855,
									"name": "Approval",
									"nameLocation": "587:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "612:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 855,
												"src": "596:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "596:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 851,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "635:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 855,
												"src": "619:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 850,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "661:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 855,
												"src": "645:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 852,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "595:74:7"
									},
									"src": "581:89:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 856,
										"nodeType": "StructuredDocumentation",
										"src": "676:117:7",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 864,
									"name": "ApprovalForAll",
									"nameLocation": "804:14:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 858,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "835:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "819:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 857,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 860,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "858:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "842:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 859,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "842:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 862,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "873:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "868:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 861,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "868:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:64:7"
									},
									"src": "798:85:7"
								},
								{
									"documentation": {
										"id": 865,
										"nodeType": "StructuredDocumentation",
										"src": "889:76:7",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 872,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "979:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "997:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "989:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "989:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "988:15:7"
									},
									"returnParameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1035:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "1027:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 869,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1027:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1026:17:7"
									},
									"scope": 947,
									"src": "970:74:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 873,
										"nodeType": "StructuredDocumentation",
										"src": "1050:131:7",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 880,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1195:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1211:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1203:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 874,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1203:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1202:17:7"
									},
									"returnParameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1251:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 880,
												"src": "1243:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1243:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1242:15:7"
									},
									"scope": 947,
									"src": "1186:72:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 881,
										"nodeType": "StructuredDocumentation",
										"src": "1264:565:7",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 892,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1843:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 883,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1868:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "1860:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 882,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1860:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1882:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "1874:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 884,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1874:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "1886:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 886,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1918:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "1903:19:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 888,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1903:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1859:64:7"
									},
									"returnParameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1932:0:7"
									},
									"scope": 947,
									"src": "1834:99:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 893,
										"nodeType": "StructuredDocumentation",
										"src": "1939:705:7",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 902,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2658:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2683:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "2675:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 894,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2675:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2697:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "2689:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 896,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2689:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2709:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "2701:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2674:43:7"
									},
									"returnParameters": {
										"id": 901,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2726:0:7"
									},
									"scope": 947,
									"src": "2649:78:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 903,
										"nodeType": "StructuredDocumentation",
										"src": "2733:732:7",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 912,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3479:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3500:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "3492:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 904,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3492:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3514:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "3506:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 906,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3506:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3526:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "3518:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 908,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3518:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3491:43:7"
									},
									"returnParameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3543:0:7"
									},
									"scope": 947,
									"src": "3470:74:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 913,
										"nodeType": "StructuredDocumentation",
										"src": "3550:452:7",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 920,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4016:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4032:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "4024:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 914,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4024:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4044:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "4036:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 916,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4036:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4023:29:7"
									},
									"returnParameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4061:0:7"
									},
									"scope": 947,
									"src": "4007:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 921,
										"nodeType": "StructuredDocumentation",
										"src": "4068:315:7",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 928,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4397:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4423:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "4415:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 922,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4415:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4438:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "4433:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 924,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4433:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4414:33:7"
									},
									"returnParameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4456:0:7"
									},
									"scope": 947,
									"src": "4388:69:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "4463:139:7",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 936,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4616:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4636:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 936,
												"src": "4628:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4628:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4627:17:7"
									},
									"returnParameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4676:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 936,
												"src": "4668:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 933,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4668:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4667:18:7"
									},
									"scope": 947,
									"src": "4607:79:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 937,
										"nodeType": "StructuredDocumentation",
										"src": "4692:138:7",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 946,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4844:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4869:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "4861:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 938,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4861:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4884:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "4876:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 940,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4860:33:7"
									},
									"returnParameters": {
										"id": 945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "4917:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 943,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4917:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4916:6:7"
									},
									"scope": 947,
									"src": "4835:88:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 948,
							"src": "266:4659:7",
							"usedErrors": [],
							"usedEvents": [
								846,
								855,
								864
							]
						}
					],
					"src": "108:4818:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts@5.0.1/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.1/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							959
						]
					},
					"id": 960,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 949,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 950,
								"nodeType": "StructuredDocumentation",
								"src": "141:279:8",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 959,
							"linearizedBaseContracts": [
								959
							],
							"name": "IERC165",
							"nameLocation": "431:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 951,
										"nodeType": "StructuredDocumentation",
										"src": "445:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 958,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "799:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "824:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "817:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 952,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "817:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "816:20:8"
									},
									"returnParameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "860:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 955,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "860:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "859:6:8"
									},
									"scope": 959,
									"src": "790:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 960,
							"src": "421:447:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:754:8"
				},
				"id": 8
			},
			"contracts/StakeTokenStaking.sol": {
				"ast": {
					"absolutePath": "contracts/StakeTokenStaking.sol",
					"exportedSymbols": {
						"Context": [
							830
						],
						"ERC20": [
							651
						],
						"ERC721Holder": [
							800
						],
						"IERC165": [
							959
						],
						"IERC20": [
							729
						],
						"IERC20Errors": [
							41
						],
						"IERC20Metadata": [
							755
						],
						"IERC721": [
							947
						],
						"IERC721Receiver": [
							773
						],
						"Staking": [
							1164
						]
					},
					"id": 1165,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 961,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".24"
							],
							"nodeType": "PragmaDirective",
							"src": "35:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts@5.0.1/token/ERC721/IERC721.sol",
							"id": 962,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1165,
							"sourceUnit": 948,
							"src": "63:64:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 963,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1165,
							"sourceUnit": 652,
							"src": "129:55:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 964,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1165,
							"sourceUnit": 774,
							"src": "186:66:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol",
							"file": "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol",
							"id": 965,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1165,
							"sourceUnit": 801,
							"src": "254:69:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 966,
										"name": "IERC721Receiver",
										"nameLocations": [
											"347:15:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 773,
										"src": "347:15:9"
									},
									"id": 967,
									"nodeType": "InheritanceSpecifier",
									"src": "347:15:9"
								},
								{
									"baseName": {
										"id": 968,
										"name": "ERC721Holder",
										"nameLocations": [
											"364:12:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 800,
										"src": "364:12:9"
									},
									"id": 969,
									"nodeType": "InheritanceSpecifier",
									"src": "364:12:9"
								}
							],
							"canonicalName": "Staking",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1164,
							"linearizedBaseContracts": [
								1164,
								800,
								773
							],
							"name": "Staking",
							"nameLocation": "336:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 972,
									"mutability": "immutable",
									"name": "nft",
									"nameLocation": "404:3:9",
									"nodeType": "VariableDeclaration",
									"scope": 1164,
									"src": "386:21:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC721_$947",
										"typeString": "contract IERC721"
									},
									"typeName": {
										"id": 971,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 970,
											"name": "IERC721",
											"nameLocations": [
												"386:7:9"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 947,
											"src": "386:7:9"
										},
										"referencedDeclaration": 947,
										"src": "386:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$947",
											"typeString": "contract IERC721"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 975,
									"mutability": "immutable",
									"name": "token",
									"nameLocation": "430:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 1164,
									"src": "414:21:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ERC20_$651",
										"typeString": "contract ERC20"
									},
									"typeName": {
										"id": 974,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 973,
											"name": "ERC20",
											"nameLocations": [
												"414:5:9"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 651,
											"src": "414:5:9"
										},
										"referencedDeclaration": 651,
										"src": "414:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC20_$651",
											"typeString": "contract ERC20"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "584b62a1",
									"id": 981,
									"mutability": "mutable",
									"name": "stakes",
									"nameLocation": "530:6:9",
									"nodeType": "VariableDeclaration",
									"scope": 1164,
									"src": "474:62:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(uint256 => uint256))"
									},
									"typeName": {
										"id": 980,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 976,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "483:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "474:48:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(uint256 => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 979,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 977,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "502:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "494:27:9",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
												"typeString": "mapping(uint256 => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 978,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "513:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1000,
										"nodeType": "Block",
										"src": "587:70:9",
										"statements": [
											{
												"expression": {
													"id": 992,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 988,
														"name": "nft",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 972,
														"src": "598:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$947",
															"typeString": "contract IERC721"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 990,
																"name": "_nft",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 983,
																"src": "612:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 989,
															"name": "IERC721",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 947,
															"src": "604:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC721_$947_$",
																"typeString": "type(contract IERC721)"
															}
														},
														"id": 991,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "604:13:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$947",
															"typeString": "contract IERC721"
														}
													},
													"src": "598:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC721_$947",
														"typeString": "contract IERC721"
													}
												},
												"id": 993,
												"nodeType": "ExpressionStatement",
												"src": "598:19:9"
											},
											{
												"expression": {
													"id": 998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 994,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 975,
														"src": "628:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$651",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 996,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 985,
																"src": "642:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 995,
															"name": "ERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 651,
															"src": "636:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC20_$651_$",
																"typeString": "type(contract ERC20)"
															}
														},
														"id": 997,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "636:13:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$651",
															"typeString": "contract ERC20"
														}
													},
													"src": "628:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$651",
														"typeString": "contract ERC20"
													}
												},
												"id": 999,
												"nodeType": "ExpressionStatement",
												"src": "628:21:9"
											}
										]
									},
									"id": 1001,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "_nft",
												"nameLocation": "565:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1001,
												"src": "557:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 982,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "557:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "579:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1001,
												"src": "571:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 984,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "571:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "556:30:9"
									},
									"returnParameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "587:0:9"
									},
									"scope": 1164,
									"src": "545:112:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1032,
										"nodeType": "Block",
										"src": "732:239:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1010,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1008,
														"name": "time",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1003,
														"src": "746:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "31",
														"id": 1009,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "753:9:9",
														"subdenomination": "minutes",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_60_by_1",
															"typeString": "int_const 60"
														},
														"value": "1"
													},
													"src": "746:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1016,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1014,
															"name": "time",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1003,
															"src": "808:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "33",
															"id": 1015,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "815:9:9",
															"subdenomination": "minutes",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_180_by_1",
																"typeString": "int_const 180"
															},
															"value": "3"
														},
														"src": "808:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1022,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1020,
																"name": "time",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1003,
																"src": "870:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "35",
																"id": 1021,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "877:9:9",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_300_by_1",
																	"typeString": "int_const 300"
																},
																"value": "5"
															},
															"src": "870:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 1028,
															"nodeType": "Block",
															"src": "928:36:9",
															"statements": [
																{
																	"expression": {
																		"hexValue": "3130",
																		"id": 1026,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "950:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"functionReturnParameters": 1007,
																	"id": 1027,
																	"nodeType": "Return",
																	"src": "943:9:9"
																}
															]
														},
														"id": 1029,
														"nodeType": "IfStatement",
														"src": "867:97:9",
														"trueBody": {
															"id": 1025,
															"nodeType": "Block",
															"src": "888:35:9",
															"statements": [
																{
																	"expression": {
																		"hexValue": "35",
																		"id": 1023,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "910:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_5_by_1",
																			"typeString": "int_const 5"
																		},
																		"value": "5"
																	},
																	"functionReturnParameters": 1007,
																	"id": 1024,
																	"nodeType": "Return",
																	"src": "903:8:9"
																}
															]
														}
													},
													"id": 1030,
													"nodeType": "IfStatement",
													"src": "805:159:9",
													"trueBody": {
														"id": 1019,
														"nodeType": "Block",
														"src": "826:35:9",
														"statements": [
															{
																"expression": {
																	"hexValue": "33",
																	"id": 1017,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "848:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"functionReturnParameters": 1007,
																"id": 1018,
																"nodeType": "Return",
																"src": "841:8:9"
															}
														]
													}
												},
												"id": 1031,
												"nodeType": "IfStatement",
												"src": "743:221:9",
												"trueBody": {
													"id": 1013,
													"nodeType": "Block",
													"src": "764:35:9",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1011,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "786:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1007,
															"id": 1012,
															"nodeType": "Return",
															"src": "779:8:9"
														}
													]
												}
											}
										]
									},
									"id": 1033,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateRate",
									"nameLocation": "674:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "696:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "688:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1002,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "688:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "687:14:9"
									},
									"returnParameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "723:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1005,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "723:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:9:9"
									},
									"scope": 1164,
									"src": "665:306:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1072,
										"nodeType": "Block",
										"src": "1021:240:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1045,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1041,
																		"name": "_tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1035,
																		"src": "1052:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1039,
																		"name": "nft",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 972,
																		"src": "1040:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721_$947",
																			"typeString": "contract IERC721"
																		}
																	},
																	"id": 1040,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1044:7:9",
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 880,
																	"src": "1040:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view external returns (address)"
																	}
																},
																"id": 1042,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1040:21:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1043,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1065:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1044,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1069:6:9",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1065:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1040:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f75277265206e6f74206f776e2074686973204e4654",
															"id": 1046,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1077:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c",
																"typeString": "literal_string \"You're not own this NFT\""
															},
															"value": "You're not own this NFT"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4be1d96afb940c6ae51d340f7a27eef811e3b89e673c9789ca00b8f40a37601c",
																"typeString": "literal_string \"You're not own this NFT\""
															}
														],
														"id": 1038,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1032:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1047,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1032:71:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1048,
												"nodeType": "ExpressionStatement",
												"src": "1032:71:9"
											},
											{
												"expression": {
													"id": 1057,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1049,
																"name": "stakes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 981,
																"src": "1135:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 1053,
															"indexExpression": {
																"expression": {
																	"id": 1050,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1142:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1051,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1146:6:9",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1142:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1135:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1054,
														"indexExpression": {
															"id": 1052,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1035,
															"src": "1154:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1135:28:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1055,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1166:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1056,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1172:9:9",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1166:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1135:46:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1058,
												"nodeType": "ExpressionStatement",
												"src": "1135:46:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1062,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1213:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1063,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1217:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1213:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1066,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1233:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Staking_$1164",
																		"typeString": "contract Staking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Staking_$1164",
																		"typeString": "contract Staking"
																	}
																],
																"id": 1065,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1225:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1064,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1225:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1067,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1225:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1068,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1035,
															"src": "1240:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1069,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1250:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"id": 1059,
															"name": "nft",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 972,
															"src": "1192:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$947",
																"typeString": "contract IERC721"
															}
														},
														"id": 1061,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1196:16:9",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 892,
														"src": "1192:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory) external"
														}
													},
													"id": 1070,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1192:61:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1071,
												"nodeType": "ExpressionStatement",
												"src": "1192:61:9"
											}
										]
									},
									"functionSelector": "1dbb2a22",
									"id": 1073,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "staking",
									"nameLocation": "988:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "1004:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1073,
												"src": "996:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1034,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "996:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "995:18:9"
									},
									"returnParameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1021:0:9"
									},
									"scope": 1164,
									"src": "979:282:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1121,
										"nodeType": "Block",
										"src": "1341:275:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 1081,
																		"name": "stakes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 981,
																		"src": "1360:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(uint256 => uint256))"
																		}
																	},
																	"id": 1084,
																	"indexExpression": {
																		"expression": {
																			"id": 1082,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1367:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1083,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1371:6:9",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1367:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1360:18:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1086,
																"indexExpression": {
																	"id": 1085,
																	"name": "_tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1075,
																	"src": "1379:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1360:28:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1087,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1391:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1360:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f75206e65766572207374616b652074686973204e4654",
															"id": 1089,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1394:26:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b",
																"typeString": "literal_string \"You never stake this NFT\""
															},
															"value": "You never stake this NFT"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_16d3606e43dcc12ad24f1c7e0d6e7846a04e25f806dacc21ee10861dedb70b9b",
																"typeString": "literal_string \"You never stake this NFT\""
															}
														],
														"id": 1080,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1352:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1352:69:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1091,
												"nodeType": "ExpressionStatement",
												"src": "1352:69:9"
											},
											{
												"assignments": [
													1093
												],
												"declarations": [
													{
														"constant": false,
														"id": 1093,
														"mutability": "mutable",
														"name": "time",
														"nameLocation": "1440:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1121,
														"src": "1432:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1092,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1432:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1103,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1094,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1447:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1095,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1453:9:9",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1447:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 1096,
																"name": "stakes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 981,
																"src": "1465:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 1099,
															"indexExpression": {
																"expression": {
																	"id": 1097,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1472:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1098,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1476:6:9",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1472:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1465:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1101,
														"indexExpression": {
															"id": 1100,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1075,
															"src": "1484:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1465:28:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1447:46:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1432:61:9"
											},
											{
												"assignments": [
													1105
												],
												"declarations": [
													{
														"constant": false,
														"id": 1105,
														"mutability": "mutable",
														"name": "rewardAmount",
														"nameLocation": "1512:12:9",
														"nodeType": "VariableDeclaration",
														"scope": 1121,
														"src": "1504:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1104,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1504:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1118,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1115,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1110,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1107,
																		"name": "time",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1093,
																		"src": "1541:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1106,
																	"name": "calculateRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "1527:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1108,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1527:19:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1109,
																"name": "time",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "1549:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1527:26:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"id": 1113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3130",
																		"id": 1111,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1557:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"hexValue": "3138",
																		"id": 1112,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1563:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_18_by_1",
																			"typeString": "int_const 18"
																		},
																		"value": "18"
																	},
																	"src": "1557:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	}
																}
															],
															"id": 1114,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1556:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000"
															}
														},
														"src": "1527:39:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31",
														"id": 1116,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1569:9:9",
														"subdenomination": "minutes",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_60_by_1",
															"typeString": "int_const 60"
														},
														"value": "1"
													},
													"src": "1527:51:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1504:74:9"
											},
											{
												"expression": {
													"id": 1119,
													"name": "rewardAmount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1105,
													"src": "1596:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1079,
												"id": 1120,
												"nodeType": "Return",
												"src": "1589:19:9"
											}
										]
									},
									"functionSelector": "d2d7231f",
									"id": 1122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateReward",
									"nameLocation": "1278:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1076,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1075,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "1302:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "1294:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1074,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1294:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1293:18:9"
									},
									"returnParameters": {
										"id": 1079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "1332:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1077,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1331:9:9"
									},
									"scope": 1164,
									"src": "1269:347:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1162,
										"nodeType": "Block",
										"src": "1666:338:9",
										"statements": [
											{
												"assignments": [
													1128
												],
												"declarations": [
													{
														"constant": false,
														"id": 1128,
														"mutability": "mutable",
														"name": "rewardAmount",
														"nameLocation": "1713:12:9",
														"nodeType": "VariableDeclaration",
														"scope": 1162,
														"src": "1705:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1127,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1705:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1132,
												"initialValue": {
													"arguments": [
														{
															"id": 1130,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1124,
															"src": "1744:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1129,
														"name": "calculateReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1122,
														"src": "1728:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1728:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1705:48:9"
											},
											{
												"expression": {
													"id": 1139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "1764:35:9",
													"subExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 1133,
																"name": "stakes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 981,
																"src": "1771:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 1136,
															"indexExpression": {
																"expression": {
																	"id": 1134,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1778:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1782:6:9",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1778:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1771:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1138,
														"indexExpression": {
															"id": 1137,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1124,
															"src": "1790:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1771:28:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1140,
												"nodeType": "ExpressionStatement",
												"src": "1764:35:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1146,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1839:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Staking_$1164",
																		"typeString": "contract Staking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Staking_$1164",
																		"typeString": "contract Staking"
																	}
																],
																"id": 1145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1831:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1144,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1831:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1831:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1148,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1846:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1850:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1846:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1150,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1124,
															"src": "1858:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1151,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1868:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"id": 1141,
															"name": "nft",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 972,
															"src": "1810:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$947",
																"typeString": "contract IERC721"
															}
														},
														"id": 1143,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1814:16:9",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 892,
														"src": "1810:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory) external"
														}
													},
													"id": 1152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1810:61:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1153,
												"nodeType": "ExpressionStatement",
												"src": "1810:61:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1157,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1899:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1158,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1903:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1899:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1159,
															"name": "rewardAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1128,
															"src": "1911:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1154,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 975,
															"src": "1884:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ERC20_$651",
																"typeString": "contract ERC20"
															}
														},
														"id": 1156,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1890:8:9",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 261,
														"src": "1884:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1884:40:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1161,
												"nodeType": "ExpressionStatement",
												"src": "1884:40:9"
											}
										]
									},
									"functionSelector": "2e17de78",
									"id": 1163,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unstake",
									"nameLocation": "1633:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "1649:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "1641:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1641:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1640:18:9"
									},
									"returnParameters": {
										"id": 1126,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1666:0:9"
									},
									"scope": 1164,
									"src": "1624:380:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1165,
							"src": "327:1682:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "35:1974:9"
				},
				"id": 9
			}
		}
	}
}